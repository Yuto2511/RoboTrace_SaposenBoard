
RoboTrace_saposen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d968  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800daf8  0800daf8  0001daf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e028  0800e028  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800e028  0800e028  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e028  0800e028  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e028  0800e028  0001e028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e02c  0800e02c  0001e02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e030  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  200001f0  0800e21c  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  0800e21c  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fcb  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029bb  00000000  00000000  000381e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  0003aba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001290  00000000  00000000  0003bf50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001db8a  00000000  00000000  0003d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011593  00000000  00000000  0005ad6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000af031  00000000  00000000  0006c2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b32e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d0  00000000  00000000  0011b3ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dae0 	.word	0x0800dae0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800dae0 	.word	0x0800dae0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f002 fcd4 	bl	8003638 <HAL_Init>

  /* USER CODE BEGIN Init */
  setbuf(stdout, NULL);
 8000c90:	4b64      	ldr	r3, [pc, #400]	; (8000e24 <main+0x19c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f009 fd37 	bl	800a70c <setbuf>
  user_init();
 8000c9e:	f000 fd7d 	bl	800179c <user_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca2:	f000 f8e3 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca6:	f000 fd11 	bl	80016cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000caa:	f000 fce9 	bl	8001680 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cae:	f000 fcb7 	bl	8001620 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000cb2:	f000 f939 	bl	8000f28 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cb6:	f000 fa2f 	bl	8001118 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000cba:	f000 fa6d 	bl	8001198 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cbe:	f000 fb1f 	bl	8001300 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cc2:	f000 fb71 	bl	80013a8 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000cc6:	f000 f9c9 	bl	800105c <MX_ADC2_Init>
  MX_TIM6_Init();
 8000cca:	f000 fbc3 	bl	8001454 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000cce:	f000 fbf7 	bl	80014c0 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000cd2:	f000 fc2b 	bl	800152c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  //Motor
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4853      	ldr	r0, [pc, #332]	; (8000e28 <main+0x1a0>)
 8000cda:	f005 fe29 	bl	8006930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cde:	2104      	movs	r1, #4
 8000ce0:	4851      	ldr	r0, [pc, #324]	; (8000e28 <main+0x1a0>)
 8000ce2:	f005 fe25 	bl	8006930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	484f      	ldr	r0, [pc, #316]	; (8000e28 <main+0x1a0>)
 8000cea:	f005 fe21 	bl	8006930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000cee:	210c      	movs	r1, #12
 8000cf0:	484d      	ldr	r0, [pc, #308]	; (8000e28 <main+0x1a0>)
 8000cf2:	f005 fe1d 	bl	8006930 <HAL_TIM_PWM_Start>

  //buzzer
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	484c      	ldr	r0, [pc, #304]	; (8000e2c <main+0x1a4>)
 8000cfa:	f005 fe19 	bl	8006930 <HAL_TIM_PWM_Start>

  //Encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000cfe:	213c      	movs	r1, #60	; 0x3c
 8000d00:	484b      	ldr	r0, [pc, #300]	; (8000e30 <main+0x1a8>)
 8000d02:	f005 ffa7 	bl	8006c54 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000d06:	213c      	movs	r1, #60	; 0x3c
 8000d08:	484a      	ldr	r0, [pc, #296]	; (8000e34 <main+0x1ac>)
 8000d0a:	f005 ffa3 	bl	8006c54 <HAL_TIM_Encoder_Start>


  //timer
  HAL_TIM_Base_Start_IT(&htim6);
 8000d0e:	484a      	ldr	r0, [pc, #296]	; (8000e38 <main+0x1b0>)
 8000d10:	f005 fd5a 	bl	80067c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d14:	4849      	ldr	r0, [pc, #292]	; (8000e3c <main+0x1b4>)
 8000d16:	f005 fd57 	bl	80067c8 <HAL_TIM_Base_Start_IT>


  //ADC
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4848      	ldr	r0, [pc, #288]	; (8000e40 <main+0x1b8>)
 8000d1e:	f002 ff9d 	bl	8003c5c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC1_Sensor_Values, 4);
 8000d22:	2204      	movs	r2, #4
 8000d24:	4947      	ldr	r1, [pc, #284]	; (8000e44 <main+0x1bc>)
 8000d26:	4846      	ldr	r0, [pc, #280]	; (8000e40 <main+0x1b8>)
 8000d28:	f002 febe 	bl	8003aa8 <HAL_ADC_Start_DMA>
  hdma_adc1.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 8000d2c:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <main+0x1c0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <main+0x1c0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0206 	bic.w	r2, r2, #6
 8000d3a:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) ADC2_Sensor_Value, 1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4943      	ldr	r1, [pc, #268]	; (8000e4c <main+0x1c4>)
 8000d40:	4843      	ldr	r0, [pc, #268]	; (8000e50 <main+0x1c8>)
 8000d42:	f002 feb1 	bl	8003aa8 <HAL_ADC_Start_DMA>
  hdma_adc2.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 8000d46:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <main+0x1cc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <main+0x1cc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0206 	bic.w	r2, r2, #6
 8000d54:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8000d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5a:	f002 fcd3 	bl	8003704 <HAL_Delay>
	  else if( HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5) == 0 ) __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);

	  if( HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_1) == 0 ) start_flag = 1;
	  */

	  if( HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_1) == 0 ){
 8000d5e:	2102      	movs	r1, #2
 8000d60:	483d      	ldr	r0, [pc, #244]	; (8000e58 <main+0x1d0>)
 8000d62:	f004 f937 	bl	8004fd4 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d111      	bne.n	8000d90 <main+0x108>
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 500);
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <main+0x1a4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1500);
 8000d76:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d7a:	f002 fcc3 	bl	8003704 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <main+0x1a4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2200      	movs	r2, #0
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
		  Sens_Calibration();
 8000d86:	f000 fe87 	bl	8001a98 <Sens_Calibration>
		  start_flag = 1;
 8000d8a:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <main+0x1d4>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
	  }

	  if(start_flag > 0){
 8000d90:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <main+0x1d4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d03c      	beq.n	8000e12 <main+0x18a>
		  loop_init();
 8000d98:	f000 fd7a 	bl	8001890 <loop_init>
		  HAL_Delay(4000);
 8000d9c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000da0:	f002 fcb0 	bl	8003704 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 500);
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <main+0x1a4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1000);
 8000dae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000db2:	f002 fca7 	bl	8003704 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <main+0x1a4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
		  linetrace_flag = 1;
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <main+0x1d8>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
		  cross_flag = 0;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <main+0x1dc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
	  }

	  while(linetrace_flag){
 8000dca:	e022      	b.n	8000e12 <main+0x18a>
		  stop_flag = start_stop();
 8000dcc:	f000 fd8c 	bl	80018e8 <start_stop>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <main+0x1e0>)
 8000dd6:	701a      	strb	r2, [r3, #0]
		  //printf("%d\r\n", stop_flag);
		  if(start_flag > 5){
 8000dd8:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <main+0x1d4>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b05      	cmp	r3, #5
 8000dde:	d907      	bls.n	8000df0 <main+0x168>
			  start_flag = linetrace_flag = 0;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <main+0x1d8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <main+0x1d8>)
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <main+0x1d4>)
 8000dec:	701a      	strb	r2, [r3, #0]
			  break;
 8000dee:	e014      	b.n	8000e1a <main+0x192>
		  }
		  if(stop_flag >= 2){
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <main+0x1e0>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d909      	bls.n	8000e0c <main+0x184>
			  linetrace_flag = 2;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <main+0x1d8>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	701a      	strb	r2, [r3, #0]
			  start_flag++;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <main+0x1d4>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <main+0x1d4>)
 8000e08:	701a      	strb	r2, [r3, #0]
			  break;
 8000e0a:	e006      	b.n	8000e1a <main+0x192>
		  }
		  HAL_Delay(1.5);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f002 fc79 	bl	8003704 <HAL_Delay>
	  while(linetrace_flag){
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <main+0x1d8>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1d8      	bne.n	8000dcc <main+0x144>
	  }

	  HAL_Delay(50);
 8000e1a:	2032      	movs	r0, #50	; 0x32
 8000e1c:	f002 fc72 	bl	8003704 <HAL_Delay>
	  if( HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_1) == 0 ){
 8000e20:	e79d      	b.n	8000d5e <main+0xd6>
 8000e22:	bf00      	nop
 8000e24:	2000001c 	.word	0x2000001c
 8000e28:	200004e0 	.word	0x200004e0
 8000e2c:	200006b8 	.word	0x200006b8
 8000e30:	20000578 	.word	0x20000578
 8000e34:	200002f4 	.word	0x200002f4
 8000e38:	20000490 	.word	0x20000490
 8000e3c:	20000704 	.word	0x20000704
 8000e40:	20000354 	.word	0x20000354
 8000e44:	200003c4 	.word	0x200003c4
 8000e48:	200003e0 	.word	0x200003e0
 8000e4c:	20000764 	.word	0x20000764
 8000e50:	20000240 	.word	0x20000240
 8000e54:	20000650 	.word	0x20000650
 8000e58:	48001400 	.word	0x48001400
 8000e5c:	2000075c 	.word	0x2000075c
 8000e60:	20000224 	.word	0x20000224
 8000e64:	200002e9 	.word	0x200002e9
 8000e68:	200002e8 	.word	0x200002e8

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b096      	sub	sp, #88	; 0x58
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e76:	2228      	movs	r2, #40	; 0x28
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f008 fe00 	bl	8009a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
 8000e9e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000eb4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000eb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 f9c6 	bl	8005250 <HAL_RCC_OscConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000eca:	f001 ffa1 	bl	8002e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 f8b8 	bl	8006060 <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ef6:	f001 ff8b 	bl	8002e10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8000efa:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8000efe:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f04:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4618      	mov	r0, r3
 8000f12:	f005 fadb 	bl	80064cc <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f1c:	f001 ff78 	bl	8002e10 <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	3758      	adds	r7, #88	; 0x58
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b43      	ldr	r3, [pc, #268]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f52:	4b41      	ldr	r3, [pc, #260]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f58:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f64:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f78:	4b37      	ldr	r3, [pc, #220]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f94:	2204      	movs	r2, #4
 8000f96:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_ADC1_Init+0x130>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <MX_ADC1_Init+0x130>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa4:	482c      	ldr	r0, [pc, #176]	; (8001058 <MX_ADC1_Init+0x130>)
 8000fa6:	f002 fbed 	bl	8003784 <HAL_ADC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000fb0:	f001 ff2e 	bl	8002e10 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4826      	ldr	r0, [pc, #152]	; (8001058 <MX_ADC1_Init+0x130>)
 8000fc0:	f003 f980 	bl	80042c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000fca:	f001 ff21 	bl	8002e10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000fda:	2305      	movs	r3, #5
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481b      	ldr	r0, [pc, #108]	; (8001058 <MX_ADC1_Init+0x130>)
 8000fec:	f002 fea8 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000ff6:	f001 ff0b 	bl	8002e10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4619      	mov	r1, r3
 8001006:	4814      	ldr	r0, [pc, #80]	; (8001058 <MX_ADC1_Init+0x130>)
 8001008:	f002 fe9a 	bl	8003d40 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001012:	f001 fefd 	bl	8002e10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001016:	230b      	movs	r3, #11
 8001018:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800101a:	2303      	movs	r3, #3
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_ADC1_Init+0x130>)
 8001024:	f002 fe8c 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 800102e:	f001 feef 	bl	8002e10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001032:	230c      	movs	r3, #12
 8001034:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001036:	2304      	movs	r3, #4
 8001038:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_ADC1_Init+0x130>)
 8001040:	f002 fe7e 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800104a:	f001 fee1 	bl	8002e10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000354 	.word	0x20000354

0800105c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <MX_ADC2_Init+0xb4>)
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <MX_ADC2_Init+0xb8>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_ADC2_Init+0xb4>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_ADC2_Init+0xb4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_ADC2_Init+0xb4>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <MX_ADC2_Init+0xb4>)
 800108c:	2201      	movs	r2, #1
 800108e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_ADC2_Init+0xb4>)
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_ADC2_Init+0xb4>)
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_ADC2_Init+0xb4>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_ADC2_Init+0xb4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_ADC2_Init+0xb4>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_ADC2_Init+0xb4>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_ADC2_Init+0xb4>)
 80010ba:	2204      	movs	r2, #4
 80010bc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_ADC2_Init+0xb4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_ADC2_Init+0xb4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010ca:	4811      	ldr	r0, [pc, #68]	; (8001110 <MX_ADC2_Init+0xb4>)
 80010cc:	f002 fb5a 	bl	8003784 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80010d6:	f001 fe9b 	bl	8002e10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010da:	2301      	movs	r3, #1
 80010dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010de:	2301      	movs	r3, #1
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80010e6:	2305      	movs	r3, #5
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	4619      	mov	r1, r3
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <MX_ADC2_Init+0xb4>)
 80010f8:	f002 fe22 	bl	8003d40 <HAL_ADC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001102:	f001 fe85 	bl	8002e10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000240 	.word	0x20000240
 8001114:	50000100 	.word	0x50000100

08001118 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_I2C1_Init+0x74>)
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <MX_I2C1_Init+0x78>)
 8001120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_I2C1_Init+0x74>)
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <MX_I2C1_Init+0x7c>)
 8001126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_I2C1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_I2C1_Init+0x74>)
 8001130:	2201      	movs	r2, #1
 8001132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_I2C1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001152:	480e      	ldr	r0, [pc, #56]	; (800118c <MX_I2C1_Init+0x74>)
 8001154:	f003 ff56 	bl	8005004 <HAL_I2C_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800115e:	f001 fe57 	bl	8002e10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <MX_I2C1_Init+0x74>)
 8001166:	f003 ffdc 	bl	8005122 <HAL_I2CEx_ConfigAnalogFilter>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001170:	f001 fe4e 	bl	8002e10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001174:	2100      	movs	r1, #0
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_I2C1_Init+0x74>)
 8001178:	f004 f81e 	bl	80051b8 <HAL_I2CEx_ConfigDigitalFilter>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001182:	f001 fe45 	bl	8002e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000290 	.word	0x20000290
 8001190:	40005400 	.word	0x40005400
 8001194:	2000090e 	.word	0x2000090e

08001198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	222c      	movs	r2, #44	; 0x2c
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 fc5b 	bl	8009a80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ca:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <MX_TIM1_Init+0x160>)
 80011cc:	4a4b      	ldr	r2, [pc, #300]	; (80012fc <MX_TIM1_Init+0x164>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 80011d0:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <MX_TIM1_Init+0x160>)
 80011d2:	220b      	movs	r2, #11
 80011d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <MX_TIM1_Init+0x160>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <MX_TIM1_Init+0x160>)
 80011de:	f240 128f 	movw	r2, #399	; 0x18f
 80011e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <MX_TIM1_Init+0x160>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ea:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <MX_TIM1_Init+0x160>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <MX_TIM1_Init+0x160>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011f6:	4840      	ldr	r0, [pc, #256]	; (80012f8 <MX_TIM1_Init+0x160>)
 80011f8:	f005 fb42 	bl	8006880 <HAL_TIM_PWM_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001202:	f001 fe05 	bl	8002e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001212:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001216:	4619      	mov	r1, r3
 8001218:	4837      	ldr	r0, [pc, #220]	; (80012f8 <MX_TIM1_Init+0x160>)
 800121a:	f006 fb47 	bl	80078ac <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001224:	f001 fdf4 	bl	8002e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001228:	2360      	movs	r3, #96	; 0x60
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	482a      	ldr	r0, [pc, #168]	; (80012f8 <MX_TIM1_Init+0x160>)
 800124e:	f005 fead 	bl	8006fac <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001258:	f001 fdda 	bl	8002e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001260:	2204      	movs	r2, #4
 8001262:	4619      	mov	r1, r3
 8001264:	4824      	ldr	r0, [pc, #144]	; (80012f8 <MX_TIM1_Init+0x160>)
 8001266:	f005 fea1 	bl	8006fac <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001270:	f001 fdce 	bl	8002e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001278:	2208      	movs	r2, #8
 800127a:	4619      	mov	r1, r3
 800127c:	481e      	ldr	r0, [pc, #120]	; (80012f8 <MX_TIM1_Init+0x160>)
 800127e:	f005 fe95 	bl	8006fac <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001288:	f001 fdc2 	bl	8002e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800128c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001290:	220c      	movs	r2, #12
 8001292:	4619      	mov	r1, r3
 8001294:	4818      	ldr	r0, [pc, #96]	; (80012f8 <MX_TIM1_Init+0x160>)
 8001296:	f005 fe89 	bl	8006fac <HAL_TIM_PWM_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80012a0:	f001 fdb6 	bl	8002e10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_TIM1_Init+0x160>)
 80012da:	f006 fb55 	bl	8007988 <HAL_TIMEx_ConfigBreakDeadTime>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80012e4:	f001 fd94 	bl	8002e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <MX_TIM1_Init+0x160>)
 80012ea:	f001 ffd5 	bl	8003298 <HAL_TIM_MspPostInit>

}
 80012ee:	bf00      	nop
 80012f0:	3758      	adds	r7, #88	; 0x58
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200004e0 	.word	0x200004e0
 80012fc:	40012c00 	.word	0x40012c00

08001300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2224      	movs	r2, #36	; 0x24
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f008 fbb6 	bl	8009a80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <MX_TIM2_Init+0xa4>)
 8001320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001324:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_TIM2_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM2_Init+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_TIM2_Init+0xa4>)
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM2_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_TIM2_Init+0xa4>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001346:	2303      	movs	r3, #3
 8001348:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800134e:	2301      	movs	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800135e:	2301      	movs	r3, #1
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_TIM2_Init+0xa4>)
 8001372:	f005 fbc9 	bl	8006b08 <HAL_TIM_Encoder_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800137c:	f001 fd48 	bl	8002e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_TIM2_Init+0xa4>)
 800138e:	f006 fa8d 	bl	80078ac <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001398:	f001 fd3a 	bl	8002e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	3730      	adds	r7, #48	; 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000578 	.word	0x20000578

080013a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2224      	movs	r2, #36	; 0x24
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f008 fb62 	bl	8009a80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_TIM3_Init+0xa4>)
 80013c8:	4a21      	ldr	r2, [pc, #132]	; (8001450 <MX_TIM3_Init+0xa8>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_TIM3_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_TIM3_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_TIM3_Init+0xa4>)
 80013da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_TIM3_Init+0xa4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_TIM3_Init+0xa4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ec:	2303      	movs	r3, #3
 80013ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001404:	2301      	movs	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4619      	mov	r1, r3
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_TIM3_Init+0xa4>)
 8001418:	f005 fb76 	bl	8006b08 <HAL_TIM_Encoder_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001422:	f001 fcf5 	bl	8002e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <MX_TIM3_Init+0xa4>)
 8001434:	f006 fa3a 	bl	80078ac <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800143e:	f001 fce7 	bl	8002e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200002f4 	.word	0x200002f4
 8001450:	40000400 	.word	0x40000400

08001454 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_TIM6_Init+0x64>)
 8001466:	4a15      	ldr	r2, [pc, #84]	; (80014bc <MX_TIM6_Init+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_TIM6_Init+0x64>)
 800146c:	220f      	movs	r2, #15
 800146e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_TIM6_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_TIM6_Init+0x64>)
 8001478:	2263      	movs	r2, #99	; 0x63
 800147a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_TIM6_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001482:	480d      	ldr	r0, [pc, #52]	; (80014b8 <MX_TIM6_Init+0x64>)
 8001484:	f005 f948 	bl	8006718 <HAL_TIM_Base_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800148e:	f001 fcbf 	bl	8002e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_TIM6_Init+0x64>)
 80014a0:	f006 fa04 	bl	80078ac <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80014aa:	f001 fcb1 	bl	8002e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000490 	.word	0x20000490
 80014bc:	40001000 	.word	0x40001000

080014c0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_TIM7_Init+0x64>)
 80014d2:	4a15      	ldr	r2, [pc, #84]	; (8001528 <MX_TIM7_Init+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_TIM7_Init+0x64>)
 80014d8:	220f      	movs	r2, #15
 80014da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_TIM7_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1999;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_TIM7_Init+0x64>)
 80014e4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_TIM7_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_TIM7_Init+0x64>)
 80014f2:	f005 f911 	bl	8006718 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80014fc:	f001 fc88 	bl	8002e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_TIM7_Init+0x64>)
 800150e:	f006 f9cd 	bl	80078ac <HAL_TIMEx_MasterConfigSynchronization>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001518:	f001 fc7a 	bl	8002e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000704 	.word	0x20000704
 8001528:	40001400 	.word	0x40001400

0800152c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b092      	sub	sp, #72	; 0x48
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	615a      	str	r2, [r3, #20]
 8001544:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	222c      	movs	r2, #44	; 0x2c
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f008 fa97 	bl	8009a80 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001552:	4b31      	ldr	r3, [pc, #196]	; (8001618 <MX_TIM16_Init+0xec>)
 8001554:	4a31      	ldr	r2, [pc, #196]	; (800161c <MX_TIM16_Init+0xf0>)
 8001556:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 199;
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <MX_TIM16_Init+0xec>)
 800155a:	22c7      	movs	r2, #199	; 0xc7
 800155c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <MX_TIM16_Init+0xec>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 799;
 8001564:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <MX_TIM16_Init+0xec>)
 8001566:	f240 321f 	movw	r2, #799	; 0x31f
 800156a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <MX_TIM16_Init+0xec>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001572:	4b29      	ldr	r3, [pc, #164]	; (8001618 <MX_TIM16_Init+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <MX_TIM16_Init+0xec>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800157e:	4826      	ldr	r0, [pc, #152]	; (8001618 <MX_TIM16_Init+0xec>)
 8001580:	f005 f8ca 	bl	8006718 <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800158a:	f001 fc41 	bl	8002e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800158e:	4822      	ldr	r0, [pc, #136]	; (8001618 <MX_TIM16_Init+0xec>)
 8001590:	f005 f976 	bl	8006880 <HAL_TIM_PWM_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800159a:	f001 fc39 	bl	8002e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159e:	2360      	movs	r3, #96	; 0x60
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a6:	2300      	movs	r3, #0
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4815      	ldr	r0, [pc, #84]	; (8001618 <MX_TIM16_Init+0xec>)
 80015c4:	f005 fcf2 	bl	8006fac <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80015ce:	f001 fc1f 	bl	8002e10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	4807      	ldr	r0, [pc, #28]	; (8001618 <MX_TIM16_Init+0xec>)
 80015fa:	f006 f9c5 	bl	8007988 <HAL_TIMEx_ConfigBreakDeadTime>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001604:	f001 fc04 	bl	8002e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM16_Init+0xec>)
 800160a:	f001 fe45 	bl	8003298 <HAL_TIM_MspPostInit>

}
 800160e:	bf00      	nop
 8001610:	3748      	adds	r7, #72	; 0x48
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200006b8 	.word	0x200006b8
 800161c:	40014400 	.word	0x40014400

08001620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001626:	4a15      	ldr	r2, [pc, #84]	; (800167c <MX_USART2_UART_Init+0x5c>)
 8001628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800162c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_USART2_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_USART2_UART_Init+0x58>)
 8001664:	f006 fa26 	bl	8007ab4 <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800166e:	f001 fbcf 	bl	8002e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200005c4 	.word	0x200005c4
 800167c:	40004400 	.word	0x40004400

08001680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <MX_DMA_Init+0x48>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <MX_DMA_Init+0x48>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6153      	str	r3, [r2, #20]
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <MX_DMA_Init+0x48>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	200b      	movs	r0, #11
 80016a4:	f003 f8df 	bl	8004866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016a8:	200b      	movs	r0, #11
 80016aa:	f003 f8f8 	bl	800489e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200c      	movs	r0, #12
 80016b4:	f003 f8d7 	bl	8004866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016b8:	200c      	movs	r0, #12
 80016ba:	f003 f8f0 	bl	800489e <HAL_NVIC_EnableIRQ>

}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000

080016cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <MX_GPIO_Init+0x98>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <MX_GPIO_Init+0x98>)
 80016e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_GPIO_Init+0x98>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_GPIO_Init+0x98>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4a19      	ldr	r2, [pc, #100]	; (8001764 <MX_GPIO_Init+0x98>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	6153      	str	r3, [r2, #20]
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_GPIO_Init+0x98>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_GPIO_Init+0x98>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4a13      	ldr	r2, [pc, #76]	; (8001764 <MX_GPIO_Init+0x98>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6153      	str	r3, [r2, #20]
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_GPIO_Init+0x98>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800172a:	2302      	movs	r3, #2
 800172c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	4619      	mov	r1, r3
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <MX_GPIO_Init+0x9c>)
 800173e:	f003 fad7 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001742:	2330      	movs	r3, #48	; 0x30
 8001744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_GPIO_Init+0xa0>)
 8001756:	f003 facb 	bl	8004cf0 <HAL_GPIO_Init>

}
 800175a:	bf00      	nop
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	48001400 	.word	0x48001400
 800176c:	48000400 	.word	0x48000400

08001770 <_write>:

/* USER CODE BEGIN 4 */

//printf
int _write(int file, char *ptr, int len) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 0xFFFF);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	b29a      	uxth	r2, r3
 8001780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <_write+0x28>)
 8001788:	f006 f9e2 	bl	8007b50 <HAL_UART_Transmit>
	return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200005c4 	.word	0x200005c4

0800179c <user_init>:

//Init
void user_init()
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	linetrace_flag = 0;
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <user_init+0xa0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	num = 0;
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <user_init+0xa4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	801a      	strh	r2, [r3, #0]
	Line_1_Max = Line_2_Max = Line_3_Max = Line_4_Max = Line_5_Max = 0;
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <user_init+0xa8>)
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <user_init+0xa8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a23      	ldr	r2, [pc, #140]	; (8001848 <user_init+0xac>)
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <user_init+0xac>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a22      	ldr	r2, [pc, #136]	; (800184c <user_init+0xb0>)
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <user_init+0xb0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a21      	ldr	r2, [pc, #132]	; (8001850 <user_init+0xb4>)
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <user_init+0xb4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a20      	ldr	r2, [pc, #128]	; (8001854 <user_init+0xb8>)
 80017d2:	6013      	str	r3, [r2, #0]
	Line_1_Min = Line_2_Min = Line_3_Min = Line_4_Min = Line_5_Min = 1000;
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <user_init+0xbc>)
 80017d6:	4a21      	ldr	r2, [pc, #132]	; (800185c <user_init+0xc0>)
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <user_init+0xbc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a20      	ldr	r2, [pc, #128]	; (8001860 <user_init+0xc4>)
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <user_init+0xc4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <user_init+0xc8>)
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <user_init+0xc8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <user_init+0xcc>)
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <user_init+0xcc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1d      	ldr	r2, [pc, #116]	; (800186c <user_init+0xd0>)
 80017f8:	6013      	str	r3, [r2, #0]
	side_r_time = side_l_time = 0;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <user_init+0xd4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <user_init+0xd4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <user_init+0xd8>)
 8001806:	6013      	str	r3, [r2, #0]
	side_r_flag = side_l_flag = 0;
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <user_init+0xdc>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <user_init+0xdc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1a      	ldr	r2, [pc, #104]	; (800187c <user_init+0xe0>)
 8001814:	6013      	str	r3, [r2, #0]
	side_r_count = 0;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <user_init+0xe4>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
	cross_flag = 0;
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <user_init+0xe8>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
	start_flag = stop_flag = 0;
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <user_init+0xec>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <user_init+0xec>)
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <user_init+0xf0>)
 800182e:	701a      	strb	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000224 	.word	0x20000224
 8001840:	20000488 	.word	0x20000488
 8001844:	200002f0 	.word	0x200002f0
 8001848:	200004dc 	.word	0x200004dc
 800184c:	20000350 	.word	0x20000350
 8001850:	200006b4 	.word	0x200006b4
 8001854:	20000220 	.word	0x20000220
 8001858:	2000055c 	.word	0x2000055c
 800185c:	447a0000 	.word	0x447a0000
 8001860:	200006b0 	.word	0x200006b0
 8001864:	200003a4 	.word	0x200003a4
 8001868:	2000023c 	.word	0x2000023c
 800186c:	20000648 	.word	0x20000648
 8001870:	20000540 	.word	0x20000540
 8001874:	20000758 	.word	0x20000758
 8001878:	200002ec 	.word	0x200002ec
 800187c:	200003a8 	.word	0x200003a8
 8001880:	2000048c 	.word	0x2000048c
 8001884:	200002e9 	.word	0x200002e9
 8001888:	200002e8 	.word	0x200002e8
 800188c:	2000075c 	.word	0x2000075c

08001890 <loop_init>:

void loop_init()
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
	side_r_time = side_l_time = 0;
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <loop_init+0x3c>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <loop_init+0x3c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <loop_init+0x40>)
 80018a0:	6013      	str	r3, [r2, #0]
	side_r_flag = side_l_flag = 0;
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <loop_init+0x44>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <loop_init+0x44>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <loop_init+0x48>)
 80018ae:	6013      	str	r3, [r2, #0]
	side_r_count = 0;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <loop_init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
	cross_flag = 0;
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <loop_init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
	stop_flag = 0;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <loop_init+0x54>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000540 	.word	0x20000540
 80018d0:	20000758 	.word	0x20000758
 80018d4:	200002ec 	.word	0x200002ec
 80018d8:	200003a8 	.word	0x200003a8
 80018dc:	2000048c 	.word	0x2000048c
 80018e0:	200002e9 	.word	0x200002e9
 80018e4:	200002e8 	.word	0x200002e8

080018e8 <start_stop>:

int start_stop()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1){
 80018ec:	2120      	movs	r1, #32
 80018ee:	483b      	ldr	r0, [pc, #236]	; (80019dc <start_stop+0xf4>)
 80018f0:	f003 fb70 	bl	8004fd4 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <start_stop+0x24>
		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 500);
 80018fa:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <start_stop+0xf8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001902:	635a      	str	r2, [r3, #52]	; 0x34
		side_r_flag = 1;
 8001904:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <start_stop+0xfc>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e009      	b.n	8001920 <start_stop+0x38>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) != 1) side_r_flag = 0;
 800190c:	2110      	movs	r1, #16
 800190e:	4833      	ldr	r0, [pc, #204]	; (80019dc <start_stop+0xf4>)
 8001910:	f003 fb60 	bl	8004fd4 <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	2b01      	cmp	r3, #1
 8001918:	d002      	beq.n	8001920 <start_stop+0x38>
 800191a:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <start_stop+0xfc>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1){
 8001920:	2110      	movs	r1, #16
 8001922:	482e      	ldr	r0, [pc, #184]	; (80019dc <start_stop+0xf4>)
 8001924:	f003 fb56 	bl	8004fd4 <HAL_GPIO_ReadPin>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d106      	bne.n	800193c <start_stop+0x54>
		side_l_flag = 1;
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <start_stop+0x100>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
		cross_flag = 0;
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <start_stop+0x104>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e009      	b.n	8001950 <start_stop+0x68>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) != 1) side_l_flag = 0;
 800193c:	2120      	movs	r1, #32
 800193e:	4827      	ldr	r0, [pc, #156]	; (80019dc <start_stop+0xf4>)
 8001940:	f003 fb48 	bl	8004fd4 <HAL_GPIO_ReadPin>
 8001944:	4603      	mov	r3, r0
 8001946:	2b01      	cmp	r3, #1
 8001948:	d002      	beq.n	8001950 <start_stop+0x68>
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <start_stop+0x100>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

	if(!side_r_flag && !side_l_flag && !cross_flag){
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <start_stop+0xfc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d11f      	bne.n	8001998 <start_stop+0xb0>
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <start_stop+0x100>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11b      	bne.n	8001998 <start_stop+0xb0>
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <start_stop+0x104>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d117      	bne.n	8001998 <start_stop+0xb0>
		if( side_r_time - side_l_time > 0 ) side_r_count += 1;
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <start_stop+0x108>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <start_stop+0x10c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	dd04      	ble.n	8001980 <start_stop+0x98>
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <start_stop+0x110>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <start_stop+0x110>)
 800197e:	6013      	str	r3, [r2, #0]
		else if( side_l_time - side_r_time >= 20);
		side_r_time = side_l_time = 0;
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <start_stop+0x10c>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <start_stop+0x10c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <start_stop+0x108>)
 800198c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <start_stop+0xf8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
 8001996:	e011      	b.n	80019bc <start_stop+0xd4>
	}
	else if(cross_flag){
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <start_stop+0x104>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00d      	beq.n	80019bc <start_stop+0xd4>
		side_r_flag = side_l_flag = 0;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <start_stop+0x100>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <start_stop+0x100>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <start_stop+0xfc>)
 80019ac:	6013      	str	r3, [r2, #0]
		side_r_time = side_l_time = 0;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <start_stop+0x10c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <start_stop+0x10c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <start_stop+0x108>)
 80019ba:	6013      	str	r3, [r2, #0]
	}

	if(side_r_count >= 2) return 2;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <start_stop+0x110>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	dd01      	ble.n	80019c8 <start_stop+0xe0>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e006      	b.n	80019d6 <start_stop+0xee>
	else if(side_r_count >= 1) return 1;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <start_stop+0x110>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dd01      	ble.n	80019d4 <start_stop+0xec>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <start_stop+0xee>
	else return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	48000400 	.word	0x48000400
 80019e0:	200006b8 	.word	0x200006b8
 80019e4:	200003a8 	.word	0x200003a8
 80019e8:	200002ec 	.word	0x200002ec
 80019ec:	200002e9 	.word	0x200002e9
 80019f0:	20000758 	.word	0x20000758
 80019f4:	20000540 	.word	0x20000540
 80019f8:	2000048c 	.word	0x2000048c

080019fc <adc_getValues>:

//ADC_Vaulues_Get
void adc_getValues()
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
	if (num >= 9) num = 0;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <adc_getValues+0x78>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d902      	bls.n	8001a0e <adc_getValues+0x12>
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <adc_getValues+0x78>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	801a      	strh	r2, [r3, #0]
	line_1_[num] = ADC2_Sensor_Value[0];
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <adc_getValues+0x78>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <adc_getValues+0x7c>)
 8001a16:	8819      	ldrh	r1, [r3, #0]
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <adc_getValues+0x80>)
 8001a1a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	line_2_[num] = ADC1_Sensor_Values[2];
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <adc_getValues+0x78>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <adc_getValues+0x84>)
 8001a26:	8899      	ldrh	r1, [r3, #4]
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <adc_getValues+0x88>)
 8001a2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	line_3_[num] = ADC1_Sensor_Values[3];
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <adc_getValues+0x78>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <adc_getValues+0x84>)
 8001a36:	88d9      	ldrh	r1, [r3, #6]
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <adc_getValues+0x8c>)
 8001a3a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	line_4_[num] = ADC1_Sensor_Values[1];
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <adc_getValues+0x78>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <adc_getValues+0x84>)
 8001a46:	8859      	ldrh	r1, [r3, #2]
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <adc_getValues+0x90>)
 8001a4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	line_5_[num] = ADC1_Sensor_Values[0];
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <adc_getValues+0x78>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <adc_getValues+0x84>)
 8001a56:	8819      	ldrh	r1, [r3, #0]
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <adc_getValues+0x94>)
 8001a5a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	num++;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <adc_getValues+0x78>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <adc_getValues+0x78>)
 8001a68:	801a      	strh	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	20000488 	.word	0x20000488
 8001a78:	20000764 	.word	0x20000764
 8001a7c:	20000548 	.word	0x20000548
 8001a80:	200003c4 	.word	0x200003c4
 8001a84:	200003b0 	.word	0x200003b0
 8001a88:	20000228 	.word	0x20000228
 8001a8c:	20000694 	.word	0x20000694
 8001a90:	20000564 	.word	0x20000564
 8001a94:	00000000 	.word	0x00000000

08001a98 <Sens_Calibration>:

//Sensor_Calibration
void Sens_Calibration()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
	if(Line_Sens_4 >= Line_4_Max) Line_4_Max = Line_Sens_4;
	if(Line_Sens_5 <= Line_5_Min) Line_5_Min = Line_Sens_5;
	if(Line_Sens_5 >= Line_5_Max) Line_5_Max = Line_Sens_5;
	*/
	double Cal_SR, Cal_SL;
	int count = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]

	while(count < 270)
 8001aa2:	e0af      	b.n	8001c04 <Sens_Calibration+0x16c>
	{
		Cal_SR = SpeedContorol_R(0.25);
 8001aa4:	ed9f 0b72 	vldr	d0, [pc, #456]	; 8001c70 <Sens_Calibration+0x1d8>
 8001aa8:	f001 f856 	bl	8002b58 <SpeedContorol_R>
 8001aac:	ed87 0b02 	vstr	d0, [r7, #8]
		Cal_SL = SpeedContorol_L(0.25);
 8001ab0:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 8001c70 <Sens_Calibration+0x1d8>
 8001ab4:	f001 f8d4 	bl	8002c60 <SpeedContorol_L>
 8001ab8:	ed87 0b00 	vstr	d0, [r7]
		motor_R(Cal_SR);
 8001abc:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ac0:	f000 ff4e 	bl	8002960 <motor_R>
		motor_L(Cal_SL);
 8001ac4:	ed97 0b00 	vldr	d0, [r7]
 8001ac8:	f000 ff90 	bl	80029ec <motor_L>

		if(Line_Sens_1 <= Line_1_Min) Line_1_Min = Line_Sens_1;
 8001acc:	4b6e      	ldr	r3, [pc, #440]	; (8001c88 <Sens_Calibration+0x1f0>)
 8001ace:	ed93 7a00 	vldr	s14, [r3]
 8001ad2:	4b6e      	ldr	r3, [pc, #440]	; (8001c8c <Sens_Calibration+0x1f4>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	d803      	bhi.n	8001aea <Sens_Calibration+0x52>
 8001ae2:	4b69      	ldr	r3, [pc, #420]	; (8001c88 <Sens_Calibration+0x1f0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a69      	ldr	r2, [pc, #420]	; (8001c8c <Sens_Calibration+0x1f4>)
 8001ae8:	6013      	str	r3, [r2, #0]
		if(Line_Sens_1 >= Line_1_Max) Line_1_Max = Line_Sens_1;
 8001aea:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <Sens_Calibration+0x1f0>)
 8001aec:	ed93 7a00 	vldr	s14, [r3]
 8001af0:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <Sens_Calibration+0x1f8>)
 8001af2:	edd3 7a00 	vldr	s15, [r3]
 8001af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	db03      	blt.n	8001b08 <Sens_Calibration+0x70>
 8001b00:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <Sens_Calibration+0x1f0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a62      	ldr	r2, [pc, #392]	; (8001c90 <Sens_Calibration+0x1f8>)
 8001b06:	6013      	str	r3, [r2, #0]
		if(Line_Sens_2 <= Line_2_Min) Line_2_Min = Line_Sens_2;
 8001b08:	4b62      	ldr	r3, [pc, #392]	; (8001c94 <Sens_Calibration+0x1fc>)
 8001b0a:	ed93 7a00 	vldr	s14, [r3]
 8001b0e:	4b62      	ldr	r3, [pc, #392]	; (8001c98 <Sens_Calibration+0x200>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1c:	d803      	bhi.n	8001b26 <Sens_Calibration+0x8e>
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <Sens_Calibration+0x1fc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <Sens_Calibration+0x200>)
 8001b24:	6013      	str	r3, [r2, #0]
		if(Line_Sens_2 >= Line_2_Max) Line_2_Max = Line_Sens_2;
 8001b26:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <Sens_Calibration+0x1fc>)
 8001b28:	ed93 7a00 	vldr	s14, [r3]
 8001b2c:	4b5b      	ldr	r3, [pc, #364]	; (8001c9c <Sens_Calibration+0x204>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	db03      	blt.n	8001b44 <Sens_Calibration+0xac>
 8001b3c:	4b55      	ldr	r3, [pc, #340]	; (8001c94 <Sens_Calibration+0x1fc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a56      	ldr	r2, [pc, #344]	; (8001c9c <Sens_Calibration+0x204>)
 8001b42:	6013      	str	r3, [r2, #0]
		if(Line_Sens_3 <= Line_3_Min) Line_3_Min = Line_Sens_3;
 8001b44:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <Sens_Calibration+0x208>)
 8001b46:	ed93 7a00 	vldr	s14, [r3]
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <Sens_Calibration+0x20c>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	d803      	bhi.n	8001b62 <Sens_Calibration+0xca>
 8001b5a:	4b51      	ldr	r3, [pc, #324]	; (8001ca0 <Sens_Calibration+0x208>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a51      	ldr	r2, [pc, #324]	; (8001ca4 <Sens_Calibration+0x20c>)
 8001b60:	6013      	str	r3, [r2, #0]
		if(Line_Sens_3 >= Line_3_Max) Line_3_Max = Line_Sens_3;
 8001b62:	4b4f      	ldr	r3, [pc, #316]	; (8001ca0 <Sens_Calibration+0x208>)
 8001b64:	ed93 7a00 	vldr	s14, [r3]
 8001b68:	4b4f      	ldr	r3, [pc, #316]	; (8001ca8 <Sens_Calibration+0x210>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b76:	db03      	blt.n	8001b80 <Sens_Calibration+0xe8>
 8001b78:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <Sens_Calibration+0x208>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ca8 <Sens_Calibration+0x210>)
 8001b7e:	6013      	str	r3, [r2, #0]
		if(Line_Sens_4 <= Line_4_Min) Line_4_Min = Line_Sens_4;
 8001b80:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <Sens_Calibration+0x214>)
 8001b82:	ed93 7a00 	vldr	s14, [r3]
 8001b86:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <Sens_Calibration+0x218>)
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d803      	bhi.n	8001b9e <Sens_Calibration+0x106>
 8001b96:	4b45      	ldr	r3, [pc, #276]	; (8001cac <Sens_Calibration+0x214>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a45      	ldr	r2, [pc, #276]	; (8001cb0 <Sens_Calibration+0x218>)
 8001b9c:	6013      	str	r3, [r2, #0]
		if(Line_Sens_4 >= Line_4_Max) Line_4_Max = Line_Sens_4;
 8001b9e:	4b43      	ldr	r3, [pc, #268]	; (8001cac <Sens_Calibration+0x214>)
 8001ba0:	ed93 7a00 	vldr	s14, [r3]
 8001ba4:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <Sens_Calibration+0x21c>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	db03      	blt.n	8001bbc <Sens_Calibration+0x124>
 8001bb4:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <Sens_Calibration+0x214>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a3e      	ldr	r2, [pc, #248]	; (8001cb4 <Sens_Calibration+0x21c>)
 8001bba:	6013      	str	r3, [r2, #0]
		if(Line_Sens_5 <= Line_5_Min) Line_5_Min = Line_Sens_5;
 8001bbc:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <Sens_Calibration+0x220>)
 8001bbe:	ed93 7a00 	vldr	s14, [r3]
 8001bc2:	4b3e      	ldr	r3, [pc, #248]	; (8001cbc <Sens_Calibration+0x224>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd0:	d803      	bhi.n	8001bda <Sens_Calibration+0x142>
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <Sens_Calibration+0x220>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a39      	ldr	r2, [pc, #228]	; (8001cbc <Sens_Calibration+0x224>)
 8001bd8:	6013      	str	r3, [r2, #0]
		if(Line_Sens_5 >= Line_5_Max) Line_5_Max = Line_Sens_5;
 8001bda:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <Sens_Calibration+0x220>)
 8001bdc:	ed93 7a00 	vldr	s14, [r3]
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <Sens_Calibration+0x228>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	db03      	blt.n	8001bf8 <Sens_Calibration+0x160>
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <Sens_Calibration+0x220>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a32      	ldr	r2, [pc, #200]	; (8001cc0 <Sens_Calibration+0x228>)
 8001bf6:	6013      	str	r3, [r2, #0]

		count++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
		HAL_Delay(1);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f001 fd80 	bl	8003704 <HAL_Delay>
	while(count < 270)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001c0a:	f6ff af4b 	blt.w	8001aa4 <Sens_Calibration+0xc>
	}
	while(1)
	{
		Cal_SR = SpeedContorol_R(0.25);
 8001c0e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001c70 <Sens_Calibration+0x1d8>
 8001c12:	f000 ffa1 	bl	8002b58 <SpeedContorol_R>
 8001c16:	ed87 0b02 	vstr	d0, [r7, #8]
		Cal_SL = SpeedContorol_L(-0.25);
 8001c1a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001c78 <Sens_Calibration+0x1e0>
 8001c1e:	f001 f81f 	bl	8002c60 <SpeedContorol_L>
 8001c22:	ed87 0b00 	vstr	d0, [r7]
		motor_R(Cal_SR);
 8001c26:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c2a:	f000 fe99 	bl	8002960 <motor_R>
		motor_L(Cal_SL);
 8001c2e:	ed97 0b00 	vldr	d0, [r7]
 8001c32:	f000 fedb 	bl	80029ec <motor_L>

		if(Line_Sens_3 > 800){
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <Sens_Calibration+0x208>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001cc4 <Sens_Calibration+0x22c>
 8001c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	dd08      	ble.n	8001c5c <Sens_Calibration+0x1c4>
			motor_R(0);
 8001c4a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8001c80 <Sens_Calibration+0x1e8>
 8001c4e:	f000 fe87 	bl	8002960 <motor_R>
			motor_L(0);
 8001c52:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001c80 <Sens_Calibration+0x1e8>
 8001c56:	f000 fec9 	bl	80029ec <motor_L>
			break;
 8001c5a:	e003      	b.n	8001c64 <Sens_Calibration+0x1cc>
		}
		HAL_Delay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f001 fd51 	bl	8003704 <HAL_Delay>
		Cal_SR = SpeedContorol_R(0.25);
 8001c62:	e7d4      	b.n	8001c0e <Sens_Calibration+0x176>
	}


}
 8001c64:	bf00      	nop
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	f3af 8000 	nop.w
 8001c70:	00000000 	.word	0x00000000
 8001c74:	3fd00000 	.word	0x3fd00000
 8001c78:	00000000 	.word	0x00000000
 8001c7c:	bfd00000 	.word	0xbfd00000
	...
 8001c88:	200003ac 	.word	0x200003ac
 8001c8c:	20000648 	.word	0x20000648
 8001c90:	20000220 	.word	0x20000220
 8001c94:	20000560 	.word	0x20000560
 8001c98:	2000023c 	.word	0x2000023c
 8001c9c:	200006b4 	.word	0x200006b4
 8001ca0:	200002dc 	.word	0x200002dc
 8001ca4:	200003a4 	.word	0x200003a4
 8001ca8:	20000350 	.word	0x20000350
 8001cac:	20000760 	.word	0x20000760
 8001cb0:	200006b0 	.word	0x200006b0
 8001cb4:	200004dc 	.word	0x200004dc
 8001cb8:	2000064c 	.word	0x2000064c
 8001cbc:	2000055c 	.word	0x2000055c
 8001cc0:	200002f0 	.word	0x200002f0
 8001cc4:	44480000 	.word	0x44480000

08001cc8 <updateValues>:

//ADC_Values_Sort
void updateValues()
{
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
	uint16_t tmp;
	for(int i = 0; i < 10; i++){
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e099      	b.n	8001e08 <updateValues+0x140>
		for(int j = i+1; j < 10; j++){
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	e08e      	b.n	8001dfa <updateValues+0x132>
			if(line_1_[i] > line_1_[j]){
 8001cdc:	4aba      	ldr	r2, [pc, #744]	; (8001fc8 <updateValues+0x300>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ce4:	49b8      	ldr	r1, [pc, #736]	; (8001fc8 <updateValues+0x300>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d911      	bls.n	8001d14 <updateValues+0x4c>
				tmp = line_1_[i];
 8001cf0:	4ab5      	ldr	r2, [pc, #724]	; (8001fc8 <updateValues+0x300>)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cf8:	807b      	strh	r3, [r7, #2]
				line_1_[i] = line_1_[j];
 8001cfa:	4ab3      	ldr	r2, [pc, #716]	; (8001fc8 <updateValues+0x300>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d02:	4ab1      	ldr	r2, [pc, #708]	; (8001fc8 <updateValues+0x300>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_1_[j] = tmp;
 8001d0a:	49af      	ldr	r1, [pc, #700]	; (8001fc8 <updateValues+0x300>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			if(line_2_[i] > line_2_[j]){
 8001d14:	4aad      	ldr	r2, [pc, #692]	; (8001fcc <updateValues+0x304>)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d1c:	49ab      	ldr	r1, [pc, #684]	; (8001fcc <updateValues+0x304>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d911      	bls.n	8001d4c <updateValues+0x84>
				tmp = line_2_[i];
 8001d28:	4aa8      	ldr	r2, [pc, #672]	; (8001fcc <updateValues+0x304>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d30:	807b      	strh	r3, [r7, #2]
				line_2_[i] = line_2_[j];
 8001d32:	4aa6      	ldr	r2, [pc, #664]	; (8001fcc <updateValues+0x304>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d3a:	4aa4      	ldr	r2, [pc, #656]	; (8001fcc <updateValues+0x304>)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_2_[j] = tmp;
 8001d42:	49a2      	ldr	r1, [pc, #648]	; (8001fcc <updateValues+0x304>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			if(line_3_[i] > line_3_[j]){
 8001d4c:	4aa0      	ldr	r2, [pc, #640]	; (8001fd0 <updateValues+0x308>)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d54:	499e      	ldr	r1, [pc, #632]	; (8001fd0 <updateValues+0x308>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d911      	bls.n	8001d84 <updateValues+0xbc>
				tmp = line_3_[i];
 8001d60:	4a9b      	ldr	r2, [pc, #620]	; (8001fd0 <updateValues+0x308>)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d68:	807b      	strh	r3, [r7, #2]
				line_3_[i] = line_3_[j];
 8001d6a:	4a99      	ldr	r2, [pc, #612]	; (8001fd0 <updateValues+0x308>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d72:	4a97      	ldr	r2, [pc, #604]	; (8001fd0 <updateValues+0x308>)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_3_[j] = tmp;
 8001d7a:	4995      	ldr	r1, [pc, #596]	; (8001fd0 <updateValues+0x308>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			if(line_4_[i] > line_4_[j]){
 8001d84:	4a93      	ldr	r2, [pc, #588]	; (8001fd4 <updateValues+0x30c>)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d8c:	4991      	ldr	r1, [pc, #580]	; (8001fd4 <updateValues+0x30c>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d911      	bls.n	8001dbc <updateValues+0xf4>
				tmp = line_4_[i];
 8001d98:	4a8e      	ldr	r2, [pc, #568]	; (8001fd4 <updateValues+0x30c>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001da0:	807b      	strh	r3, [r7, #2]
				line_4_[i] = line_4_[j];
 8001da2:	4a8c      	ldr	r2, [pc, #560]	; (8001fd4 <updateValues+0x30c>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001daa:	4a8a      	ldr	r2, [pc, #552]	; (8001fd4 <updateValues+0x30c>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_4_[j] = tmp;
 8001db2:	4988      	ldr	r1, [pc, #544]	; (8001fd4 <updateValues+0x30c>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			if(line_5_[i] > line_5_[j]){
 8001dbc:	4a86      	ldr	r2, [pc, #536]	; (8001fd8 <updateValues+0x310>)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001dc4:	4984      	ldr	r1, [pc, #528]	; (8001fd8 <updateValues+0x310>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d911      	bls.n	8001df4 <updateValues+0x12c>
				tmp = line_5_[i];
 8001dd0:	4a81      	ldr	r2, [pc, #516]	; (8001fd8 <updateValues+0x310>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dd8:	807b      	strh	r3, [r7, #2]
				line_5_[i] = line_5_[j];
 8001dda:	4a7f      	ldr	r2, [pc, #508]	; (8001fd8 <updateValues+0x310>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001de2:	4a7d      	ldr	r2, [pc, #500]	; (8001fd8 <updateValues+0x310>)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_5_[j] = tmp;
 8001dea:	497b      	ldr	r1, [pc, #492]	; (8001fd8 <updateValues+0x310>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = i+1; j < 10; j++){
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	3301      	adds	r3, #1
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	f77f af6d 	ble.w	8001cdc <updateValues+0x14>
	for(int i = 0; i < 10; i++){
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	f77f af62 	ble.w	8001cd4 <updateValues+0xc>
			}
		}
	}
	Line_Sens_1 = (line_1_[4] + line_1_[5]) / 2;
 8001e10:	4b6d      	ldr	r3, [pc, #436]	; (8001fc8 <updateValues+0x300>)
 8001e12:	891b      	ldrh	r3, [r3, #8]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b6c      	ldr	r3, [pc, #432]	; (8001fc8 <updateValues+0x300>)
 8001e18:	895b      	ldrh	r3, [r3, #10]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	0fda      	lsrs	r2, r3, #31
 8001e1e:	4413      	add	r3, r2
 8001e20:	105b      	asrs	r3, r3, #1
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2a:	4b6c      	ldr	r3, [pc, #432]	; (8001fdc <updateValues+0x314>)
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
	Line_Sens_2 = (line_2_[4] + line_2_[5]) / 2;
 8001e30:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <updateValues+0x304>)
 8001e32:	891b      	ldrh	r3, [r3, #8]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <updateValues+0x304>)
 8001e38:	895b      	ldrh	r3, [r3, #10]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	0fda      	lsrs	r2, r3, #31
 8001e3e:	4413      	add	r3, r2
 8001e40:	105b      	asrs	r3, r3, #1
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4a:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <updateValues+0x318>)
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
	Line_Sens_3 = (line_3_[4] + line_3_[5]) / 2;
 8001e50:	4b5f      	ldr	r3, [pc, #380]	; (8001fd0 <updateValues+0x308>)
 8001e52:	891b      	ldrh	r3, [r3, #8]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b5e      	ldr	r3, [pc, #376]	; (8001fd0 <updateValues+0x308>)
 8001e58:	895b      	ldrh	r3, [r3, #10]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	0fda      	lsrs	r2, r3, #31
 8001e5e:	4413      	add	r3, r2
 8001e60:	105b      	asrs	r3, r3, #1
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	4b5e      	ldr	r3, [pc, #376]	; (8001fe4 <updateValues+0x31c>)
 8001e6c:	edc3 7a00 	vstr	s15, [r3]
	Line_Sens_4 = (line_4_[4] + line_4_[5]) / 2;
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <updateValues+0x30c>)
 8001e72:	891b      	ldrh	r3, [r3, #8]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <updateValues+0x30c>)
 8001e78:	895b      	ldrh	r3, [r3, #10]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	0fda      	lsrs	r2, r3, #31
 8001e7e:	4413      	add	r3, r2
 8001e80:	105b      	asrs	r3, r3, #1
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e8a:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <updateValues+0x320>)
 8001e8c:	edc3 7a00 	vstr	s15, [r3]
	Line_Sens_5 = (line_5_[4] + line_5_[5]) / 2;
 8001e90:	4b51      	ldr	r3, [pc, #324]	; (8001fd8 <updateValues+0x310>)
 8001e92:	891b      	ldrh	r3, [r3, #8]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <updateValues+0x310>)
 8001e98:	895b      	ldrh	r3, [r3, #10]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	0fda      	lsrs	r2, r3, #31
 8001e9e:	4413      	add	r3, r2
 8001ea0:	105b      	asrs	r3, r3, #1
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eaa:	4b50      	ldr	r3, [pc, #320]	; (8001fec <updateValues+0x324>)
 8001eac:	edc3 7a00 	vstr	s15, [r3]

	Line_Sort_[0][1] = ((Line_Sens_1 - (double)Line_1_Min) / (double)(Line_1_Max - Line_1_Min)) * 1000;
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <updateValues+0x314>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fb47 	bl	8000548 <__aeabi_f2d>
 8001eba:	4604      	mov	r4, r0
 8001ebc:	460d      	mov	r5, r1
 8001ebe:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <updateValues+0x328>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fb40 	bl	8000548 <__aeabi_f2d>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4620      	mov	r0, r4
 8001ece:	4629      	mov	r1, r5
 8001ed0:	f7fe f9da 	bl	8000288 <__aeabi_dsub>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	460c      	mov	r4, r1
 8001ed8:	4625      	mov	r5, r4
 8001eda:	461c      	mov	r4, r3
 8001edc:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <updateValues+0x32c>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <updateValues+0x328>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eec:	ee17 0a90 	vmov	r0, s15
 8001ef0:	f7fe fb2a 	bl	8000548 <__aeabi_f2d>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4620      	mov	r0, r4
 8001efa:	4629      	mov	r1, r5
 8001efc:	f7fe fca6 	bl	800084c <__aeabi_ddiv>
 8001f00:	4603      	mov	r3, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	4618      	mov	r0, r3
 8001f06:	4621      	mov	r1, r4
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <updateValues+0x330>)
 8001f0e:	f7fe fb73 	bl	80005f8 <__aeabi_dmul>
 8001f12:	4603      	mov	r3, r0
 8001f14:	460c      	mov	r4, r1
 8001f16:	4618      	mov	r0, r3
 8001f18:	4621      	mov	r1, r4
 8001f1a:	f7fe fe65 	bl	8000be8 <__aeabi_d2f>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <updateValues+0x334>)
 8001f22:	605a      	str	r2, [r3, #4]
	Line_Sort_[1][1] = ((Line_Sens_2 - (double)Line_2_Min) / (double)(Line_2_Max - Line_2_Min)) * 1000;
 8001f24:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <updateValues+0x318>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb0d 	bl	8000548 <__aeabi_f2d>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	460d      	mov	r5, r1
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <updateValues+0x338>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb06 	bl	8000548 <__aeabi_f2d>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f9a0 	bl	8000288 <__aeabi_dsub>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4625      	mov	r5, r4
 8001f4e:	461c      	mov	r4, r3
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <updateValues+0x33c>)
 8001f52:	ed93 7a00 	vldr	s14, [r3]
 8001f56:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <updateValues+0x338>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f60:	ee17 0a90 	vmov	r0, s15
 8001f64:	f7fe faf0 	bl	8000548 <__aeabi_f2d>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe fc6c 	bl	800084c <__aeabi_ddiv>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <updateValues+0x330>)
 8001f82:	f7fe fb39 	bl	80005f8 <__aeabi_dmul>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	f7fe fe2b 	bl	8000be8 <__aeabi_d2f>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <updateValues+0x334>)
 8001f96:	619a      	str	r2, [r3, #24]
	Line_Sort_[2][1] = ((Line_Sens_3 - (double)Line_3_Min) / (double)(Line_3_Max - Line_3_Min)) * 1000;
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <updateValues+0x31c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fad3 	bl	8000548 <__aeabi_f2d>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	460d      	mov	r5, r1
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <updateValues+0x340>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe facc 	bl	8000548 <__aeabi_f2d>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	f7fe f966 	bl	8000288 <__aeabi_dsub>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	4625      	mov	r5, r4
 8001fc2:	461c      	mov	r4, r3
 8001fc4:	e022      	b.n	800200c <updateValues+0x344>
 8001fc6:	bf00      	nop
 8001fc8:	20000548 	.word	0x20000548
 8001fcc:	200003b0 	.word	0x200003b0
 8001fd0:	20000228 	.word	0x20000228
 8001fd4:	20000694 	.word	0x20000694
 8001fd8:	20000564 	.word	0x20000564
 8001fdc:	200003ac 	.word	0x200003ac
 8001fe0:	20000560 	.word	0x20000560
 8001fe4:	200002dc 	.word	0x200002dc
 8001fe8:	20000760 	.word	0x20000760
 8001fec:	2000064c 	.word	0x2000064c
 8001ff0:	20000648 	.word	0x20000648
 8001ff4:	20000220 	.word	0x20000220
 8001ff8:	408f4000 	.word	0x408f4000
 8001ffc:	20000424 	.word	0x20000424
 8002000:	2000023c 	.word	0x2000023c
 8002004:	200006b4 	.word	0x200006b4
 8002008:	200003a4 	.word	0x200003a4
 800200c:	4b9f      	ldr	r3, [pc, #636]	; (800228c <updateValues+0x5c4>)
 800200e:	ed93 7a00 	vldr	s14, [r3]
 8002012:	4b9f      	ldr	r3, [pc, #636]	; (8002290 <updateValues+0x5c8>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201c:	ee17 0a90 	vmov	r0, s15
 8002020:	f7fe fa92 	bl	8000548 <__aeabi_f2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	f7fe fc0e 	bl	800084c <__aeabi_ddiv>
 8002030:	4603      	mov	r3, r0
 8002032:	460c      	mov	r4, r1
 8002034:	4618      	mov	r0, r3
 8002036:	4621      	mov	r1, r4
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	4b95      	ldr	r3, [pc, #596]	; (8002294 <updateValues+0x5cc>)
 800203e:	f7fe fadb 	bl	80005f8 <__aeabi_dmul>
 8002042:	4603      	mov	r3, r0
 8002044:	460c      	mov	r4, r1
 8002046:	4618      	mov	r0, r3
 8002048:	4621      	mov	r1, r4
 800204a:	f7fe fdcd 	bl	8000be8 <__aeabi_d2f>
 800204e:	4602      	mov	r2, r0
 8002050:	4b91      	ldr	r3, [pc, #580]	; (8002298 <updateValues+0x5d0>)
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
	Line_Sort_[3][1] = ((Line_Sens_4 - (double)Line_4_Min) / (double)(Line_4_Max - Line_4_Min)) * 1000;
 8002054:	4b91      	ldr	r3, [pc, #580]	; (800229c <updateValues+0x5d4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa75 	bl	8000548 <__aeabi_f2d>
 800205e:	4604      	mov	r4, r0
 8002060:	460d      	mov	r5, r1
 8002062:	4b8f      	ldr	r3, [pc, #572]	; (80022a0 <updateValues+0x5d8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa6e 	bl	8000548 <__aeabi_f2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f908 	bl	8000288 <__aeabi_dsub>
 8002078:	4603      	mov	r3, r0
 800207a:	460c      	mov	r4, r1
 800207c:	4625      	mov	r5, r4
 800207e:	461c      	mov	r4, r3
 8002080:	4b88      	ldr	r3, [pc, #544]	; (80022a4 <updateValues+0x5dc>)
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	4b86      	ldr	r3, [pc, #536]	; (80022a0 <updateValues+0x5d8>)
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002090:	ee17 0a90 	vmov	r0, s15
 8002094:	f7fe fa58 	bl	8000548 <__aeabi_f2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe fbd4 	bl	800084c <__aeabi_ddiv>
 80020a4:	4603      	mov	r3, r0
 80020a6:	460c      	mov	r4, r1
 80020a8:	4618      	mov	r0, r3
 80020aa:	4621      	mov	r1, r4
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	4b78      	ldr	r3, [pc, #480]	; (8002294 <updateValues+0x5cc>)
 80020b2:	f7fe faa1 	bl	80005f8 <__aeabi_dmul>
 80020b6:	4603      	mov	r3, r0
 80020b8:	460c      	mov	r4, r1
 80020ba:	4618      	mov	r0, r3
 80020bc:	4621      	mov	r1, r4
 80020be:	f7fe fd93 	bl	8000be8 <__aeabi_d2f>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b74      	ldr	r3, [pc, #464]	; (8002298 <updateValues+0x5d0>)
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
	Line_Sort_[4][1] = ((Line_Sens_5 - (double)Line_5_Min) / (double)(Line_5_Max - Line_5_Min)) * 1000;
 80020c8:	4b77      	ldr	r3, [pc, #476]	; (80022a8 <updateValues+0x5e0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fa3b 	bl	8000548 <__aeabi_f2d>
 80020d2:	4604      	mov	r4, r0
 80020d4:	460d      	mov	r5, r1
 80020d6:	4b75      	ldr	r3, [pc, #468]	; (80022ac <updateValues+0x5e4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fa34 	bl	8000548 <__aeabi_f2d>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4620      	mov	r0, r4
 80020e6:	4629      	mov	r1, r5
 80020e8:	f7fe f8ce 	bl	8000288 <__aeabi_dsub>
 80020ec:	4603      	mov	r3, r0
 80020ee:	460c      	mov	r4, r1
 80020f0:	4625      	mov	r5, r4
 80020f2:	461c      	mov	r4, r3
 80020f4:	4b6e      	ldr	r3, [pc, #440]	; (80022b0 <updateValues+0x5e8>)
 80020f6:	ed93 7a00 	vldr	s14, [r3]
 80020fa:	4b6c      	ldr	r3, [pc, #432]	; (80022ac <updateValues+0x5e4>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002104:	ee17 0a90 	vmov	r0, s15
 8002108:	f7fe fa1e 	bl	8000548 <__aeabi_f2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4620      	mov	r0, r4
 8002112:	4629      	mov	r1, r5
 8002114:	f7fe fb9a 	bl	800084c <__aeabi_ddiv>
 8002118:	4603      	mov	r3, r0
 800211a:	460c      	mov	r4, r1
 800211c:	4618      	mov	r0, r3
 800211e:	4621      	mov	r1, r4
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <updateValues+0x5cc>)
 8002126:	f7fe fa67 	bl	80005f8 <__aeabi_dmul>
 800212a:	4603      	mov	r3, r0
 800212c:	460c      	mov	r4, r1
 800212e:	4618      	mov	r0, r3
 8002130:	4621      	mov	r1, r4
 8002132:	f7fe fd59 	bl	8000be8 <__aeabi_d2f>
 8002136:	4602      	mov	r2, r0
 8002138:	4b57      	ldr	r3, [pc, #348]	; (8002298 <updateValues+0x5d0>)
 800213a:	655a      	str	r2, [r3, #84]	; 0x54

	for(int i = 0; i < 5; i++){
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e01e      	b.n	8002180 <updateValues+0x4b8>
		Line_Sort_[i][0] = i;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214c:	4952      	ldr	r1, [pc, #328]	; (8002298 <updateValues+0x5d0>)
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	edc3 7a00 	vstr	s15, [r3]
		Line_Calib_[i] = Line_Sort_[i][1];
 800215e:	494e      	ldr	r1, [pc, #312]	; (8002298 <updateValues+0x5d0>)
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3304      	adds	r3, #4
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4950      	ldr	r1, [pc, #320]	; (80022b4 <updateValues+0x5ec>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 5; i++){
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b04      	cmp	r3, #4
 8002184:	dddd      	ble.n	8002142 <updateValues+0x47a>
	}
	int tmp_1;
	float tmp_2;
	for (int i = 0; i < 5; i++) {
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e077      	b.n	800227c <updateValues+0x5b4>
		for (int j = i+1; j < 5; j++) {
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e06d      	b.n	8002270 <updateValues+0x5a8>
			if (Line_Sort_[i][1] > Line_Sort_[j][1]) {
 8002194:	4940      	ldr	r1, [pc, #256]	; (8002298 <updateValues+0x5d0>)
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	3304      	adds	r3, #4
 80021a4:	ed93 7a00 	vldr	s14, [r3]
 80021a8:	493b      	ldr	r1, [pc, #236]	; (8002298 <updateValues+0x5d0>)
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	3304      	adds	r3, #4
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	dd51      	ble.n	800226a <updateValues+0x5a2>
				tmp_1 = Line_Sort_[i][0];
 80021c6:	4934      	ldr	r1, [pc, #208]	; (8002298 <updateValues+0x5d0>)
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021dc:	ee17 3a90 	vmov	r3, s15
 80021e0:	60bb      	str	r3, [r7, #8]
				tmp_2 = Line_Sort_[i][1];
 80021e2:	492d      	ldr	r1, [pc, #180]	; (8002298 <updateValues+0x5d0>)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3304      	adds	r3, #4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	607b      	str	r3, [r7, #4]
				Line_Sort_[i][0] = Line_Sort_[j][0];
 80021f6:	4928      	ldr	r1, [pc, #160]	; (8002298 <updateValues+0x5d0>)
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	4824      	ldr	r0, [pc, #144]	; (8002298 <updateValues+0x5d0>)
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4403      	add	r3, r0
 8002214:	6019      	str	r1, [r3, #0]
				Line_Sort_[i][1] = Line_Sort_[j][1];
 8002216:	4920      	ldr	r1, [pc, #128]	; (8002298 <updateValues+0x5d0>)
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	3304      	adds	r3, #4
 8002226:	6819      	ldr	r1, [r3, #0]
 8002228:	481b      	ldr	r0, [pc, #108]	; (8002298 <updateValues+0x5d0>)
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4403      	add	r3, r0
 8002236:	3304      	adds	r3, #4
 8002238:	6019      	str	r1, [r3, #0]
				Line_Sort_[j][0] = tmp_1;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	ee07 3a90 	vmov	s15, r3
 8002240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002244:	4914      	ldr	r1, [pc, #80]	; (8002298 <updateValues+0x5d0>)
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	edc3 7a00 	vstr	s15, [r3]
				Line_Sort_[j][1] = tmp_2;
 8002256:	4910      	ldr	r1, [pc, #64]	; (8002298 <updateValues+0x5d0>)
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	3304      	adds	r3, #4
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	601a      	str	r2, [r3, #0]
		for (int j = i+1; j < 5; j++) {
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3301      	adds	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b04      	cmp	r3, #4
 8002274:	dd8e      	ble.n	8002194 <updateValues+0x4cc>
	for (int i = 0; i < 5; i++) {
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	3301      	adds	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b04      	cmp	r3, #4
 8002280:	dd84      	ble.n	800218c <updateValues+0x4c4>
		}
	}



}
 8002282:	bf00      	nop
 8002284:	3720      	adds	r7, #32
 8002286:	46bd      	mov	sp, r7
 8002288:	bdb0      	pop	{r4, r5, r7, pc}
 800228a:	bf00      	nop
 800228c:	20000350 	.word	0x20000350
 8002290:	200003a4 	.word	0x200003a4
 8002294:	408f4000 	.word	0x408f4000
 8002298:	20000424 	.word	0x20000424
 800229c:	20000760 	.word	0x20000760
 80022a0:	200006b0 	.word	0x200006b0
 80022a4:	200004dc 	.word	0x200004dc
 80022a8:	2000064c 	.word	0x2000064c
 80022ac:	2000055c 	.word	0x2000055c
 80022b0:	200002f0 	.word	0x200002f0
 80022b4:	2000052c 	.word	0x2000052c

080022b8 <degree>:

//degree
double degree()
{
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
	double ratio;
	int sort_1, sort_2;

	sort_1 = Line_Sort_[4][0];
 80022be:	4bad      	ldr	r3, [pc, #692]	; (8002574 <degree+0x2bc>)
 80022c0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80022c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c8:	ee17 3a90 	vmov	r3, s15
 80022cc:	60bb      	str	r3, [r7, #8]

	switch(sort_1){
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d86a      	bhi.n	80023aa <degree+0xf2>
 80022d4:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <degree+0x24>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	080022f1 	.word	0x080022f1
 80022e0:	080022f7 	.word	0x080022f7
 80022e4:	08002331 	.word	0x08002331
 80022e8:	0800236b 	.word	0x0800236b
 80022ec:	080023a5 	.word	0x080023a5
	case 0:
		sort_2 = 1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
		break;
 80022f4:	e059      	b.n	80023aa <degree+0xf2>
	case 1:
		if(Line_Calib_[0] >= Line_Calib_[2]) sort_2 = 0;
 80022f6:	4ba0      	ldr	r3, [pc, #640]	; (8002578 <degree+0x2c0>)
 80022f8:	ed93 7a00 	vldr	s14, [r3]
 80022fc:	4b9e      	ldr	r3, [pc, #632]	; (8002578 <degree+0x2c0>)
 80022fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230a:	db02      	blt.n	8002312 <degree+0x5a>
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
		else if(Line_Calib_[0] < Line_Calib_[2]) sort_2 = 2;
		break;
 8002310:	e04b      	b.n	80023aa <degree+0xf2>
		else if(Line_Calib_[0] < Line_Calib_[2]) sort_2 = 2;
 8002312:	4b99      	ldr	r3, [pc, #612]	; (8002578 <degree+0x2c0>)
 8002314:	ed93 7a00 	vldr	s14, [r3]
 8002318:	4b97      	ldr	r3, [pc, #604]	; (8002578 <degree+0x2c0>)
 800231a:	edd3 7a02 	vldr	s15, [r3, #8]
 800231e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	d400      	bmi.n	800232a <degree+0x72>
		break;
 8002328:	e03f      	b.n	80023aa <degree+0xf2>
		else if(Line_Calib_[0] < Line_Calib_[2]) sort_2 = 2;
 800232a:	2302      	movs	r3, #2
 800232c:	60fb      	str	r3, [r7, #12]
		break;
 800232e:	e03c      	b.n	80023aa <degree+0xf2>
	case 2:
		if(Line_Calib_[1] >= Line_Calib_[3]) sort_2 = 1;
 8002330:	4b91      	ldr	r3, [pc, #580]	; (8002578 <degree+0x2c0>)
 8002332:	ed93 7a01 	vldr	s14, [r3, #4]
 8002336:	4b90      	ldr	r3, [pc, #576]	; (8002578 <degree+0x2c0>)
 8002338:	edd3 7a03 	vldr	s15, [r3, #12]
 800233c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002344:	db02      	blt.n	800234c <degree+0x94>
 8002346:	2301      	movs	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
		else if(Line_Calib_[1] < Line_Calib_[3]) sort_2 = 3;
		break;
 800234a:	e02e      	b.n	80023aa <degree+0xf2>
		else if(Line_Calib_[1] < Line_Calib_[3]) sort_2 = 3;
 800234c:	4b8a      	ldr	r3, [pc, #552]	; (8002578 <degree+0x2c0>)
 800234e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002352:	4b89      	ldr	r3, [pc, #548]	; (8002578 <degree+0x2c0>)
 8002354:	edd3 7a03 	vldr	s15, [r3, #12]
 8002358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	d400      	bmi.n	8002364 <degree+0xac>
		break;
 8002362:	e022      	b.n	80023aa <degree+0xf2>
		else if(Line_Calib_[1] < Line_Calib_[3]) sort_2 = 3;
 8002364:	2303      	movs	r3, #3
 8002366:	60fb      	str	r3, [r7, #12]
		break;
 8002368:	e01f      	b.n	80023aa <degree+0xf2>
	case 3:
		if(Line_Calib_[2] >= Line_Calib_[4]) sort_2 = 2;
 800236a:	4b83      	ldr	r3, [pc, #524]	; (8002578 <degree+0x2c0>)
 800236c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002370:	4b81      	ldr	r3, [pc, #516]	; (8002578 <degree+0x2c0>)
 8002372:	edd3 7a04 	vldr	s15, [r3, #16]
 8002376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	db02      	blt.n	8002386 <degree+0xce>
 8002380:	2302      	movs	r3, #2
 8002382:	60fb      	str	r3, [r7, #12]
		else if(Line_Calib_[2] < Line_Calib_[4]) sort_2 = 4;
		break;
 8002384:	e011      	b.n	80023aa <degree+0xf2>
		else if(Line_Calib_[2] < Line_Calib_[4]) sort_2 = 4;
 8002386:	4b7c      	ldr	r3, [pc, #496]	; (8002578 <degree+0x2c0>)
 8002388:	ed93 7a02 	vldr	s14, [r3, #8]
 800238c:	4b7a      	ldr	r3, [pc, #488]	; (8002578 <degree+0x2c0>)
 800238e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239a:	d400      	bmi.n	800239e <degree+0xe6>
		break;
 800239c:	e005      	b.n	80023aa <degree+0xf2>
		else if(Line_Calib_[2] < Line_Calib_[4]) sort_2 = 4;
 800239e:	2304      	movs	r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]
		break;
 80023a2:	e002      	b.n	80023aa <degree+0xf2>
	case 4:
		sort_2 = 3;
 80023a4:	2303      	movs	r3, #3
 80023a6:	60fb      	str	r3, [r7, #12]
		break;
 80023a8:	bf00      	nop
	}

	if(Line_Calib_[1] > 100 && Line_Calib_[2] > 100 && Line_Calib_[3] > 100){
 80023aa:	4b73      	ldr	r3, [pc, #460]	; (8002578 <degree+0x2c0>)
 80023ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80023b0:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800257c <degree+0x2c4>
 80023b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	dd1b      	ble.n	80023f6 <degree+0x13e>
 80023be:	4b6e      	ldr	r3, [pc, #440]	; (8002578 <degree+0x2c0>)
 80023c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80023c4:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800257c <degree+0x2c4>
 80023c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	dd11      	ble.n	80023f6 <degree+0x13e>
 80023d2:	4b69      	ldr	r3, [pc, #420]	; (8002578 <degree+0x2c0>)
 80023d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80023d8:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800257c <degree+0x2c4>
 80023dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	dd07      	ble.n	80023f6 <degree+0x13e>
		cross_flag = 1;
 80023e6:	4b66      	ldr	r3, [pc, #408]	; (8002580 <degree+0x2c8>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
		return 0;
 80023ec:	f04f 0400 	mov.w	r4, #0
 80023f0:	f04f 0500 	mov.w	r5, #0
 80023f4:	e190      	b.n	8002718 <degree+0x460>
	}

	//0-1
	if(sort_1 == 1 && sort_2 == 0){
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d130      	bne.n	800245e <degree+0x1a6>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d12d      	bne.n	800245e <degree+0x1a6>
		ratio = 30 * (Line_Calib_[sort_2] / (Line_Calib_[sort_1] + Line_Calib_[sort_2]));
 8002402:	4a5d      	ldr	r2, [pc, #372]	; (8002578 <degree+0x2c0>)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	edd3 6a00 	vldr	s13, [r3]
 800240e:	4a5a      	ldr	r2, [pc, #360]	; (8002578 <degree+0x2c0>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	ed93 7a00 	vldr	s14, [r3]
 800241a:	4a57      	ldr	r2, [pc, #348]	; (8002578 <degree+0x2c0>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002436:	ee17 0a90 	vmov	r0, s15
 800243a:	f7fe f885 	bl	8000548 <__aeabi_f2d>
 800243e:	4603      	mov	r3, r0
 8002440:	460c      	mov	r4, r1
 8002442:	e9c7 3400 	strd	r3, r4, [r7]
		return 30+ratio;
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <degree+0x2cc>)
 800244c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002450:	f7fd ff1c 	bl	800028c <__adddf3>
 8002454:	4603      	mov	r3, r0
 8002456:	460c      	mov	r4, r1
 8002458:	4625      	mov	r5, r4
 800245a:	461c      	mov	r4, r3
 800245c:	e15c      	b.n	8002718 <degree+0x460>
	}
	if(sort_1 == 0 && sort_2 == 1){
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d130      	bne.n	80024c6 <degree+0x20e>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d12d      	bne.n	80024c6 <degree+0x20e>
		ratio = 30 * (Line_Calib_[sort_1] / (Line_Calib_[sort_2] + Line_Calib_[sort_1]));
 800246a:	4a43      	ldr	r2, [pc, #268]	; (8002578 <degree+0x2c0>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	edd3 6a00 	vldr	s13, [r3]
 8002476:	4a40      	ldr	r2, [pc, #256]	; (8002578 <degree+0x2c0>)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	4a3d      	ldr	r2, [pc, #244]	; (8002578 <degree+0x2c0>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002496:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800249a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249e:	ee17 0a90 	vmov	r0, s15
 80024a2:	f7fe f851 	bl	8000548 <__aeabi_f2d>
 80024a6:	4603      	mov	r3, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	e9c7 3400 	strd	r3, r4, [r7]
		return 30+ratio;
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <degree+0x2cc>)
 80024b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024b8:	f7fd fee8 	bl	800028c <__adddf3>
 80024bc:	4603      	mov	r3, r0
 80024be:	460c      	mov	r4, r1
 80024c0:	4625      	mov	r5, r4
 80024c2:	461c      	mov	r4, r3
 80024c4:	e128      	b.n	8002718 <degree+0x460>
	}
	//1-2
	if(sort_1 == 2 && sort_2 == 1){
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d127      	bne.n	800251c <degree+0x264>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d124      	bne.n	800251c <degree+0x264>
		ratio = 30 * (Line_Calib_[sort_2] / (Line_Calib_[sort_1] + Line_Calib_[sort_2]));
 80024d2:	4a29      	ldr	r2, [pc, #164]	; (8002578 <degree+0x2c0>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	edd3 6a00 	vldr	s13, [r3]
 80024de:	4a26      	ldr	r2, [pc, #152]	; (8002578 <degree+0x2c0>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	ed93 7a00 	vldr	s14, [r3]
 80024ea:	4a23      	ldr	r2, [pc, #140]	; (8002578 <degree+0x2c0>)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fe:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002506:	ee17 0a90 	vmov	r0, s15
 800250a:	f7fe f81d 	bl	8000548 <__aeabi_f2d>
 800250e:	4603      	mov	r3, r0
 8002510:	460c      	mov	r4, r1
 8002512:	e9c7 3400 	strd	r3, r4, [r7]
		return ratio;
 8002516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800251a:	e0fd      	b.n	8002718 <degree+0x460>
	}
	if(sort_1 == 1 && sort_2 == 2){
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d132      	bne.n	8002588 <degree+0x2d0>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d12f      	bne.n	8002588 <degree+0x2d0>
		ratio = 30 * (Line_Calib_[sort_1] / (Line_Calib_[sort_2] + Line_Calib_[sort_1]));
 8002528:	4a13      	ldr	r2, [pc, #76]	; (8002578 <degree+0x2c0>)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	edd3 6a00 	vldr	s13, [r3]
 8002534:	4a10      	ldr	r2, [pc, #64]	; (8002578 <degree+0x2c0>)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <degree+0x2c0>)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002554:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255c:	ee17 0a90 	vmov	r0, s15
 8002560:	f7fd fff2 	bl	8000548 <__aeabi_f2d>
 8002564:	4603      	mov	r3, r0
 8002566:	460c      	mov	r4, r1
 8002568:	e9c7 3400 	strd	r3, r4, [r7]
		return ratio;
 800256c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002570:	e0d2      	b.n	8002718 <degree+0x460>
 8002572:	bf00      	nop
 8002574:	20000424 	.word	0x20000424
 8002578:	2000052c 	.word	0x2000052c
 800257c:	42c80000 	.word	0x42c80000
 8002580:	200002e9 	.word	0x200002e9
 8002584:	403e0000 	.word	0x403e0000
	}
	//2-3
	if(sort_1 == 2 && sort_2 == 3){
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d129      	bne.n	80025e2 <degree+0x32a>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d126      	bne.n	80025e2 <degree+0x32a>
		ratio = 30 * (Line_Calib_[sort_2] / (Line_Calib_[sort_1] + Line_Calib_[sort_2]));
 8002594:	4a65      	ldr	r2, [pc, #404]	; (800272c <degree+0x474>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	edd3 6a00 	vldr	s13, [r3]
 80025a0:	4a62      	ldr	r2, [pc, #392]	; (800272c <degree+0x474>)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	ed93 7a00 	vldr	s14, [r3]
 80025ac:	4a5f      	ldr	r2, [pc, #380]	; (800272c <degree+0x474>)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025c0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80025c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c8:	ee17 0a90 	vmov	r0, s15
 80025cc:	f7fd ffbc 	bl	8000548 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	e9c7 2300 	strd	r2, r3, [r7]
		return -ratio;
 80025d8:	683c      	ldr	r4, [r7, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80025e0:	e09a      	b.n	8002718 <degree+0x460>
	}
	if(sort_1 == 3 && sort_2 == 2){
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d129      	bne.n	800263c <degree+0x384>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d126      	bne.n	800263c <degree+0x384>
		ratio = 30 * (Line_Calib_[sort_1] / (Line_Calib_[sort_2] + Line_Calib_[sort_1]));
 80025ee:	4a4f      	ldr	r2, [pc, #316]	; (800272c <degree+0x474>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	edd3 6a00 	vldr	s13, [r3]
 80025fa:	4a4c      	ldr	r2, [pc, #304]	; (800272c <degree+0x474>)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	ed93 7a00 	vldr	s14, [r3]
 8002606:	4a49      	ldr	r2, [pc, #292]	; (800272c <degree+0x474>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800261e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002622:	ee17 0a90 	vmov	r0, s15
 8002626:	f7fd ff8f 	bl	8000548 <__aeabi_f2d>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	e9c7 2300 	strd	r2, r3, [r7]
		return -ratio;
 8002632:	683c      	ldr	r4, [r7, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800263a:	e06d      	b.n	8002718 <degree+0x460>
	}
	//3-4
	if(sort_1 == 3 && sort_2 == 4){
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d131      	bne.n	80026a6 <degree+0x3ee>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b04      	cmp	r3, #4
 8002646:	d12e      	bne.n	80026a6 <degree+0x3ee>
		ratio = 30 * (Line_Calib_[sort_2] / (Line_Calib_[sort_1] + Line_Calib_[sort_2]));
 8002648:	4a38      	ldr	r2, [pc, #224]	; (800272c <degree+0x474>)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	edd3 6a00 	vldr	s13, [r3]
 8002654:	4a35      	ldr	r2, [pc, #212]	; (800272c <degree+0x474>)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	ed93 7a00 	vldr	s14, [r3]
 8002660:	4a32      	ldr	r2, [pc, #200]	; (800272c <degree+0x474>)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002674:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267c:	ee17 0a90 	vmov	r0, s15
 8002680:	f7fd ff62 	bl	8000548 <__aeabi_f2d>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	e9c7 2300 	strd	r2, r3, [r7]
		return -(30+ratio);
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <degree+0x478>)
 8002692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002696:	f7fd fdf9 	bl	800028c <__adddf3>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4614      	mov	r4, r2
 80026a0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80026a4:	e038      	b.n	8002718 <degree+0x460>
	}
	if(sort_1 == 4 && sort_2 == 3){
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d131      	bne.n	8002710 <degree+0x458>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d12e      	bne.n	8002710 <degree+0x458>
		ratio = 30 * (Line_Calib_[sort_1] / (Line_Calib_[sort_2] + Line_Calib_[sort_1]));
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <degree+0x474>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	edd3 6a00 	vldr	s13, [r3]
 80026be:	4a1b      	ldr	r2, [pc, #108]	; (800272c <degree+0x474>)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	ed93 7a00 	vldr	s14, [r3]
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <degree+0x474>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026de:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80026e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e6:	ee17 0a90 	vmov	r0, s15
 80026ea:	f7fd ff2d 	bl	8000548 <__aeabi_f2d>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	e9c7 2300 	strd	r2, r3, [r7]
		return -(30+ratio);
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <degree+0x478>)
 80026fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002700:	f7fd fdc4 	bl	800028c <__adddf3>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4614      	mov	r4, r2
 800270a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800270e:	e003      	b.n	8002718 <degree+0x460>
	}

	else return 0;
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	f04f 0500 	mov.w	r5, #0
 8002718:	ec45 4b17 	vmov	d7, r4, r5

}
 800271c:	eeb0 0a47 	vmov.f32	s0, s14
 8002720:	eef0 0a67 	vmov.f32	s1, s15
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bdb0      	pop	{r4, r5, r7, pc}
 800272a:	bf00      	nop
 800272c:	2000052c 	.word	0x2000052c
 8002730:	403e0000 	.word	0x403e0000
 8002734:	00000000 	.word	0x00000000

08002738 <LineTrace>:


void LineTrace(uint8_t motor_flag)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
	double deg = degree();
 8002742:	f7ff fdb9 	bl	80022b8 <degree>
 8002746:	ed87 0b06 	vstr	d0, [r7, #24]
	double rad = deg * (M_PI / 180);
 800274a:	a383      	add	r3, pc, #524	; (adr r3, 8002958 <LineTrace+0x220>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002754:	f7fd ff50 	bl	80005f8 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double Turning_Radius = 35 / tan(rad);
 8002760:	ed97 0b04 	vldr	d0, [r7, #16]
 8002764:	f006 f91c 	bl	80089a0 <tan>
 8002768:	ec53 2b10 	vmov	r2, r3, d0
 800276c:	f04f 0000 	mov.w	r0, #0
 8002770:	4973      	ldr	r1, [pc, #460]	; (8002940 <LineTrace+0x208>)
 8002772:	f7fe f86b 	bl	800084c <__aeabi_ddiv>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(motor_flag == 2){
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d120      	bne.n	80027c6 <LineTrace+0x8e>
		Speed_Ref = Speed_Ref - 0.002;
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <LineTrace+0x20c>)
 8002786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800278a:	a367      	add	r3, pc, #412	; (adr r3, 8002928 <LineTrace+0x1f0>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd fd7a 	bl	8000288 <__aeabi_dsub>
 8002794:	4603      	mov	r3, r0
 8002796:	460c      	mov	r4, r1
 8002798:	4a6a      	ldr	r2, [pc, #424]	; (8002944 <LineTrace+0x20c>)
 800279a:	e9c2 3400 	strd	r3, r4, [r2]
		if(0 >= Speed_Ref) Speed_Ref = 0;
 800279e:	4b69      	ldr	r3, [pc, #420]	; (8002944 <LineTrace+0x20c>)
 80027a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f7fe f9a0 	bl	8000af0 <__aeabi_dcmple>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d031      	beq.n	800281a <LineTrace+0xe2>
 80027b6:	4a63      	ldr	r2, [pc, #396]	; (8002944 <LineTrace+0x20c>)
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	f04f 0400 	mov.w	r4, #0
 80027c0:	e9c2 3400 	strd	r3, r4, [r2]
 80027c4:	e029      	b.n	800281a <LineTrace+0xe2>
	}
	else{
		Speed_Ref = ((V_MIN - V_MAX)/30) * fabs(deg) + V_MAX;
 80027c6:	69bc      	ldr	r4, [r7, #24]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80027ce:	a358      	add	r3, pc, #352	; (adr r3, 8002930 <LineTrace+0x1f8>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	4620      	mov	r0, r4
 80027d6:	4629      	mov	r1, r5
 80027d8:	f7fd ff0e 	bl	80005f8 <__aeabi_dmul>
 80027dc:	4603      	mov	r3, r0
 80027de:	460c      	mov	r4, r1
 80027e0:	4618      	mov	r0, r3
 80027e2:	4621      	mov	r1, r4
 80027e4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80027e8:	4b57      	ldr	r3, [pc, #348]	; (8002948 <LineTrace+0x210>)
 80027ea:	f7fd fd4f 	bl	800028c <__adddf3>
 80027ee:	4603      	mov	r3, r0
 80027f0:	460c      	mov	r4, r1
 80027f2:	4a54      	ldr	r2, [pc, #336]	; (8002944 <LineTrace+0x20c>)
 80027f4:	e9c2 3400 	strd	r3, r4, [r2]
		if(V_MIN > Speed_Ref) Speed_Ref = V_MIN;
 80027f8:	4b52      	ldr	r3, [pc, #328]	; (8002944 <LineTrace+0x20c>)
 80027fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027fe:	a34e      	add	r3, pc, #312	; (adr r3, 8002938 <LineTrace+0x200>)
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	f7fe f96a 	bl	8000adc <__aeabi_dcmplt>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <LineTrace+0xe2>
 800280e:	4a4d      	ldr	r2, [pc, #308]	; (8002944 <LineTrace+0x20c>)
 8002810:	a449      	add	r4, pc, #292	; (adr r4, 8002938 <LineTrace+0x200>)
 8002812:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002816:	e9c2 3400 	strd	r3, r4, [r2]
	}

	Speed_input_R = SpeedContorol_R( (Turning_Radius - tread) * (Speed_Ref / Turning_Radius) );
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <LineTrace+0x214>)
 800281c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002820:	461a      	mov	r2, r3
 8002822:	4623      	mov	r3, r4
 8002824:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002828:	f7fd fd2e 	bl	8000288 <__aeabi_dsub>
 800282c:	4603      	mov	r3, r0
 800282e:	460c      	mov	r4, r1
 8002830:	4625      	mov	r5, r4
 8002832:	461c      	mov	r4, r3
 8002834:	4b43      	ldr	r3, [pc, #268]	; (8002944 <LineTrace+0x20c>)
 8002836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800283a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800283e:	f7fe f805 	bl	800084c <__aeabi_ddiv>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4620      	mov	r0, r4
 8002848:	4629      	mov	r1, r5
 800284a:	f7fd fed5 	bl	80005f8 <__aeabi_dmul>
 800284e:	4603      	mov	r3, r0
 8002850:	460c      	mov	r4, r1
 8002852:	ec44 3b17 	vmov	d7, r3, r4
 8002856:	eeb0 0a47 	vmov.f32	s0, s14
 800285a:	eef0 0a67 	vmov.f32	s1, s15
 800285e:	f000 f97b 	bl	8002b58 <SpeedContorol_R>
 8002862:	eeb0 7a40 	vmov.f32	s14, s0
 8002866:	eef0 7a60 	vmov.f32	s15, s1
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <LineTrace+0x218>)
 800286c:	ed83 7b00 	vstr	d7, [r3]
	Speed_input_L = SpeedContorol_L( (Turning_Radius + tread) * (Speed_Ref / Turning_Radius) );
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <LineTrace+0x214>)
 8002872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800287a:	f7fd fd07 	bl	800028c <__adddf3>
 800287e:	4603      	mov	r3, r0
 8002880:	460c      	mov	r4, r1
 8002882:	4625      	mov	r5, r4
 8002884:	461c      	mov	r4, r3
 8002886:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <LineTrace+0x20c>)
 8002888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800288c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002890:	f7fd ffdc 	bl	800084c <__aeabi_ddiv>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4620      	mov	r0, r4
 800289a:	4629      	mov	r1, r5
 800289c:	f7fd feac 	bl	80005f8 <__aeabi_dmul>
 80028a0:	4603      	mov	r3, r0
 80028a2:	460c      	mov	r4, r1
 80028a4:	ec44 3b17 	vmov	d7, r3, r4
 80028a8:	eeb0 0a47 	vmov.f32	s0, s14
 80028ac:	eef0 0a67 	vmov.f32	s1, s15
 80028b0:	f000 f9d6 	bl	8002c60 <SpeedContorol_L>
 80028b4:	eeb0 7a40 	vmov.f32	s14, s0
 80028b8:	eef0 7a60 	vmov.f32	s15, s1
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <LineTrace+0x21c>)
 80028be:	ed83 7b00 	vstr	d7, [r3]


	switch(motor_flag){
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d003      	beq.n	80028d0 <LineTrace+0x198>
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d014      	beq.n	80028f6 <LineTrace+0x1be>
 80028cc:	2b00      	cmp	r3, #0
	case 0:
		//motor_R(0);
		//motor_L(0);
		break;
 80028ce:	e025      	b.n	800291c <LineTrace+0x1e4>
	case 1:
		motor_R( Speed_input_R );
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <LineTrace+0x218>)
 80028d2:	ed93 7b00 	vldr	d7, [r3]
 80028d6:	eeb0 0a47 	vmov.f32	s0, s14
 80028da:	eef0 0a67 	vmov.f32	s1, s15
 80028de:	f000 f83f 	bl	8002960 <motor_R>
		motor_L( Speed_input_L );
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <LineTrace+0x21c>)
 80028e4:	ed93 7b00 	vldr	d7, [r3]
 80028e8:	eeb0 0a47 	vmov.f32	s0, s14
 80028ec:	eef0 0a67 	vmov.f32	s1, s15
 80028f0:	f000 f87c 	bl	80029ec <motor_L>
		break;
 80028f4:	e012      	b.n	800291c <LineTrace+0x1e4>
	case 2:
		motor_R( Speed_input_R );
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <LineTrace+0x218>)
 80028f8:	ed93 7b00 	vldr	d7, [r3]
 80028fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002900:	eef0 0a67 	vmov.f32	s1, s15
 8002904:	f000 f82c 	bl	8002960 <motor_R>
		motor_L( Speed_input_L );
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <LineTrace+0x21c>)
 800290a:	ed93 7b00 	vldr	d7, [r3]
 800290e:	eeb0 0a47 	vmov.f32	s0, s14
 8002912:	eef0 0a67 	vmov.f32	s1, s15
 8002916:	f000 f869 	bl	80029ec <motor_L>
		break;
 800291a:	bf00      	nop
	}
}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bdb0      	pop	{r4, r5, r7, pc}
 8002924:	f3af 8000 	nop.w
 8002928:	d2f1a9fc 	.word	0xd2f1a9fc
 800292c:	3f60624d 	.word	0x3f60624d
 8002930:	b4e81b4d 	.word	0xb4e81b4d
 8002934:	bf8b4e81 	.word	0xbf8b4e81
 8002938:	9999999a 	.word	0x9999999a
 800293c:	3fe99999 	.word	0x3fe99999
 8002940:	40418000 	.word	0x40418000
 8002944:	20000000 	.word	0x20000000
 8002948:	3ff33333 	.word	0x3ff33333
 800294c:	20000008 	.word	0x20000008
 8002950:	200006a8 	.word	0x200006a8
 8002954:	20000750 	.word	0x20000750
 8002958:	a2529d39 	.word	0xa2529d39
 800295c:	3f91df46 	.word	0x3f91df46

08002960 <motor_R>:

//Motor_R
void motor_R( double duty )
{
 8002960:	b5b0      	push	{r4, r5, r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800297a:	f7fe f8af 	bl	8000adc <__aeabi_dcmplt>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d012      	beq.n	80029aa <motor_R+0x4a>
		countorperiod = duty * -1;
 8002984:	683c      	ldr	r4, [r7, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fe f8e2 	bl	8000b58 <__aeabi_d2iz>
 8002994:	4603      	mov	r3, r0
 8002996:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, countorperiod);
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <motor_R+0x88>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <motor_R+0x88>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	635a      	str	r2, [r3, #52]	; 0x34
	else if( duty >= 0 ){
		countorperiod = duty;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, countorperiod);
	}
}
 80029a8:	e019      	b.n	80029de <motor_R+0x7e>
	else if( duty >= 0 ){
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029b6:	f7fe f8a5 	bl	8000b04 <__aeabi_dcmpge>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d100      	bne.n	80029c2 <motor_R+0x62>
}
 80029c0:	e00d      	b.n	80029de <motor_R+0x7e>
		countorperiod = duty;
 80029c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029c6:	f7fe f8c7 	bl	8000b58 <__aeabi_d2iz>
 80029ca:	4603      	mov	r3, r0
 80029cc:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <motor_R+0x88>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2200      	movs	r2, #0
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, countorperiod);
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <motor_R+0x88>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bdb0      	pop	{r4, r5, r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200004e0 	.word	0x200004e0

080029ec <motor_L>:

//Motor_L
void motor_L( double duty )
{
 80029ec:	b5b0      	push	{r4, r5, r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a06:	f7fe f869 	bl	8000adc <__aeabi_dcmplt>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d012      	beq.n	8002a36 <motor_L+0x4a>
		countorperiod = duty * -1;
 8002a10:	683c      	ldr	r4, [r7, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a18:	4620      	mov	r0, r4
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	f7fe f89c 	bl	8000b58 <__aeabi_d2iz>
 8002a20:	4603      	mov	r3, r0
 8002a22:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, countorperiod);
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <motor_L+0x88>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <motor_L+0x88>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38
	else if( duty >= 0 ){
		countorperiod = duty;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, countorperiod);
	}
}
 8002a34:	e019      	b.n	8002a6a <motor_L+0x7e>
	else if( duty >= 0 ){
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a42:	f7fe f85f 	bl	8000b04 <__aeabi_dcmpge>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d100      	bne.n	8002a4e <motor_L+0x62>
}
 8002a4c:	e00d      	b.n	8002a6a <motor_L+0x7e>
		countorperiod = duty;
 8002a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a52:	f7fe f881 	bl	8000b58 <__aeabi_d2iz>
 8002a56:	4603      	mov	r3, r0
 8002a58:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <motor_L+0x88>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, countorperiod);
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <motor_L+0x88>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bdb0      	pop	{r4, r5, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200004e0 	.word	0x200004e0

08002a78 <Speed_R>:

//Motor_Speed_R
double Speed_R()
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
	int Encoder = (TIM2 -> CNT) - 32767;
 8002a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002a88:	3b7f      	subs	r3, #127	; 0x7f
 8002a8a:	60fb      	str	r3, [r7, #12]
	TIM2 -> CNT = 32767;
 8002a8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
	double speed = (7. * TIRE * M_PI * (double)Encoder) / (40960. * TIM05);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7fd fd44 	bl	8000524 <__aeabi_i2d>
 8002a9c:	a30f      	add	r3, pc, #60	; (adr r3, 8002adc <Speed_R+0x64>)
 8002a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa2:	f7fd fda9 	bl	80005f8 <__aeabi_dmul>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	460c      	mov	r4, r1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	4621      	mov	r1, r4
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <Speed_R+0x60>)
 8002ab4:	f7fd feca 	bl	800084c <__aeabi_ddiv>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	460c      	mov	r4, r1
 8002abc:	e9c7 3400 	strd	r3, r4, [r7]
	return speed;
 8002ac0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002ac4:	ec44 3b17 	vmov	d7, r3, r4
}
 8002ac8:	eeb0 0a47 	vmov.f32	s0, s14
 8002acc:	eef0 0a67 	vmov.f32	s1, s15
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40d40000 	.word	0x40d40000
 8002adc:	6c843286 	.word	0x6c843286
 8002ae0:	40733e04 	.word	0x40733e04
 8002ae4:	00000000 	.word	0x00000000

08002ae8 <Speed_L>:

//Motor_Speed_L
double Speed_L()
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
	int Encoder = (TIM3 -> CNT) - 32767;
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <Speed_L+0x68>)
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002af6:	3b7f      	subs	r3, #127	; 0x7f
 8002af8:	60fb      	str	r3, [r7, #12]
	TIM3 -> CNT = 32767;
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <Speed_L+0x68>)
 8002afc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24
	double speed = (7. * TIRE * M_PI * (double)Encoder) / (40960. * TIM05);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7fd fd0e 	bl	8000524 <__aeabi_i2d>
 8002b08:	a30f      	add	r3, pc, #60	; (adr r3, 8002b48 <Speed_L+0x60>)
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0e:	f7fd fd73 	bl	80005f8 <__aeabi_dmul>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	4618      	mov	r0, r3
 8002b18:	4621      	mov	r1, r4
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <Speed_L+0x6c>)
 8002b20:	f7fd fe94 	bl	800084c <__aeabi_ddiv>
 8002b24:	4603      	mov	r3, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	e9c7 3400 	strd	r3, r4, [r7]
	return speed;
 8002b2c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b30:	ec44 3b17 	vmov	d7, r3, r4
}
 8002b34:	eeb0 0a47 	vmov.f32	s0, s14
 8002b38:	eef0 0a67 	vmov.f32	s1, s15
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	bf00      	nop
 8002b44:	f3af 8000 	nop.w
 8002b48:	6c843286 	.word	0x6c843286
 8002b4c:	40733e04 	.word	0x40733e04
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40d40000 	.word	0x40d40000

08002b58 <SpeedContorol_R>:

double SpeedContorol_R(double Speed_Ref)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 700.0, duty;
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	4c3a      	ldr	r4, [pc, #232]	; (8002c50 <SpeedContorol_R+0xf8>)
 8002b68:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double delta_speed = Speed_Ref - SR;
 8002b6c:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <SpeedContorol_R+0xfc>)
 8002b6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b72:	461a      	mov	r2, r3
 8002b74:	4623      	mov	r3, r4
 8002b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b7a:	f7fd fb85 	bl	8000288 <__aeabi_dsub>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	460c      	mov	r4, r1
 8002b82:	e9c7 3404 	strd	r3, r4, [r7, #16]

	speedR_I_buff += delta_speed * TIM05 * 0.001;
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <SpeedContorol_R+0x100>)
 8002b8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b90:	f7fd fd32 	bl	80005f8 <__aeabi_dmul>
 8002b94:	4603      	mov	r3, r0
 8002b96:	460c      	mov	r4, r1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	a326      	add	r3, pc, #152	; (adr r3, 8002c38 <SpeedContorol_R+0xe0>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fd29 	bl	80005f8 <__aeabi_dmul>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460c      	mov	r4, r1
 8002baa:	4618      	mov	r0, r3
 8002bac:	4621      	mov	r1, r4
 8002bae:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <SpeedContorol_R+0x104>)
 8002bb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	f7fd fb68 	bl	800028c <__adddf3>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <SpeedContorol_R+0x104>)
 8002bc2:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedR_I_buff >= 1000000) speedR_I_buff = 1000000;
 8002bc6:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <SpeedContorol_R+0x104>)
 8002bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bcc:	a31c      	add	r3, pc, #112	; (adr r3, 8002c40 <SpeedContorol_R+0xe8>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	f7fd ff97 	bl	8000b04 <__aeabi_dcmpge>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <SpeedContorol_R+0x90>
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <SpeedContorol_R+0x104>)
 8002bde:	a418      	add	r4, pc, #96	; (adr r4, 8002c40 <SpeedContorol_R+0xe8>)
 8002be0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002be4:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedR_I_buff <= -1000000) speedR_I_buff = -1000000;
 8002be8:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <SpeedContorol_R+0x104>)
 8002bea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bee:	a316      	add	r3, pc, #88	; (adr r3, 8002c48 <SpeedContorol_R+0xf0>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd ff7c 	bl	8000af0 <__aeabi_dcmple>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <SpeedContorol_R+0xb2>
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <SpeedContorol_R+0x104>)
 8002c00:	a411      	add	r4, pc, #68	; (adr r4, 8002c48 <SpeedContorol_R+0xf0>)
 8002c02:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c06:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( delta_speed * PGain ) /*+ ( speedR_I_buff * IGain )*/;
 8002c0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c12:	f7fd fcf1 	bl	80005f8 <__aeabi_dmul>
 8002c16:	4603      	mov	r3, r0
 8002c18:	460c      	mov	r4, r1
 8002c1a:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 8002c1e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c22:	ec44 3b17 	vmov	d7, r3, r4
}
 8002c26:	eeb0 0a47 	vmov.f32	s0, s14
 8002c2a:	eef0 0a67 	vmov.f32	s1, s15
 8002c2e:	3724      	adds	r7, #36	; 0x24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}
 8002c34:	f3af 8000 	nop.w
 8002c38:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c3c:	3f50624d 	.word	0x3f50624d
 8002c40:	00000000 	.word	0x00000000
 8002c44:	412e8480 	.word	0x412e8480
 8002c48:	00000000 	.word	0x00000000
 8002c4c:	c12e8480 	.word	0xc12e8480
 8002c50:	4085e000 	.word	0x4085e000
 8002c54:	200003d0 	.word	0x200003d0
 8002c58:	3fe00000 	.word	0x3fe00000
 8002c5c:	200002e0 	.word	0x200002e0

08002c60 <SpeedContorol_L>:

double SpeedContorol_L(double Speed_Ref)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 700.0, duty;
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	4c3a      	ldr	r4, [pc, #232]	; (8002d58 <SpeedContorol_L+0xf8>)
 8002c70:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double delta_speed = Speed_Ref - SL;
 8002c74:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <SpeedContorol_L+0xfc>)
 8002c76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c82:	f7fd fb01 	bl	8000288 <__aeabi_dsub>
 8002c86:	4603      	mov	r3, r0
 8002c88:	460c      	mov	r4, r1
 8002c8a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	speedL_I_buff += delta_speed * TIM05 * 0.001;
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <SpeedContorol_L+0x100>)
 8002c94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c98:	f7fd fcae 	bl	80005f8 <__aeabi_dmul>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	a326      	add	r3, pc, #152	; (adr r3, 8002d40 <SpeedContorol_L+0xe0>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd fca5 	bl	80005f8 <__aeabi_dmul>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <SpeedContorol_L+0x104>)
 8002cb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	f7fd fae4 	bl	800028c <__adddf3>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <SpeedContorol_L+0x104>)
 8002cca:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedL_I_buff >= 1000000) speedL_I_buff = 1000000;
 8002cce:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <SpeedContorol_L+0x104>)
 8002cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cd4:	a31c      	add	r3, pc, #112	; (adr r3, 8002d48 <SpeedContorol_L+0xe8>)
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	f7fd ff13 	bl	8000b04 <__aeabi_dcmpge>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <SpeedContorol_L+0x90>
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <SpeedContorol_L+0x104>)
 8002ce6:	a418      	add	r4, pc, #96	; (adr r4, 8002d48 <SpeedContorol_L+0xe8>)
 8002ce8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002cec:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedL_I_buff <= -1000000) speedL_I_buff = -1000000;
 8002cf0:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <SpeedContorol_L+0x104>)
 8002cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cf6:	a316      	add	r3, pc, #88	; (adr r3, 8002d50 <SpeedContorol_L+0xf0>)
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd fef8 	bl	8000af0 <__aeabi_dcmple>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <SpeedContorol_L+0xb2>
 8002d06:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <SpeedContorol_L+0x104>)
 8002d08:	a411      	add	r4, pc, #68	; (adr r4, 8002d50 <SpeedContorol_L+0xf0>)
 8002d0a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002d0e:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( delta_speed * PGain ) /*+ ( speedL_I_buff * IGain )*/;
 8002d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d1a:	f7fd fc6d 	bl	80005f8 <__aeabi_dmul>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	460c      	mov	r4, r1
 8002d22:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 8002d26:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002d2a:	ec44 3b17 	vmov	d7, r3, r4
}
 8002d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d32:	eef0 0a67 	vmov.f32	s1, s15
 8002d36:	3724      	adds	r7, #36	; 0x24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	f3af 8000 	nop.w
 8002d40:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d44:	3f50624d 	.word	0x3f50624d
 8002d48:	00000000 	.word	0x00000000
 8002d4c:	412e8480 	.word	0x412e8480
 8002d50:	00000000 	.word	0x00000000
 8002d54:	c12e8480 	.word	0xc12e8480
 8002d58:	4085e000 	.word	0x4085e000
 8002d5c:	20000348 	.word	0x20000348
 8002d60:	3fe00000 	.word	0x3fe00000
 8002d64:	200003d8 	.word	0x200003d8

08002d68 <HAL_TIM_PeriodElapsedCallback>:

//Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_TIM_PeriodElapsedCallback+0x16>
	   adc_getValues();
 8002d7a:	f7fe fe3f 	bl	80019fc <adc_getValues>
   }
   if(htim->Instance == TIM7){
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d12c      	bne.n	8002de2 <HAL_TIM_PeriodElapsedCallback+0x7a>
	   updateValues();
 8002d88:	f7fe ff9e 	bl	8001cc8 <updateValues>
	   degree();
 8002d8c:	f7ff fa94 	bl	80022b8 <degree>
	   SR = Speed_R();
 8002d90:	f7ff fe72 	bl	8002a78 <Speed_R>
 8002d94:	eeb0 7a40 	vmov.f32	s14, s0
 8002d98:	eef0 7a60 	vmov.f32	s15, s1
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002d9e:	ed83 7b00 	vstr	d7, [r3]
	   SL = Speed_L();
 8002da2:	f7ff fea1 	bl	8002ae8 <Speed_L>
 8002da6:	eeb0 7a40 	vmov.f32	s14, s0
 8002daa:	eef0 7a60 	vmov.f32	s15, s1
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002db0:	ed83 7b00 	vstr	d7, [r3]
	   LineTrace(linetrace_flag);
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fcbd 	bl	8002738 <LineTrace>
	   if(side_r_flag) side_r_time++;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIM_PeriodElapsedCallback+0x68>
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002dce:	6013      	str	r3, [r2, #0]
	   if(side_l_flag) side_l_time++;
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_TIM_PeriodElapsedCallback+0x7a>
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002de0:	6013      	str	r3, [r2, #0]
   }
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40001000 	.word	0x40001000
 8002df0:	40001400 	.word	0x40001400
 8002df4:	200003d0 	.word	0x200003d0
 8002df8:	20000348 	.word	0x20000348
 8002dfc:	20000224 	.word	0x20000224
 8002e00:	200003a8 	.word	0x200003a8
 8002e04:	20000758 	.word	0x20000758
 8002e08:	200002ec 	.word	0x200002ec
 8002e0c:	20000540 	.word	0x20000540

08002e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e14:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e16:	e7fe      	b.n	8002e16 <Error_Handler+0x6>

08002e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_MspInit+0x44>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <HAL_MspInit+0x44>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6193      	str	r3, [r2, #24]
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <HAL_MspInit+0x44>)
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_MspInit+0x44>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <HAL_MspInit+0x44>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_MspInit+0x44>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08c      	sub	sp, #48	; 0x30
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 031c 	add.w	r3, r7, #28
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e80:	d16e      	bne.n	8002f60 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e82:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_ADC_MspInit+0x1c0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	4a65      	ldr	r2, [pc, #404]	; (8003020 <HAL_ADC_MspInit+0x1c0>)
 8002e8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e8c:	4b64      	ldr	r3, [pc, #400]	; (8003020 <HAL_ADC_MspInit+0x1c0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10b      	bne.n	8002eac <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e94:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	4a62      	ldr	r2, [pc, #392]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6153      	str	r3, [r2, #20]
 8002ea0:	4b60      	ldr	r3, [pc, #384]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eac:	4b5d      	ldr	r3, [pc, #372]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	4a5c      	ldr	r2, [pc, #368]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb6:	6153      	str	r3, [r2, #20]
 8002eb8:	4b5a      	ldr	r3, [pc, #360]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec4:	4b57      	ldr	r3, [pc, #348]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	4a56      	ldr	r2, [pc, #344]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ece:	6153      	str	r3, [r2, #20]
 8002ed0:	4b54      	ldr	r3, [pc, #336]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002edc:	2309      	movs	r3, #9
 8002ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	4619      	mov	r1, r3
 8002eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ef2:	f001 fefd 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002efa:	2303      	movs	r3, #3
 8002efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	4619      	mov	r1, r3
 8002f08:	4847      	ldr	r0, [pc, #284]	; (8003028 <HAL_ADC_MspInit+0x1c8>)
 8002f0a:	f001 fef1 	bl	8004cf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f0e:	4b47      	ldr	r3, [pc, #284]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f10:	4a47      	ldr	r2, [pc, #284]	; (8003030 <HAL_ADC_MspInit+0x1d0>)
 8002f12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f14:	4b45      	ldr	r3, [pc, #276]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1a:	4b44      	ldr	r3, [pc, #272]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f20:	4b42      	ldr	r3, [pc, #264]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f2e:	4b3f      	ldr	r3, [pc, #252]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f38:	2220      	movs	r2, #32
 8002f3a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f3c:	4b3b      	ldr	r3, [pc, #236]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f42:	483a      	ldr	r0, [pc, #232]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f44:	f001 fcc5 	bl	80048d2 <HAL_DMA_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8002f4e:	f7ff ff5f 	bl	8002e10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a35      	ldr	r2, [pc, #212]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38
 8002f58:	4a34      	ldr	r2, [pc, #208]	; (800302c <HAL_ADC_MspInit+0x1cc>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f5e:	e05a      	b.n	8003016 <HAL_ADC_MspInit+0x1b6>
  else if(hadc->Instance==ADC2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a33      	ldr	r2, [pc, #204]	; (8003034 <HAL_ADC_MspInit+0x1d4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d155      	bne.n	8003016 <HAL_ADC_MspInit+0x1b6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f6a:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <HAL_ADC_MspInit+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	4a2b      	ldr	r2, [pc, #172]	; (8003020 <HAL_ADC_MspInit+0x1c0>)
 8002f72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f74:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <HAL_ADC_MspInit+0x1c0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10b      	bne.n	8002f94 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f7c:	4b29      	ldr	r3, [pc, #164]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	4a28      	ldr	r2, [pc, #160]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f86:	6153      	str	r3, [r2, #20]
 8002f88:	4b26      	ldr	r3, [pc, #152]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f94:	4b23      	ldr	r3, [pc, #140]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9e:	6153      	str	r3, [r2, #20]
 8002fa0:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_ADC_MspInit+0x1c4>)
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fac:	2310      	movs	r3, #16
 8002fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc2:	f001 fe95 	bl	8004cf0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	; (800303c <HAL_ADC_MspInit+0x1dc>)
 8002fca:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 8002fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 8002fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002ffa:	480f      	ldr	r0, [pc, #60]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 8002ffc:	f001 fc69 	bl	80048d2 <HAL_DMA_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_ADC_MspInit+0x1aa>
      Error_Handler();
 8003006:	f7ff ff03 	bl	8002e10 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
 8003010:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_ADC_MspInit+0x1d8>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003016:	bf00      	nop
 8003018:	3730      	adds	r7, #48	; 0x30
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	2000020c 	.word	0x2000020c
 8003024:	40021000 	.word	0x40021000
 8003028:	48000400 	.word	0x48000400
 800302c:	200003e0 	.word	0x200003e0
 8003030:	40020008 	.word	0x40020008
 8003034:	50000100 	.word	0x50000100
 8003038:	20000650 	.word	0x20000650
 800303c:	4002001c 	.word	0x4002001c

08003040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a17      	ldr	r2, [pc, #92]	; (80030bc <HAL_I2C_MspInit+0x7c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d127      	bne.n	80030b2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 8003068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306c:	6153      	str	r3, [r2, #20]
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800307a:	23c0      	movs	r3, #192	; 0xc0
 800307c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800307e:	2312      	movs	r3, #18
 8003080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003082:	2301      	movs	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003086:	2303      	movs	r3, #3
 8003088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800308a:	2304      	movs	r3, #4
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308e:	f107 0314 	add.w	r3, r7, #20
 8003092:	4619      	mov	r1, r3
 8003094:	480b      	ldr	r0, [pc, #44]	; (80030c4 <HAL_I2C_MspInit+0x84>)
 8003096:	f001 fe2b 	bl	8004cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 80030a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030a4:	61d3      	str	r3, [r2, #28]
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030b2:	bf00      	nop
 80030b4:	3728      	adds	r7, #40	; 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40005400 	.word	0x40005400
 80030c0:	40021000 	.word	0x40021000
 80030c4:	48000400 	.word	0x48000400

080030c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_TIM_PWM_MspInit+0x38>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10b      	bne.n	80030f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_TIM_PWM_MspInit+0x3c>)
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_TIM_PWM_MspInit+0x3c>)
 80030e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030e4:	6193      	str	r3, [r2, #24]
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HAL_TIM_PWM_MspInit+0x3c>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40021000 	.word	0x40021000

08003108 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08c      	sub	sp, #48	; 0x30
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d129      	bne.n	800317e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800312a:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4a2d      	ldr	r2, [pc, #180]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	61d3      	str	r3, [r2, #28]
 8003136:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003142:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314c:	6153      	str	r3, [r2, #20]
 800314e:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800315a:	2322      	movs	r3, #34	; 0x22
 800315c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315e:	2302      	movs	r3, #2
 8003160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003166:	2300      	movs	r3, #0
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800316a:	2301      	movs	r3, #1
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	f107 031c 	add.w	r3, r7, #28
 8003172:	4619      	mov	r1, r3
 8003174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003178:	f001 fdba 	bl	8004cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800317c:	e02d      	b.n	80031da <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM3)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d128      	bne.n	80031da <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	61d3      	str	r3, [r2, #28]
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 80031a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031aa:	6153      	str	r3, [r2, #20]
 80031ac:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <HAL_TIM_Encoder_MspInit+0xdc>)
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031b8:	23c0      	movs	r3, #192	; 0xc0
 80031ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031c8:	2302      	movs	r3, #2
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031cc:	f107 031c 	add.w	r3, r7, #28
 80031d0:	4619      	mov	r1, r3
 80031d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031d6:	f001 fd8b 	bl	8004cf0 <HAL_GPIO_Init>
}
 80031da:	bf00      	nop
 80031dc:	3730      	adds	r7, #48	; 0x30
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40000400 	.word	0x40000400

080031ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a23      	ldr	r2, [pc, #140]	; (8003288 <HAL_TIM_Base_MspInit+0x9c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d114      	bne.n	8003228 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_TIM_Base_MspInit+0xa0>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	4a22      	ldr	r2, [pc, #136]	; (800328c <HAL_TIM_Base_MspInit+0xa0>)
 8003204:	f043 0310 	orr.w	r3, r3, #16
 8003208:	61d3      	str	r3, [r2, #28]
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_TIM_Base_MspInit+0xa0>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	2036      	movs	r0, #54	; 0x36
 800321c:	f001 fb23 	bl	8004866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8003220:	2036      	movs	r0, #54	; 0x36
 8003222:	f001 fb3c 	bl	800489e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003226:	e02a      	b.n	800327e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_TIM_Base_MspInit+0xa4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d114      	bne.n	800325c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <HAL_TIM_Base_MspInit+0xa0>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	4a15      	ldr	r2, [pc, #84]	; (800328c <HAL_TIM_Base_MspInit+0xa0>)
 8003238:	f043 0320 	orr.w	r3, r3, #32
 800323c:	61d3      	str	r3, [r2, #28]
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_TIM_Base_MspInit+0xa0>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	2037      	movs	r0, #55	; 0x37
 8003250:	f001 fb09 	bl	8004866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8003254:	2037      	movs	r0, #55	; 0x37
 8003256:	f001 fb22 	bl	800489e <HAL_NVIC_EnableIRQ>
}
 800325a:	e010      	b.n	800327e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <HAL_TIM_Base_MspInit+0xa8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10b      	bne.n	800327e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_TIM_Base_MspInit+0xa0>)
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	4a08      	ldr	r2, [pc, #32]	; (800328c <HAL_TIM_Base_MspInit+0xa0>)
 800326c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003270:	6193      	str	r3, [r2, #24]
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_TIM_Base_MspInit+0xa0>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40001000 	.word	0x40001000
 800328c:	40021000 	.word	0x40021000
 8003290:	40001400 	.word	0x40001400
 8003294:	40014400 	.word	0x40014400

08003298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	; 0x28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2d      	ldr	r2, [pc, #180]	; (800336c <HAL_TIM_MspPostInit+0xd4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d130      	bne.n	800331c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <HAL_TIM_MspPostInit+0xd8>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <HAL_TIM_MspPostInit+0xd8>)
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c4:	6153      	str	r3, [r2, #20]
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <HAL_TIM_MspPostInit+0xd8>)
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80032d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d8:	2302      	movs	r3, #2
 80032da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80032e4:	2306      	movs	r3, #6
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	4619      	mov	r1, r3
 80032ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032f2:	f001 fcfd 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80032f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fc:	2302      	movs	r3, #2
 80032fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	2300      	movs	r3, #0
 8003306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8003308:	230b      	movs	r3, #11
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	4619      	mov	r1, r3
 8003312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003316:	f001 fceb 	bl	8004cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800331a:	e022      	b.n	8003362 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM16)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <HAL_TIM_MspPostInit+0xdc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d11d      	bne.n	8003362 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_TIM_MspPostInit+0xd8>)
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_TIM_MspPostInit+0xd8>)
 800332c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003330:	6153      	str	r3, [r2, #20]
 8003332:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_TIM_MspPostInit+0xd8>)
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800333e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334c:	2300      	movs	r3, #0
 800334e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003350:	2301      	movs	r3, #1
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	4619      	mov	r1, r3
 800335a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800335e:	f001 fcc7 	bl	8004cf0 <HAL_GPIO_Init>
}
 8003362:	bf00      	nop
 8003364:	3728      	adds	r7, #40	; 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40021000 	.word	0x40021000
 8003374:	40014400 	.word	0x40014400

08003378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <HAL_UART_MspInit+0x90>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d131      	bne.n	80033fe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <HAL_UART_MspInit+0x94>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4a1b      	ldr	r2, [pc, #108]	; (800340c <HAL_UART_MspInit+0x94>)
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a4:	61d3      	str	r3, [r2, #28]
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_UART_MspInit+0x94>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b2:	4b16      	ldr	r3, [pc, #88]	; (800340c <HAL_UART_MspInit+0x94>)
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4a15      	ldr	r2, [pc, #84]	; (800340c <HAL_UART_MspInit+0x94>)
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033bc:	6153      	str	r3, [r2, #20]
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_UART_MspInit+0x94>)
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80033ca:	f248 0304 	movw	r3, #32772	; 0x8004
 80033ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033dc:	2307      	movs	r3, #7
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	4619      	mov	r1, r3
 80033e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ea:	f001 fc81 	bl	8004cf0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	2026      	movs	r0, #38	; 0x26
 80033f4:	f001 fa37 	bl	8004866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033f8:	2026      	movs	r0, #38	; 0x26
 80033fa:	f001 fa50 	bl	800489e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033fe:	bf00      	nop
 8003400:	3728      	adds	r7, #40	; 0x28
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40004400 	.word	0x40004400
 800340c:	40021000 	.word	0x40021000

08003410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <NMI_Handler+0x4>

08003416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800341a:	e7fe      	b.n	800341a <HardFault_Handler+0x4>

0800341c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003420:	e7fe      	b.n	8003420 <MemManage_Handler+0x4>

08003422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003426:	e7fe      	b.n	8003426 <BusFault_Handler+0x4>

08003428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800342c:	e7fe      	b.n	800342c <UsageFault_Handler+0x4>

0800342e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800345c:	f000 f932 	bl	80036c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}

08003464 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003468:	4802      	ldr	r0, [pc, #8]	; (8003474 <DMA1_Channel1_IRQHandler+0x10>)
 800346a:	f001 fb4f 	bl	8004b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200003e0 	.word	0x200003e0

08003478 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800347c:	4802      	ldr	r0, [pc, #8]	; (8003488 <DMA1_Channel2_IRQHandler+0x10>)
 800347e:	f001 fb45 	bl	8004b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000650 	.word	0x20000650

0800348c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003490:	4802      	ldr	r0, [pc, #8]	; (800349c <USART2_IRQHandler+0x10>)
 8003492:	f004 fbf1 	bl	8007c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	200005c4 	.word	0x200005c4

080034a0 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034a4:	4802      	ldr	r0, [pc, #8]	; (80034b0 <TIM6_DAC1_IRQHandler+0x10>)
 80034a6:	f003 fc62 	bl	8006d6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000490 	.word	0x20000490

080034b4 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80034b8:	4802      	ldr	r0, [pc, #8]	; (80034c4 <TIM7_DAC2_IRQHandler+0x10>)
 80034ba:	f003 fc58 	bl	8006d6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000704 	.word	0x20000704

080034c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e00a      	b.n	80034f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034da:	f3af 8000 	nop.w
 80034de:	4601      	mov	r1, r0
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	60ba      	str	r2, [r7, #8]
 80034e6:	b2ca      	uxtb	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dbf0      	blt.n	80034da <_read+0x12>
	}

return len;
 80034f8:	687b      	ldr	r3, [r7, #4]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
	return -1;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800352a:	605a      	str	r2, [r3, #4]
	return 0;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
	return 0;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800355c:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <_sbrk+0x5c>)
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <_sbrk+0x60>)
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003568:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <_sbrk+0x64>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <_sbrk+0x64>)
 8003572:	4a12      	ldr	r2, [pc, #72]	; (80035bc <_sbrk+0x68>)
 8003574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <_sbrk+0x64>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	429a      	cmp	r2, r3
 8003582:	d207      	bcs.n	8003594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003584:	f006 fa52 	bl	8009a2c <__errno>
 8003588:	4602      	mov	r2, r0
 800358a:	230c      	movs	r3, #12
 800358c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
 8003592:	e009      	b.n	80035a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <_sbrk+0x64>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <_sbrk+0x64>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <_sbrk+0x64>)
 80035a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035a6:	68fb      	ldr	r3, [r7, #12]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20003000 	.word	0x20003000
 80035b4:	00000400 	.word	0x00000400
 80035b8:	20000210 	.word	0x20000210
 80035bc:	20000770 	.word	0x20000770

080035c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <SystemInit+0x20>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <SystemInit+0x20>)
 80035cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800361c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035e8:	480d      	ldr	r0, [pc, #52]	; (8003620 <LoopForever+0x6>)
  ldr r1, =_edata
 80035ea:	490e      	ldr	r1, [pc, #56]	; (8003624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035ec:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <LoopForever+0xe>)
  movs r3, #0
 80035ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f0:	e002      	b.n	80035f8 <LoopCopyDataInit>

080035f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035f6:	3304      	adds	r3, #4

080035f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035fc:	d3f9      	bcc.n	80035f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035fe:	4a0b      	ldr	r2, [pc, #44]	; (800362c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003600:	4c0b      	ldr	r4, [pc, #44]	; (8003630 <LoopForever+0x16>)
  movs r3, #0
 8003602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003604:	e001      	b.n	800360a <LoopFillZerobss>

08003606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003608:	3204      	adds	r2, #4

0800360a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800360a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800360c:	d3fb      	bcc.n	8003606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800360e:	f7ff ffd7 	bl	80035c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003612:	f006 fa11 	bl	8009a38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003616:	f7fd fb37 	bl	8000c88 <main>

0800361a <LoopForever>:

LoopForever:
    b LoopForever
 800361a:	e7fe      	b.n	800361a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800361c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003624:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003628:	0800e030 	.word	0x0800e030
  ldr r2, =_sbss
 800362c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003630:	20000770 	.word	0x20000770

08003634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003634:	e7fe      	b.n	8003634 <ADC1_2_IRQHandler>
	...

08003638 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_Init+0x28>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a07      	ldr	r2, [pc, #28]	; (8003660 <HAL_Init+0x28>)
 8003642:	f043 0310 	orr.w	r3, r3, #16
 8003646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003648:	2003      	movs	r0, #3
 800364a:	f001 f901 	bl	8004850 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800364e:	2000      	movs	r0, #0
 8003650:	f000 f808 	bl	8003664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003654:	f7ff fbe0 	bl	8002e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000

08003664 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800366c:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_InitTick+0x54>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_InitTick+0x58>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	4619      	mov	r1, r3
 8003676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367a:	fbb3 f3f1 	udiv	r3, r3, r1
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	4618      	mov	r0, r3
 8003684:	f001 f919 	bl	80048ba <HAL_SYSTICK_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e00e      	b.n	80036b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b0f      	cmp	r3, #15
 8003696:	d80a      	bhi.n	80036ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003698:	2200      	movs	r2, #0
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	f001 f8e1 	bl	8004866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036a4:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <HAL_InitTick+0x5c>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000010 	.word	0x20000010
 80036bc:	20000018 	.word	0x20000018
 80036c0:	20000014 	.word	0x20000014

080036c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_IncTick+0x20>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_IncTick+0x24>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <HAL_IncTick+0x24>)
 80036d6:	6013      	str	r3, [r2, #0]
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20000018 	.word	0x20000018
 80036e8:	20000768 	.word	0x20000768

080036ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_GetTick+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000768 	.word	0x20000768

08003704 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800370c:	f7ff ffee 	bl	80036ec <HAL_GetTick>
 8003710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d005      	beq.n	800372a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_Delay+0x40>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4413      	add	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800372a:	bf00      	nop
 800372c:	f7ff ffde 	bl	80036ec <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	429a      	cmp	r2, r3
 800373a:	d8f7      	bhi.n	800372c <HAL_Delay+0x28>
  {
  }
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000018 	.word	0x20000018

08003748 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b09a      	sub	sp, #104	; 0x68
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e172      	b.n	8003a8a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d176      	bne.n	80038a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d152      	bne.n	8003864 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fb41 	bl	8002e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d13b      	bne.n	8003864 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fef9 	bl	80045e4 <ADC_Disable>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d12f      	bne.n	8003864 <HAL_ADC_Init+0xe0>
 8003804:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003808:	2b00      	cmp	r3, #0
 800380a:	d12b      	bne.n	8003864 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003814:	f023 0302 	bic.w	r3, r3, #2
 8003818:	f043 0202 	orr.w	r2, r3, #2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800382e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800383e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003840:	4b94      	ldr	r3, [pc, #592]	; (8003a94 <HAL_ADC_Init+0x310>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a94      	ldr	r2, [pc, #592]	; (8003a98 <HAL_ADC_Init+0x314>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0c9a      	lsrs	r2, r3, #18
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003856:	e002      	b.n	800385e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3b01      	subs	r3, #1
 800385c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f9      	bne.n	8003858 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800387c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003880:	d110      	bne.n	80038a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f023 0312 	bic.w	r3, r3, #18
 800388a:	f043 0210 	orr.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f040 80df 	bne.w	8003a70 <HAL_ADC_Init+0x2ec>
 80038b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 80da 	bne.w	8003a70 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f040 80d2 	bne.w	8003a70 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80038d4:	f043 0202 	orr.w	r2, r3, #2
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038dc:	4b6f      	ldr	r3, [pc, #444]	; (8003a9c <HAL_ADC_Init+0x318>)
 80038de:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e8:	d102      	bne.n	80038f0 <HAL_ADC_Init+0x16c>
 80038ea:	4b6d      	ldr	r3, [pc, #436]	; (8003aa0 <HAL_ADC_Init+0x31c>)
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e002      	b.n	80038f6 <HAL_ADC_Init+0x172>
 80038f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038f4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d108      	bne.n	8003916 <HAL_ADC_Init+0x192>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_ADC_Init+0x192>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_ADC_Init+0x194>
 8003916:	2300      	movs	r3, #0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d11c      	bne.n	8003956 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800391c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800391e:	2b00      	cmp	r3, #0
 8003920:	d010      	beq.n	8003944 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d107      	bne.n	800393e <HAL_ADC_Init+0x1ba>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_ADC_Init+0x1ba>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_ADC_Init+0x1bc>
 800393e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003940:	2b00      	cmp	r3, #0
 8003942:	d108      	bne.n	8003956 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	431a      	orrs	r2, r3
 8003952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003954:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7e5b      	ldrb	r3, [r3, #25]
 800395a:	035b      	lsls	r3, r3, #13
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003960:	2a01      	cmp	r2, #1
 8003962:	d002      	beq.n	800396a <HAL_ADC_Init+0x1e6>
 8003964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003968:	e000      	b.n	800396c <HAL_ADC_Init+0x1e8>
 800396a:	2200      	movs	r2, #0
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4313      	orrs	r3, r2
 800397a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800397c:	4313      	orrs	r3, r2
 800397e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d11b      	bne.n	80039c2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	7e5b      	ldrb	r3, [r3, #25]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	3b01      	subs	r3, #1
 8003998:	045a      	lsls	r2, r3, #17
 800399a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399c:	4313      	orrs	r3, r2
 800399e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a2:	663b      	str	r3, [r7, #96]	; 0x60
 80039a4:	e00d      	b.n	80039c2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80039ae:	f043 0220 	orr.w	r2, r3, #32
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d007      	beq.n	80039da <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	4313      	orrs	r3, r2
 80039d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039d6:	4313      	orrs	r3, r2
 80039d8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d114      	bne.n	8003a12 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f6:	f023 0302 	bic.w	r3, r3, #2
 80039fa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	7e1b      	ldrb	r3, [r3, #24]
 8003a00:	039a      	lsls	r2, r3, #14
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <HAL_ADC_Init+0x320>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003a22:	430b      	orrs	r3, r1
 8003a24:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d10c      	bne.n	8003a48 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	f023 010f 	bic.w	r1, r3, #15
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	1e5a      	subs	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
 8003a46:	e007      	b.n	8003a58 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 020f 	bic.w	r2, r2, #15
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a6e:	e00a      	b.n	8003a86 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	f023 0312 	bic.w	r3, r3, #18
 8003a78:	f043 0210 	orr.w	r2, r3, #16
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003a86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3768      	adds	r7, #104	; 0x68
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000010 	.word	0x20000010
 8003a98:	431bde83 	.word	0x431bde83
 8003a9c:	50000300 	.word	0x50000300
 8003aa0:	50000100 	.word	0x50000100
 8003aa4:	fff0c007 	.word	0xfff0c007

08003aa8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 80b9 	bne.w	8003c3a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADC_Start_DMA+0x2e>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e0b4      	b.n	8003c40 <HAL_ADC_Start_DMA+0x198>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003ade:	4b5a      	ldr	r3, [pc, #360]	; (8003c48 <HAL_ADC_Start_DMA+0x1a0>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 80a0 	bne.w	8003c2c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fd15 	bl	800451c <ADC_Enable>
 8003af2:	4603      	mov	r3, r0
 8003af4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f040 8092 	bne.w	8003c22 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b12:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <HAL_ADC_Start_DMA+0x1a0>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <HAL_ADC_Start_DMA+0x80>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b26:	d115      	bne.n	8003b54 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d027      	beq.n	8003b92 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003b52:	e01e      	b.n	8003b92 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b68:	d004      	beq.n	8003b74 <HAL_ADC_Start_DMA+0xcc>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a37      	ldr	r2, [pc, #220]	; (8003c4c <HAL_ADC_Start_DMA+0x1a4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10e      	bne.n	8003b92 <HAL_ADC_Start_DMA+0xea>
 8003b74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d106      	bne.n	8003bae <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	f023 0206 	bic.w	r2, r3, #6
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
 8003bac:	e002      	b.n	8003bb4 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	4a23      	ldr	r2, [pc, #140]	; (8003c50 <HAL_ADC_Start_DMA+0x1a8>)
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <HAL_ADC_Start_DMA+0x1ac>)
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <HAL_ADC_Start_DMA+0x1b0>)
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	221c      	movs	r2, #28
 8003bda:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0210 	orr.w	r2, r2, #16
 8003bea:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3340      	adds	r3, #64	; 0x40
 8003c06:	4619      	mov	r1, r3
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f000 fea8 	bl	8004960 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0204 	orr.w	r2, r2, #4
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	e00d      	b.n	8003c3e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c2a:	e008      	b.n	8003c3e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c38:	e001      	b.n	8003c3e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	50000300 	.word	0x50000300
 8003c4c:	50000100 	.word	0x50000100
 8003c50:	08004451 	.word	0x08004451
 8003c54:	080044cb 	.word	0x080044cb
 8003c58:	080044e7 	.word	0x080044e7

08003c5c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e05f      	b.n	8003d38 <HAL_ADCEx_Calibration_Start+0xdc>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fcaf 	bl	80045e4 <ADC_Disable>
 8003c86:	4603      	mov	r3, r0
 8003c88:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d14e      	bne.n	8003d2e <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003ca4:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d107      	bne.n	8003cbc <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cba:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003cca:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003ccc:	f7ff fd0e 	bl	80036ec <HAL_GetTick>
 8003cd0:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003cd2:	e01c      	b.n	8003d0e <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003cd4:	f7ff fd0a 	bl	80036ec <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b0a      	cmp	r3, #10
 8003ce0:	d915      	bls.n	8003d0e <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cf0:	d10d      	bne.n	8003d0e <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f023 0312 	bic.w	r3, r3, #18
 8003cfa:	f043 0210 	orr.w	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e014      	b.n	8003d38 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1c:	d0da      	beq.n	8003cd4 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b09b      	sub	sp, #108	; 0x6c
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x22>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e2a5      	b.n	80042ae <HAL_ADC_ConfigChannel+0x56e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f040 8289 	bne.w	800428c <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d81c      	bhi.n	8003dbc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	461a      	mov	r2, r3
 8003d96:	231f      	movs	r3, #31
 8003d98:	4093      	lsls	r3, r2
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	4019      	ands	r1, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fa00 f203 	lsl.w	r2, r0, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
 8003dba:	e063      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b09      	cmp	r3, #9
 8003dc2:	d81e      	bhi.n	8003e02 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	3b1e      	subs	r3, #30
 8003dd8:	221f      	movs	r2, #31
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	4019      	ands	r1, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	4413      	add	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	3b1e      	subs	r3, #30
 8003df4:	fa00 f203 	lsl.w	r2, r0, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8003e00:	e040      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b0e      	cmp	r3, #14
 8003e08:	d81e      	bhi.n	8003e48 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	3b3c      	subs	r3, #60	; 0x3c
 8003e1e:	221f      	movs	r2, #31
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	4019      	ands	r1, r3
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	3b3c      	subs	r3, #60	; 0x3c
 8003e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
 8003e46:	e01d      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4413      	add	r3, r2
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	3b5a      	subs	r3, #90	; 0x5a
 8003e5c:	221f      	movs	r2, #31
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	4019      	ands	r1, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	3b5a      	subs	r3, #90	; 0x5a
 8003e78:	fa00 f203 	lsl.w	r2, r0, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f040 80e5 	bne.w	800405e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b09      	cmp	r3, #9
 8003e9a:	d91c      	bls.n	8003ed6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6999      	ldr	r1, [r3, #24]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	3b1e      	subs	r3, #30
 8003eae:	2207      	movs	r2, #7
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	4019      	ands	r1, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	6898      	ldr	r0, [r3, #8]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3b1e      	subs	r3, #30
 8003ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	619a      	str	r2, [r3, #24]
 8003ed4:	e019      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6959      	ldr	r1, [r3, #20]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	2207      	movs	r2, #7
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	4019      	ands	r1, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6898      	ldr	r0, [r3, #8]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	fa00 f203 	lsl.w	r2, r0, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	08db      	lsrs	r3, r3, #3
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d84f      	bhi.n	8003fcc <HAL_ADC_ConfigChannel+0x28c>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <HAL_ADC_ConfigChannel+0x1f4>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f67 	.word	0x08003f67
 8003f3c:	08003f89 	.word	0x08003f89
 8003f40:	08003fab 	.word	0x08003fab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f4a:	4b9e      	ldr	r3, [pc, #632]	; (80041c4 <HAL_ADC_ConfigChannel+0x484>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	0691      	lsls	r1, r2, #26
 8003f54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f56:	430a      	orrs	r2, r1
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f62:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f64:	e07e      	b.n	8004064 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f6c:	4b95      	ldr	r3, [pc, #596]	; (80041c4 <HAL_ADC_ConfigChannel+0x484>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	0691      	lsls	r1, r2, #26
 8003f76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f84:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f86:	e06d      	b.n	8004064 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f8e:	4b8d      	ldr	r3, [pc, #564]	; (80041c4 <HAL_ADC_ConfigChannel+0x484>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	0691      	lsls	r1, r2, #26
 8003f98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fa6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003fa8:	e05c      	b.n	8004064 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fb0:	4b84      	ldr	r3, [pc, #528]	; (80041c4 <HAL_ADC_ConfigChannel+0x484>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	0691      	lsls	r1, r2, #26
 8003fba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fc8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003fca:	e04b      	b.n	8004064 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	069b      	lsls	r3, r3, #26
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d107      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	069b      	lsls	r3, r3, #26
 8004000:	429a      	cmp	r2, r3
 8004002:	d107      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004012:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800401a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	069b      	lsls	r3, r3, #26
 8004024:	429a      	cmp	r2, r3
 8004026:	d107      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004036:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	069b      	lsls	r3, r3, #26
 8004048:	429a      	cmp	r2, r3
 800404a:	d10a      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800405a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800405c:	e001      	b.n	8004062 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004062:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d108      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x344>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x344>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_ADC_ConfigChannel+0x346>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	f040 810b 	bne.w	80042a2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d00f      	beq.n	80040b4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43da      	mvns	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	400a      	ands	r2, r1
 80040ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80040b2:	e049      	b.n	8004148 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	409a      	lsls	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b09      	cmp	r3, #9
 80040d4:	d91c      	bls.n	8004110 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6999      	ldr	r1, [r3, #24]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	3b1b      	subs	r3, #27
 80040e8:	2207      	movs	r2, #7
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	4019      	ands	r1, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6898      	ldr	r0, [r3, #8]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4413      	add	r3, r2
 8004100:	3b1b      	subs	r3, #27
 8004102:	fa00 f203 	lsl.w	r2, r0, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	619a      	str	r2, [r3, #24]
 800410e:	e01b      	b.n	8004148 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6959      	ldr	r1, [r3, #20]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	2207      	movs	r2, #7
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	4019      	ands	r1, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	6898      	ldr	r0, [r3, #8]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	fa00 f203 	lsl.w	r2, r0, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <HAL_ADC_ConfigChannel+0x488>)
 800414a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b10      	cmp	r3, #16
 8004152:	d105      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800415c:	2b00      	cmp	r3, #0
 800415e:	d015      	beq.n	800418c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004164:	2b11      	cmp	r3, #17
 8004166:	d105      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004178:	2b12      	cmp	r3, #18
 800417a:	f040 8092 	bne.w	80042a2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800417e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004186:	2b00      	cmp	r3, #0
 8004188:	f040 808b 	bne.w	80042a2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004194:	d102      	bne.n	800419c <HAL_ADC_ConfigChannel+0x45c>
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <HAL_ADC_ConfigChannel+0x48c>)
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e002      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x462>
 800419c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80041a0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d10f      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x490>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d108      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x490>
 80041be:	2301      	movs	r3, #1
 80041c0:	e007      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x492>
 80041c2:	bf00      	nop
 80041c4:	83fff000 	.word	0x83fff000
 80041c8:	50000300 	.word	0x50000300
 80041cc:	50000100 	.word	0x50000100
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d150      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x4b8>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x4b8>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_ADC_ConfigChannel+0x4ba>
 80041f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d13c      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b10      	cmp	r3, #16
 8004204:	d11d      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x502>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800420e:	d118      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <HAL_ADC_ConfigChannel+0x57c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <HAL_ADC_ConfigChannel+0x580>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	0c9a      	lsrs	r2, r3, #18
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004232:	e002      	b.n	800423a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	3b01      	subs	r3, #1
 8004238:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f9      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004240:	e02e      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b11      	cmp	r3, #17
 8004248:	d10b      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x522>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004252:	d106      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800425c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004260:	e01e      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b12      	cmp	r3, #18
 8004268:	d11a      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800426a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004274:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004276:	e013      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800428a:	e00a      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800429e:	e000      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80042aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	376c      	adds	r7, #108	; 0x6c
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000010 	.word	0x20000010
 80042c0:	431bde83 	.word	0x431bde83

080042c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b099      	sub	sp, #100	; 0x64
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042dc:	d102      	bne.n	80042e4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80042de:	4b5a      	ldr	r3, [pc, #360]	; (8004448 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	e002      	b.n	80042ea <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80042e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042e8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0a2      	b.n	800443a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80042fe:	2302      	movs	r3, #2
 8004300:	e09b      	b.n	800443a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d17f      	bne.n	8004418 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d179      	bne.n	8004418 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004324:	4b49      	ldr	r3, [pc, #292]	; (800444c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8004326:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d040      	beq.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004342:	035b      	lsls	r3, r3, #13
 8004344:	430b      	orrs	r3, r1
 8004346:	431a      	orrs	r2, r3
 8004348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800434a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d108      	bne.n	800436c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d15c      	bne.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d107      	bne.n	800438e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800438e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004390:	2b00      	cmp	r3, #0
 8004392:	d14b      	bne.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800439c:	f023 030f 	bic.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	6811      	ldr	r1, [r2, #0]
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	6892      	ldr	r2, [r2, #8]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	431a      	orrs	r2, r3
 80043ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ae:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80043b0:	e03c      	b.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043bc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d108      	bne.n	80043de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80043de:	2300      	movs	r3, #0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d123      	bne.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004400:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004402:	2b00      	cmp	r3, #0
 8004404:	d112      	bne.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800440e:	f023 030f 	bic.w	r3, r3, #15
 8004412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004414:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004416:	e009      	b.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800442a:	e000      	b.n	800442e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800442c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800443a:	4618      	mov	r0, r3
 800443c:	3764      	adds	r7, #100	; 0x64
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	50000100 	.word	0x50000100
 800444c:	50000300 	.word	0x50000300

08004450 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004466:	2b00      	cmp	r3, #0
 8004468:	d126      	bne.n	80044b8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004480:	2b00      	cmp	r3, #0
 8004482:	d115      	bne.n	80044b0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004488:	2b00      	cmp	r3, #0
 800448a:	d111      	bne.n	80044b0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d105      	bne.n	80044b0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f043 0201 	orr.w	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff f949 	bl	8003748 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80044b6:	e004      	b.n	80044c2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff f93f 	bl	800375c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	f043 0204 	orr.w	r2, r3, #4
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff f92f 	bl	8003770 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d108      	bne.n	8004548 <ADC_Enable+0x2c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <ADC_Enable+0x2c>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <ADC_Enable+0x2e>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d143      	bne.n	80045d6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <ADC_Enable+0xc4>)
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00d      	beq.n	8004578 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	f043 0210 	orr.w	r2, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	f043 0201 	orr.w	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e02f      	b.n	80045d8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004588:	f7ff f8b0 	bl	80036ec <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800458e:	e01b      	b.n	80045c8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004590:	f7ff f8ac 	bl	80036ec <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d914      	bls.n	80045c8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d00d      	beq.n	80045c8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f043 0210 	orr.w	r2, r3, #16
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e007      	b.n	80045d8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d1dc      	bne.n	8004590 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	8000003f 	.word	0x8000003f

080045e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d108      	bne.n	8004610 <ADC_Disable+0x2c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <ADC_Disable+0x2c>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <ADC_Disable+0x2e>
 8004610:	2300      	movs	r3, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d047      	beq.n	80046a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 030d 	and.w	r3, r3, #13
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10f      	bne.n	8004644 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0202 	orr.w	r2, r2, #2
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2203      	movs	r2, #3
 800463a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800463c:	f7ff f856 	bl	80036ec <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004642:	e029      	b.n	8004698 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f043 0210 	orr.w	r2, r3, #16
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004654:	f043 0201 	orr.w	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e023      	b.n	80046a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004660:	f7ff f844 	bl	80036ec <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d914      	bls.n	8004698 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	d10d      	bne.n	8004698 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	f043 0210 	orr.w	r2, r3, #16
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468c:	f043 0201 	orr.w	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e007      	b.n	80046a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d0dc      	beq.n	8004660 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <__NVIC_SetPriorityGrouping+0x44>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046cc:	4013      	ands	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046e2:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <__NVIC_SetPriorityGrouping+0x44>)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	60d3      	str	r3, [r2, #12]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	e000ed00 	.word	0xe000ed00

080046f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <__NVIC_GetPriorityGrouping+0x18>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	0a1b      	lsrs	r3, r3, #8
 8004702:	f003 0307 	and.w	r3, r3, #7
}
 8004706:	4618      	mov	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800471e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004722:	2b00      	cmp	r3, #0
 8004724:	db0b      	blt.n	800473e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	f003 021f 	and.w	r2, r3, #31
 800472c:	4907      	ldr	r1, [pc, #28]	; (800474c <__NVIC_EnableIRQ+0x38>)
 800472e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	2001      	movs	r0, #1
 8004736:	fa00 f202 	lsl.w	r2, r0, r2
 800473a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	e000e100 	.word	0xe000e100

08004750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	6039      	str	r1, [r7, #0]
 800475a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800475c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004760:	2b00      	cmp	r3, #0
 8004762:	db0a      	blt.n	800477a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	b2da      	uxtb	r2, r3
 8004768:	490c      	ldr	r1, [pc, #48]	; (800479c <__NVIC_SetPriority+0x4c>)
 800476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476e:	0112      	lsls	r2, r2, #4
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	440b      	add	r3, r1
 8004774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004778:	e00a      	b.n	8004790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	4908      	ldr	r1, [pc, #32]	; (80047a0 <__NVIC_SetPriority+0x50>)
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	3b04      	subs	r3, #4
 8004788:	0112      	lsls	r2, r2, #4
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	440b      	add	r3, r1
 800478e:	761a      	strb	r2, [r3, #24]
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	e000e100 	.word	0xe000e100
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b089      	sub	sp, #36	; 0x24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f1c3 0307 	rsb	r3, r3, #7
 80047be:	2b04      	cmp	r3, #4
 80047c0:	bf28      	it	cs
 80047c2:	2304      	movcs	r3, #4
 80047c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	3304      	adds	r3, #4
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d902      	bls.n	80047d4 <NVIC_EncodePriority+0x30>
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	3b03      	subs	r3, #3
 80047d2:	e000      	b.n	80047d6 <NVIC_EncodePriority+0x32>
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d8:	f04f 32ff 	mov.w	r2, #4294967295
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43da      	mvns	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	401a      	ands	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047ec:	f04f 31ff 	mov.w	r1, #4294967295
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	43d9      	mvns	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047fc:	4313      	orrs	r3, r2
         );
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3724      	adds	r7, #36	; 0x24
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3b01      	subs	r3, #1
 8004818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800481c:	d301      	bcc.n	8004822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800481e:	2301      	movs	r3, #1
 8004820:	e00f      	b.n	8004842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004822:	4a0a      	ldr	r2, [pc, #40]	; (800484c <SysTick_Config+0x40>)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3b01      	subs	r3, #1
 8004828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800482a:	210f      	movs	r1, #15
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	f7ff ff8e 	bl	8004750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <SysTick_Config+0x40>)
 8004836:	2200      	movs	r2, #0
 8004838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <SysTick_Config+0x40>)
 800483c:	2207      	movs	r2, #7
 800483e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	e000e010 	.word	0xe000e010

08004850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ff29 	bl	80046b0 <__NVIC_SetPriorityGrouping>
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b086      	sub	sp, #24
 800486a:	af00      	add	r7, sp, #0
 800486c:	4603      	mov	r3, r0
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
 8004872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004878:	f7ff ff3e 	bl	80046f8 <__NVIC_GetPriorityGrouping>
 800487c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	6978      	ldr	r0, [r7, #20]
 8004884:	f7ff ff8e 	bl	80047a4 <NVIC_EncodePriority>
 8004888:	4602      	mov	r2, r0
 800488a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff ff5d 	bl	8004750 <__NVIC_SetPriority>
}
 8004896:	bf00      	nop
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	4603      	mov	r3, r0
 80048a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff ff31 	bl	8004714 <__NVIC_EnableIRQ>
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff ffa2 	bl	800480c <SysTick_Config>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e037      	b.n	8004958 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80048fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004902:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800490c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9b8 	bl	8004cb0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}  
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_DMA_Start_IT+0x20>
 800497c:	2302      	movs	r3, #2
 800497e:	e04a      	b.n	8004a16 <HAL_DMA_Start_IT+0xb6>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800498e:	2b01      	cmp	r3, #1
 8004990:	d13a      	bne.n	8004a08 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2202      	movs	r2, #2
 8004996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f94b 	bl	8004c52 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 020e 	orr.w	r2, r2, #14
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e00f      	b.n	80049f6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 020a 	orr.w	r2, r2, #10
 80049e4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0204 	bic.w	r2, r2, #4
 80049f4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e005      	b.n	8004a14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
 8004a12:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d008      	beq.n	8004a42 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2204      	movs	r2, #4
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e020      	b.n	8004a84 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 020e 	bic.w	r2, r2, #14
 8004a50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d005      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
 8004ab0:	e027      	b.n	8004b02 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 020e 	bic.w	r2, r2, #14
 8004ac0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
    } 
  }
  return status;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	2204      	movs	r2, #4
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d024      	beq.n	8004b7e <HAL_DMA_IRQHandler+0x72>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01f      	beq.n	8004b7e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d107      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0204 	bic.w	r2, r2, #4
 8004b5a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	2104      	movs	r1, #4
 8004b66:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d06a      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b7c:	e065      	b.n	8004c4a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	2202      	movs	r2, #2
 8004b84:	409a      	lsls	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d02c      	beq.n	8004be8 <HAL_DMA_IRQHandler+0xdc>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d027      	beq.n	8004be8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 020a 	bic.w	r2, r2, #10
 8004bb4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bcc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d035      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004be6:	e030      	b.n	8004c4a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	2208      	movs	r2, #8
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d028      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x13e>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d023      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 020e 	bic.w	r2, r2, #14
 8004c10:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c20:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
    }
  }
}  
 8004c48:	e7ff      	b.n	8004c4a <HAL_DMA_IRQHandler+0x13e>
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c68:	2101      	movs	r1, #1
 8004c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c6e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d108      	bne.n	8004c92 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c90:	e007      	b.n	8004ca2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	60da      	str	r2, [r3, #12]
}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <DMA_CalcBaseAndBitshift+0x34>)
 8004cc0:	4413      	add	r3, r2
 8004cc2:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <DMA_CalcBaseAndBitshift+0x38>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	009a      	lsls	r2, r3, #2
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a06      	ldr	r2, [pc, #24]	; (8004cec <DMA_CalcBaseAndBitshift+0x3c>)
 8004cd4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	bffdfff8 	.word	0xbffdfff8
 8004ce8:	cccccccd 	.word	0xcccccccd
 8004cec:	40020000 	.word	0x40020000

08004cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cfe:	e14e      	b.n	8004f9e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	2101      	movs	r1, #1
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8140 	beq.w	8004f98 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d005      	beq.n	8004d30 <HAL_GPIO_Init+0x40>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d130      	bne.n	8004d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43db      	mvns	r3, r3
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4013      	ands	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d66:	2201      	movs	r2, #1
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	f003 0201 	and.w	r2, r3, #1
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d017      	beq.n	8004dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	2203      	movs	r2, #3
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4013      	ands	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d123      	bne.n	8004e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	08da      	lsrs	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3208      	adds	r2, #8
 8004de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	220f      	movs	r2, #15
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43db      	mvns	r3, r3
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	08da      	lsrs	r2, r3, #3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3208      	adds	r2, #8
 8004e1c:	6939      	ldr	r1, [r7, #16]
 8004e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43db      	mvns	r3, r3
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4013      	ands	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 0203 	and.w	r2, r3, #3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 809a 	beq.w	8004f98 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e64:	4b55      	ldr	r3, [pc, #340]	; (8004fbc <HAL_GPIO_Init+0x2cc>)
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	4a54      	ldr	r2, [pc, #336]	; (8004fbc <HAL_GPIO_Init+0x2cc>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6193      	str	r3, [r2, #24]
 8004e70:	4b52      	ldr	r3, [pc, #328]	; (8004fbc <HAL_GPIO_Init+0x2cc>)
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e7c:	4a50      	ldr	r2, [pc, #320]	; (8004fc0 <HAL_GPIO_Init+0x2d0>)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	089b      	lsrs	r3, r3, #2
 8004e82:	3302      	adds	r3, #2
 8004e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	220f      	movs	r2, #15
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ea6:	d013      	beq.n	8004ed0 <HAL_GPIO_Init+0x1e0>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a46      	ldr	r2, [pc, #280]	; (8004fc4 <HAL_GPIO_Init+0x2d4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00d      	beq.n	8004ecc <HAL_GPIO_Init+0x1dc>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a45      	ldr	r2, [pc, #276]	; (8004fc8 <HAL_GPIO_Init+0x2d8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d007      	beq.n	8004ec8 <HAL_GPIO_Init+0x1d8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a44      	ldr	r2, [pc, #272]	; (8004fcc <HAL_GPIO_Init+0x2dc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_GPIO_Init+0x1d4>
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e006      	b.n	8004ed2 <HAL_GPIO_Init+0x1e2>
 8004ec4:	2305      	movs	r3, #5
 8004ec6:	e004      	b.n	8004ed2 <HAL_GPIO_Init+0x1e2>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e002      	b.n	8004ed2 <HAL_GPIO_Init+0x1e2>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <HAL_GPIO_Init+0x1e2>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	f002 0203 	and.w	r2, r2, #3
 8004ed8:	0092      	lsls	r2, r2, #2
 8004eda:	4093      	lsls	r3, r2
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ee2:	4937      	ldr	r1, [pc, #220]	; (8004fc0 <HAL_GPIO_Init+0x2d0>)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	3302      	adds	r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ef0:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <HAL_GPIO_Init+0x2e0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4013      	ands	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f14:	4a2e      	ldr	r2, [pc, #184]	; (8004fd0 <HAL_GPIO_Init+0x2e0>)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f1a:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <HAL_GPIO_Init+0x2e0>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	43db      	mvns	r3, r3
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f3e:	4a24      	ldr	r2, [pc, #144]	; (8004fd0 <HAL_GPIO_Init+0x2e0>)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f44:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <HAL_GPIO_Init+0x2e0>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4013      	ands	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f68:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <HAL_GPIO_Init+0x2e0>)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f6e:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <HAL_GPIO_Init+0x2e0>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	43db      	mvns	r3, r3
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f92:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <HAL_GPIO_Init+0x2e0>)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f47f aea9 	bne.w	8004d00 <HAL_GPIO_Init+0x10>
  }
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	48000400 	.word	0x48000400
 8004fc8:	48000800 	.word	0x48000800
 8004fcc:	48000c00 	.word	0x48000c00
 8004fd0:	40010400 	.word	0x40010400

08004fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	887b      	ldrh	r3, [r7, #2]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
 8004ff0:	e001      	b.n	8004ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e081      	b.n	800511a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fe f808 	bl	8003040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2224      	movs	r2, #36	; 0x24
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005054:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005064:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d107      	bne.n	800507e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	e006      	b.n	800508c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800508a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d104      	bne.n	800509e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800509c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69d9      	ldr	r1, [r3, #28]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1a      	ldr	r2, [r3, #32]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b20      	cmp	r3, #32
 8005136:	d138      	bne.n	80051aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005142:	2302      	movs	r3, #2
 8005144:	e032      	b.n	80051ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2224      	movs	r2, #36	; 0x24
 8005152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005174:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6819      	ldr	r1, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e000      	b.n	80051ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
  }
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d139      	bne.n	8005242 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051d8:	2302      	movs	r3, #2
 80051da:	e033      	b.n	8005244 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	; 0x24
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800520a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0201 	orr.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005256:	af00      	add	r7, sp, #0
 8005258:	1d3b      	adds	r3, r7, #4
 800525a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800525c:	1d3b      	adds	r3, r7, #4
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d102      	bne.n	800526a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	f000 bef4 	b.w	8006052 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800526a:	1d3b      	adds	r3, r7, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 816a 	beq.w	800554e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800527a:	4bb3      	ldr	r3, [pc, #716]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b04      	cmp	r3, #4
 8005284:	d00c      	beq.n	80052a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005286:	4bb0      	ldr	r3, [pc, #704]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b08      	cmp	r3, #8
 8005290:	d159      	bne.n	8005346 <HAL_RCC_OscConfig+0xf6>
 8005292:	4bad      	ldr	r3, [pc, #692]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529e:	d152      	bne.n	8005346 <HAL_RCC_OscConfig+0xf6>
 80052a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80052ac:	fa93 f3a3 	rbit	r3, r3
 80052b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b8:	fab3 f383 	clz	r3, r3
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d102      	bne.n	80052d2 <HAL_RCC_OscConfig+0x82>
 80052cc:	4b9e      	ldr	r3, [pc, #632]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	e015      	b.n	80052fe <HAL_RCC_OscConfig+0xae>
 80052d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80052de:	fa93 f3a3 	rbit	r3, r3
 80052e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80052e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80052ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80052f2:	fa93 f3a3 	rbit	r3, r3
 80052f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80052fa:	4b93      	ldr	r3, [pc, #588]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005302:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005306:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800530a:	fa92 f2a2 	rbit	r2, r2
 800530e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005312:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005316:	fab2 f282 	clz	r2, r2
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	f042 0220 	orr.w	r2, r2, #32
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	f002 021f 	and.w	r2, r2, #31
 8005326:	2101      	movs	r1, #1
 8005328:	fa01 f202 	lsl.w	r2, r1, r2
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 810c 	beq.w	800554c <HAL_RCC_OscConfig+0x2fc>
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 8106 	bne.w	800554c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f000 be86 	b.w	8006052 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005346:	1d3b      	adds	r3, r7, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d106      	bne.n	8005360 <HAL_RCC_OscConfig+0x110>
 8005352:	4b7d      	ldr	r3, [pc, #500]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a7c      	ldr	r2, [pc, #496]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 8005358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	e030      	b.n	80053c2 <HAL_RCC_OscConfig+0x172>
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10c      	bne.n	8005384 <HAL_RCC_OscConfig+0x134>
 800536a:	4b77      	ldr	r3, [pc, #476]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a76      	ldr	r2, [pc, #472]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 8005370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	4b74      	ldr	r3, [pc, #464]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a73      	ldr	r2, [pc, #460]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 800537c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	e01e      	b.n	80053c2 <HAL_RCC_OscConfig+0x172>
 8005384:	1d3b      	adds	r3, r7, #4
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800538e:	d10c      	bne.n	80053aa <HAL_RCC_OscConfig+0x15a>
 8005390:	4b6d      	ldr	r3, [pc, #436]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a6c      	ldr	r2, [pc, #432]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 8005396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	4b6a      	ldr	r3, [pc, #424]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a69      	ldr	r2, [pc, #420]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 80053a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	e00b      	b.n	80053c2 <HAL_RCC_OscConfig+0x172>
 80053aa:	4b67      	ldr	r3, [pc, #412]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a66      	ldr	r2, [pc, #408]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 80053b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b64      	ldr	r3, [pc, #400]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a63      	ldr	r2, [pc, #396]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 80053bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053c2:	4b61      	ldr	r3, [pc, #388]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	f023 020f 	bic.w	r2, r3, #15
 80053ca:	1d3b      	adds	r3, r7, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	495d      	ldr	r1, [pc, #372]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d059      	beq.n	8005494 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fe f984 	bl	80036ec <HAL_GetTick>
 80053e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e8:	e00a      	b.n	8005400 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ea:	f7fe f97f 	bl	80036ec <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	; 0x64
 80053f8:	d902      	bls.n	8005400 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	f000 be29 	b.w	8006052 <HAL_RCC_OscConfig+0xe02>
 8005400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005404:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005408:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800540c:	fa93 f3a3 	rbit	r3, r3
 8005410:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005414:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005418:	fab3 f383 	clz	r3, r3
 800541c:	b2db      	uxtb	r3, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d102      	bne.n	8005432 <HAL_RCC_OscConfig+0x1e2>
 800542c:	4b46      	ldr	r3, [pc, #280]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	e015      	b.n	800545e <HAL_RCC_OscConfig+0x20e>
 8005432:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005436:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800543e:	fa93 f3a3 	rbit	r3, r3
 8005442:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800544a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800544e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005452:	fa93 f3a3 	rbit	r3, r3
 8005456:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800545a:	4b3b      	ldr	r3, [pc, #236]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005462:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005466:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800546a:	fa92 f2a2 	rbit	r2, r2
 800546e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005472:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005476:	fab2 f282 	clz	r2, r2
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	f042 0220 	orr.w	r2, r2, #32
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	f002 021f 	and.w	r2, r2, #31
 8005486:	2101      	movs	r1, #1
 8005488:	fa01 f202 	lsl.w	r2, r1, r2
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0ab      	beq.n	80053ea <HAL_RCC_OscConfig+0x19a>
 8005492:	e05c      	b.n	800554e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fe f92a 	bl	80036ec <HAL_GetTick>
 8005498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549c:	e00a      	b.n	80054b4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800549e:	f7fe f925 	bl	80036ec <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	; 0x64
 80054ac:	d902      	bls.n	80054b4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	f000 bdcf 	b.w	8006052 <HAL_RCC_OscConfig+0xe02>
 80054b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80054c0:	fa93 f3a3 	rbit	r3, r3
 80054c4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80054c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054cc:	fab3 f383 	clz	r3, r3
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d102      	bne.n	80054e6 <HAL_RCC_OscConfig+0x296>
 80054e0:	4b19      	ldr	r3, [pc, #100]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	e015      	b.n	8005512 <HAL_RCC_OscConfig+0x2c2>
 80054e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80054f2:	fa93 f3a3 	rbit	r3, r3
 80054f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80054fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005502:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005506:	fa93 f3a3 	rbit	r3, r3
 800550a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800550e:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <HAL_RCC_OscConfig+0x2f8>)
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005516:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800551a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800551e:	fa92 f2a2 	rbit	r2, r2
 8005522:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005526:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800552a:	fab2 f282 	clz	r2, r2
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	f042 0220 	orr.w	r2, r2, #32
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	f002 021f 	and.w	r2, r2, #31
 800553a:	2101      	movs	r1, #1
 800553c:	fa01 f202 	lsl.w	r2, r1, r2
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1ab      	bne.n	800549e <HAL_RCC_OscConfig+0x24e>
 8005546:	e002      	b.n	800554e <HAL_RCC_OscConfig+0x2fe>
 8005548:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800554c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 816f 	beq.w	800583c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800555e:	4bd0      	ldr	r3, [pc, #832]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00b      	beq.n	8005582 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800556a:	4bcd      	ldr	r3, [pc, #820]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 030c 	and.w	r3, r3, #12
 8005572:	2b08      	cmp	r3, #8
 8005574:	d16c      	bne.n	8005650 <HAL_RCC_OscConfig+0x400>
 8005576:	4bca      	ldr	r3, [pc, #808]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d166      	bne.n	8005650 <HAL_RCC_OscConfig+0x400>
 8005582:	2302      	movs	r3, #2
 8005584:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005588:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800558c:	fa93 f3a3 	rbit	r3, r3
 8005590:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005594:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005598:	fab3 f383 	clz	r3, r3
 800559c:	b2db      	uxtb	r3, r3
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d102      	bne.n	80055b2 <HAL_RCC_OscConfig+0x362>
 80055ac:	4bbc      	ldr	r3, [pc, #752]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	e013      	b.n	80055da <HAL_RCC_OscConfig+0x38a>
 80055b2:	2302      	movs	r3, #2
 80055b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80055bc:	fa93 f3a3 	rbit	r3, r3
 80055c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80055c4:	2302      	movs	r3, #2
 80055c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80055ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80055ce:	fa93 f3a3 	rbit	r3, r3
 80055d2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80055d6:	4bb2      	ldr	r3, [pc, #712]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	2202      	movs	r2, #2
 80055dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80055e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80055e4:	fa92 f2a2 	rbit	r2, r2
 80055e8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80055ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80055f0:	fab2 f282 	clz	r2, r2
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	f042 0220 	orr.w	r2, r2, #32
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	f002 021f 	and.w	r2, r2, #31
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f202 	lsl.w	r2, r1, r2
 8005606:	4013      	ands	r3, r2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_RCC_OscConfig+0x3cc>
 800560c:	1d3b      	adds	r3, r7, #4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d002      	beq.n	800561c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f000 bd1b 	b.w	8006052 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561c:	4ba0      	ldr	r3, [pc, #640]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	21f8      	movs	r1, #248	; 0xf8
 800562c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005630:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005634:	fa91 f1a1 	rbit	r1, r1
 8005638:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800563c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005640:	fab1 f181 	clz	r1, r1
 8005644:	b2c9      	uxtb	r1, r1
 8005646:	408b      	lsls	r3, r1
 8005648:	4995      	ldr	r1, [pc, #596]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 800564a:	4313      	orrs	r3, r2
 800564c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564e:	e0f5      	b.n	800583c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005650:	1d3b      	adds	r3, r7, #4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 8085 	beq.w	8005766 <HAL_RCC_OscConfig+0x516>
 800565c:	2301      	movs	r3, #1
 800565e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005666:	fa93 f3a3 	rbit	r3, r3
 800566a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800566e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005672:	fab3 f383 	clz	r3, r3
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800567c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	461a      	mov	r2, r3
 8005684:	2301      	movs	r3, #1
 8005686:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005688:	f7fe f830 	bl	80036ec <HAL_GetTick>
 800568c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005690:	e00a      	b.n	80056a8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005692:	f7fe f82b 	bl	80036ec <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d902      	bls.n	80056a8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	f000 bcd5 	b.w	8006052 <HAL_RCC_OscConfig+0xe02>
 80056a8:	2302      	movs	r3, #2
 80056aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80056b2:	fa93 f3a3 	rbit	r3, r3
 80056b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80056ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056be:	fab3 f383 	clz	r3, r3
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d102      	bne.n	80056d8 <HAL_RCC_OscConfig+0x488>
 80056d2:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	e013      	b.n	8005700 <HAL_RCC_OscConfig+0x4b0>
 80056d8:	2302      	movs	r3, #2
 80056da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80056e2:	fa93 f3a3 	rbit	r3, r3
 80056e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80056ea:	2302      	movs	r3, #2
 80056ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80056f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80056f4:	fa93 f3a3 	rbit	r3, r3
 80056f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80056fc:	4b68      	ldr	r3, [pc, #416]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	2202      	movs	r2, #2
 8005702:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005706:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800570a:	fa92 f2a2 	rbit	r2, r2
 800570e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005712:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005716:	fab2 f282 	clz	r2, r2
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	f042 0220 	orr.w	r2, r2, #32
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	f002 021f 	and.w	r2, r2, #31
 8005726:	2101      	movs	r1, #1
 8005728:	fa01 f202 	lsl.w	r2, r1, r2
 800572c:	4013      	ands	r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0af      	beq.n	8005692 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005732:	4b5b      	ldr	r3, [pc, #364]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	21f8      	movs	r1, #248	; 0xf8
 8005742:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005746:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800574a:	fa91 f1a1 	rbit	r1, r1
 800574e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005752:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005756:	fab1 f181 	clz	r1, r1
 800575a:	b2c9      	uxtb	r1, r1
 800575c:	408b      	lsls	r3, r1
 800575e:	4950      	ldr	r1, [pc, #320]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 8005760:	4313      	orrs	r3, r2
 8005762:	600b      	str	r3, [r1, #0]
 8005764:	e06a      	b.n	800583c <HAL_RCC_OscConfig+0x5ec>
 8005766:	2301      	movs	r3, #1
 8005768:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005770:	fa93 f3a3 	rbit	r3, r3
 8005774:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005778:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800577c:	fab3 f383 	clz	r3, r3
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005786:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005792:	f7fd ffab 	bl	80036ec <HAL_GetTick>
 8005796:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800579c:	f7fd ffa6 	bl	80036ec <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d902      	bls.n	80057b2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	f000 bc50 	b.w	8006052 <HAL_RCC_OscConfig+0xe02>
 80057b2:	2302      	movs	r3, #2
 80057b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80057bc:	fa93 f3a3 	rbit	r3, r3
 80057c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80057c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c8:	fab3 f383 	clz	r3, r3
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d102      	bne.n	80057e2 <HAL_RCC_OscConfig+0x592>
 80057dc:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	e013      	b.n	800580a <HAL_RCC_OscConfig+0x5ba>
 80057e2:	2302      	movs	r3, #2
 80057e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057ec:	fa93 f3a3 	rbit	r3, r3
 80057f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80057f4:	2302      	movs	r3, #2
 80057f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80057fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057fe:	fa93 f3a3 	rbit	r3, r3
 8005802:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005806:	4b26      	ldr	r3, [pc, #152]	; (80058a0 <HAL_RCC_OscConfig+0x650>)
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2202      	movs	r2, #2
 800580c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005810:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005814:	fa92 f2a2 	rbit	r2, r2
 8005818:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800581c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005820:	fab2 f282 	clz	r2, r2
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	f042 0220 	orr.w	r2, r2, #32
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	f002 021f 	and.w	r2, r2, #31
 8005830:	2101      	movs	r1, #1
 8005832:	fa01 f202 	lsl.w	r2, r1, r2
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1af      	bne.n	800579c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800583c:	1d3b      	adds	r3, r7, #4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80da 	beq.w	8005a00 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800584c:	1d3b      	adds	r3, r7, #4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d069      	beq.n	800592a <HAL_RCC_OscConfig+0x6da>
 8005856:	2301      	movs	r3, #1
 8005858:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005860:	fa93 f3a3 	rbit	r3, r3
 8005864:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800586c:	fab3 f383 	clz	r3, r3
 8005870:	b2db      	uxtb	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCC_OscConfig+0x654>)
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	461a      	mov	r2, r3
 800587c:	2301      	movs	r3, #1
 800587e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005880:	f7fd ff34 	bl	80036ec <HAL_GetTick>
 8005884:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005888:	e00e      	b.n	80058a8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800588a:	f7fd ff2f 	bl	80036ec <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d906      	bls.n	80058a8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e3d9      	b.n	8006052 <HAL_RCC_OscConfig+0xe02>
 800589e:	bf00      	nop
 80058a0:	40021000 	.word	0x40021000
 80058a4:	10908120 	.word	0x10908120
 80058a8:	2302      	movs	r3, #2
 80058aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058b2:	fa93 f3a3 	rbit	r3, r3
 80058b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80058be:	2202      	movs	r2, #2
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	fa93 f2a3 	rbit	r2, r3
 80058cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80058d6:	2202      	movs	r2, #2
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	fa93 f2a3 	rbit	r2, r3
 80058e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80058e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ea:	4ba5      	ldr	r3, [pc, #660]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 80058ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80058f2:	2102      	movs	r1, #2
 80058f4:	6019      	str	r1, [r3, #0]
 80058f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	fa93 f1a3 	rbit	r1, r3
 8005900:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005904:	6019      	str	r1, [r3, #0]
  return result;
 8005906:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	2101      	movs	r1, #1
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0b0      	beq.n	800588a <HAL_RCC_OscConfig+0x63a>
 8005928:	e06a      	b.n	8005a00 <HAL_RCC_OscConfig+0x7b0>
 800592a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005932:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	fa93 f2a3 	rbit	r2, r3
 800593c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005940:	601a      	str	r2, [r3, #0]
  return result;
 8005942:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005946:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005948:	fab3 f383 	clz	r3, r3
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	4b8c      	ldr	r3, [pc, #560]	; (8005b84 <HAL_RCC_OscConfig+0x934>)
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	461a      	mov	r2, r3
 8005958:	2300      	movs	r3, #0
 800595a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595c:	f7fd fec6 	bl	80036ec <HAL_GetTick>
 8005960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005964:	e009      	b.n	800597a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005966:	f7fd fec1 	bl	80036ec <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e36b      	b.n	8006052 <HAL_RCC_OscConfig+0xe02>
 800597a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800597e:	2202      	movs	r2, #2
 8005980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005982:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	fa93 f2a3 	rbit	r2, r3
 800598c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005996:	2202      	movs	r2, #2
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	fa93 f2a3 	rbit	r2, r3
 80059a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80059ae:	2202      	movs	r2, #2
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	fa93 f2a3 	rbit	r2, r3
 80059bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80059c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c2:	4b6f      	ldr	r3, [pc, #444]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 80059c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80059ca:	2102      	movs	r1, #2
 80059cc:	6019      	str	r1, [r3, #0]
 80059ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	fa93 f1a3 	rbit	r1, r3
 80059d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80059dc:	6019      	str	r1, [r3, #0]
  return result;
 80059de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	fab3 f383 	clz	r3, r3
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	2101      	movs	r1, #1
 80059f6:	fa01 f303 	lsl.w	r3, r1, r3
 80059fa:	4013      	ands	r3, r2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1b2      	bne.n	8005966 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a00:	1d3b      	adds	r3, r7, #4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8158 	beq.w	8005cc0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a16:	4b5a      	ldr	r3, [pc, #360]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d112      	bne.n	8005a48 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a22:	4b57      	ldr	r3, [pc, #348]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	4a56      	ldr	r2, [pc, #344]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2c:	61d3      	str	r3, [r2, #28]
 8005a2e:	4b54      	ldr	r3, [pc, #336]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005a36:	f107 0308 	add.w	r3, r7, #8
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f107 0308 	add.w	r3, r7, #8
 8005a40:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a48:	4b4f      	ldr	r3, [pc, #316]	; (8005b88 <HAL_RCC_OscConfig+0x938>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d11a      	bne.n	8005a8a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a54:	4b4c      	ldr	r3, [pc, #304]	; (8005b88 <HAL_RCC_OscConfig+0x938>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a4b      	ldr	r2, [pc, #300]	; (8005b88 <HAL_RCC_OscConfig+0x938>)
 8005a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a5e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a60:	f7fd fe44 	bl	80036ec <HAL_GetTick>
 8005a64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a68:	e009      	b.n	8005a7e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6a:	f7fd fe3f 	bl	80036ec <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	; 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e2e9      	b.n	8006052 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7e:	4b42      	ldr	r3, [pc, #264]	; (8005b88 <HAL_RCC_OscConfig+0x938>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0ef      	beq.n	8005a6a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a8a:	1d3b      	adds	r3, r7, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d106      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x852>
 8005a94:	4b3a      	ldr	r3, [pc, #232]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	4a39      	ldr	r2, [pc, #228]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005a9a:	f043 0301 	orr.w	r3, r3, #1
 8005a9e:	6213      	str	r3, [r2, #32]
 8005aa0:	e02f      	b.n	8005b02 <HAL_RCC_OscConfig+0x8b2>
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10c      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x876>
 8005aac:	4b34      	ldr	r3, [pc, #208]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	4a33      	ldr	r2, [pc, #204]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005ab2:	f023 0301 	bic.w	r3, r3, #1
 8005ab6:	6213      	str	r3, [r2, #32]
 8005ab8:	4b31      	ldr	r3, [pc, #196]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	4a30      	ldr	r2, [pc, #192]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005abe:	f023 0304 	bic.w	r3, r3, #4
 8005ac2:	6213      	str	r3, [r2, #32]
 8005ac4:	e01d      	b.n	8005b02 <HAL_RCC_OscConfig+0x8b2>
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b05      	cmp	r3, #5
 8005ace:	d10c      	bne.n	8005aea <HAL_RCC_OscConfig+0x89a>
 8005ad0:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005ad6:	f043 0304 	orr.w	r3, r3, #4
 8005ada:	6213      	str	r3, [r2, #32]
 8005adc:	4b28      	ldr	r3, [pc, #160]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	4a27      	ldr	r2, [pc, #156]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	6213      	str	r3, [r2, #32]
 8005ae8:	e00b      	b.n	8005b02 <HAL_RCC_OscConfig+0x8b2>
 8005aea:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	4a24      	ldr	r2, [pc, #144]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	6213      	str	r3, [r2, #32]
 8005af6:	4b22      	ldr	r3, [pc, #136]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	4a21      	ldr	r2, [pc, #132]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005afc:	f023 0304 	bic.w	r3, r3, #4
 8005b00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b02:	1d3b      	adds	r3, r7, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d06b      	beq.n	8005be4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0c:	f7fd fdee 	bl	80036ec <HAL_GetTick>
 8005b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b14:	e00b      	b.n	8005b2e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fd fde9 	bl	80036ec <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e291      	b.n	8006052 <HAL_RCC_OscConfig+0xe02>
 8005b2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005b32:	2202      	movs	r2, #2
 8005b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	fa93 f2a3 	rbit	r2, r3
 8005b40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	fa93 f2a3 	rbit	r2, r3
 8005b58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005b5c:	601a      	str	r2, [r3, #0]
  return result;
 8005b5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005b62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b64:	fab3 f383 	clz	r3, r3
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f043 0302 	orr.w	r3, r3, #2
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d109      	bne.n	8005b8c <HAL_RCC_OscConfig+0x93c>
 8005b78:	4b01      	ldr	r3, [pc, #4]	; (8005b80 <HAL_RCC_OscConfig+0x930>)
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	e014      	b.n	8005ba8 <HAL_RCC_OscConfig+0x958>
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000
 8005b84:	10908120 	.word	0x10908120
 8005b88:	40007000 	.word	0x40007000
 8005b8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005b90:	2202      	movs	r2, #2
 8005b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	fa93 f2a3 	rbit	r2, r3
 8005b9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	4bbb      	ldr	r3, [pc, #748]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005bac:	2102      	movs	r1, #2
 8005bae:	6011      	str	r1, [r2, #0]
 8005bb0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	fa92 f1a2 	rbit	r1, r2
 8005bba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005bbe:	6011      	str	r1, [r2, #0]
  return result;
 8005bc0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	fab2 f282 	clz	r2, r2
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	f002 021f 	and.w	r2, r2, #31
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d099      	beq.n	8005b16 <HAL_RCC_OscConfig+0x8c6>
 8005be2:	e063      	b.n	8005cac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005be4:	f7fd fd82 	bl	80036ec <HAL_GetTick>
 8005be8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bec:	e00b      	b.n	8005c06 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bee:	f7fd fd7d 	bl	80036ec <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e225      	b.n	8006052 <HAL_RCC_OscConfig+0xe02>
 8005c06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	fa93 f2a3 	rbit	r2, r3
 8005c18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005c22:	2202      	movs	r2, #2
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	fa93 f2a3 	rbit	r2, r3
 8005c30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005c34:	601a      	str	r2, [r3, #0]
  return result;
 8005c36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005c3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3c:	fab3 f383 	clz	r3, r3
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f043 0302 	orr.w	r3, r3, #2
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d102      	bne.n	8005c56 <HAL_RCC_OscConfig+0xa06>
 8005c50:	4b90      	ldr	r3, [pc, #576]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	e00d      	b.n	8005c72 <HAL_RCC_OscConfig+0xa22>
 8005c56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	fa93 f2a3 	rbit	r2, r3
 8005c68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	4b89      	ldr	r3, [pc, #548]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005c76:	2102      	movs	r1, #2
 8005c78:	6011      	str	r1, [r2, #0]
 8005c7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	fa92 f1a2 	rbit	r1, r2
 8005c84:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005c88:	6011      	str	r1, [r2, #0]
  return result;
 8005c8a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	fab2 f282 	clz	r2, r2
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	f002 021f 	and.w	r2, r2, #31
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1a0      	bne.n	8005bee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d105      	bne.n	8005cc0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb4:	4b77      	ldr	r3, [pc, #476]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	4a76      	ldr	r2, [pc, #472]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cc0:	1d3b      	adds	r3, r7, #4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 81c2 	beq.w	8006050 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ccc:	4b71      	ldr	r3, [pc, #452]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 030c 	and.w	r3, r3, #12
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	f000 819c 	beq.w	8006012 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	f040 8114 	bne.w	8005f0e <HAL_RCC_OscConfig+0xcbe>
 8005ce6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005cea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	fa93 f2a3 	rbit	r2, r3
 8005cfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005cfe:	601a      	str	r2, [r3, #0]
  return result;
 8005d00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005d04:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d06:	fab3 f383 	clz	r3, r3
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	461a      	mov	r2, r3
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7fd fce6 	bl	80036ec <HAL_GetTick>
 8005d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d24:	e009      	b.n	8005d3a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d26:	f7fd fce1 	bl	80036ec <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e18b      	b.n	8006052 <HAL_RCC_OscConfig+0xe02>
 8005d3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	fa93 f2a3 	rbit	r2, r3
 8005d4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005d52:	601a      	str	r2, [r3, #0]
  return result;
 8005d54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005d58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d5a:	fab3 f383 	clz	r3, r3
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f043 0301 	orr.w	r3, r3, #1
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d102      	bne.n	8005d74 <HAL_RCC_OscConfig+0xb24>
 8005d6e:	4b49      	ldr	r3, [pc, #292]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	e01b      	b.n	8005dac <HAL_RCC_OscConfig+0xb5c>
 8005d74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	fa93 f2a3 	rbit	r2, r3
 8005d88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	fa93 f2a3 	rbit	r2, r3
 8005da2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	4b3a      	ldr	r3, [pc, #232]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005db0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	fa92 f1a2 	rbit	r1, r2
 8005dc0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005dc4:	6011      	str	r1, [r2, #0]
  return result;
 8005dc6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	fab2 f282 	clz	r2, r2
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	f042 0220 	orr.w	r2, r2, #32
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	f002 021f 	and.w	r2, r2, #31
 8005ddc:	2101      	movs	r1, #1
 8005dde:	fa01 f202 	lsl.w	r2, r1, r2
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d19e      	bne.n	8005d26 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005de8:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005df0:	1d3b      	adds	r3, r7, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	4925      	ldr	r1, [pc, #148]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	604b      	str	r3, [r1, #4]
 8005e04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	fa93 f2a3 	rbit	r2, r3
 8005e18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e1c:	601a      	str	r2, [r3, #0]
  return result;
 8005e1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e22:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e24:	fab3 f383 	clz	r3, r3
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	461a      	mov	r2, r3
 8005e36:	2301      	movs	r3, #1
 8005e38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3a:	f7fd fc57 	bl	80036ec <HAL_GetTick>
 8005e3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e42:	e009      	b.n	8005e58 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e44:	f7fd fc52 	bl	80036ec <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e0fc      	b.n	8006052 <HAL_RCC_OscConfig+0xe02>
 8005e58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	fa93 f2a3 	rbit	r2, r3
 8005e6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005e70:	601a      	str	r2, [r3, #0]
  return result;
 8005e72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005e76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e78:	fab3 f383 	clz	r3, r3
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d105      	bne.n	8005e98 <HAL_RCC_OscConfig+0xc48>
 8005e8c:	4b01      	ldr	r3, [pc, #4]	; (8005e94 <HAL_RCC_OscConfig+0xc44>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	e01e      	b.n	8005ed0 <HAL_RCC_OscConfig+0xc80>
 8005e92:	bf00      	nop
 8005e94:	40021000 	.word	0x40021000
 8005e98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	fa93 f2a3 	rbit	r2, r3
 8005eac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	fa93 f2a3 	rbit	r2, r3
 8005ec6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	4b63      	ldr	r3, [pc, #396]	; (800605c <HAL_RCC_OscConfig+0xe0c>)
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005ed4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ed8:	6011      	str	r1, [r2, #0]
 8005eda:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	fa92 f1a2 	rbit	r1, r2
 8005ee4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005ee8:	6011      	str	r1, [r2, #0]
  return result;
 8005eea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	fab2 f282 	clz	r2, r2
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	f042 0220 	orr.w	r2, r2, #32
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	f002 021f 	and.w	r2, r2, #31
 8005f00:	2101      	movs	r1, #1
 8005f02:	fa01 f202 	lsl.w	r2, r1, r2
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d09b      	beq.n	8005e44 <HAL_RCC_OscConfig+0xbf4>
 8005f0c:	e0a0      	b.n	8006050 <HAL_RCC_OscConfig+0xe00>
 8005f0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	fa93 f2a3 	rbit	r2, r3
 8005f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f26:	601a      	str	r2, [r3, #0]
  return result;
 8005f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f2e:	fab3 f383 	clz	r3, r3
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f44:	f7fd fbd2 	bl	80036ec <HAL_GetTick>
 8005f48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f4c:	e009      	b.n	8005f62 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f4e:	f7fd fbcd 	bl	80036ec <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e077      	b.n	8006052 <HAL_RCC_OscConfig+0xe02>
 8005f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	fa93 f2a3 	rbit	r2, r3
 8005f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f7a:	601a      	str	r2, [r3, #0]
  return result;
 8005f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f82:	fab3 f383 	clz	r3, r3
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d102      	bne.n	8005f9c <HAL_RCC_OscConfig+0xd4c>
 8005f96:	4b31      	ldr	r3, [pc, #196]	; (800605c <HAL_RCC_OscConfig+0xe0c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	e01b      	b.n	8005fd4 <HAL_RCC_OscConfig+0xd84>
 8005f9c:	f107 0320 	add.w	r3, r7, #32
 8005fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa6:	f107 0320 	add.w	r3, r7, #32
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	fa93 f2a3 	rbit	r2, r3
 8005fb0:	f107 031c 	add.w	r3, r7, #28
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	f107 0318 	add.w	r3, r7, #24
 8005fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	f107 0318 	add.w	r3, r7, #24
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	fa93 f2a3 	rbit	r2, r3
 8005fca:	f107 0314 	add.w	r3, r7, #20
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	4b22      	ldr	r3, [pc, #136]	; (800605c <HAL_RCC_OscConfig+0xe0c>)
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	f107 0210 	add.w	r2, r7, #16
 8005fd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005fdc:	6011      	str	r1, [r2, #0]
 8005fde:	f107 0210 	add.w	r2, r7, #16
 8005fe2:	6812      	ldr	r2, [r2, #0]
 8005fe4:	fa92 f1a2 	rbit	r1, r2
 8005fe8:	f107 020c 	add.w	r2, r7, #12
 8005fec:	6011      	str	r1, [r2, #0]
  return result;
 8005fee:	f107 020c 	add.w	r2, r7, #12
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	fab2 f282 	clz	r2, r2
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	f042 0220 	orr.w	r2, r2, #32
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	f002 021f 	and.w	r2, r2, #31
 8006004:	2101      	movs	r1, #1
 8006006:	fa01 f202 	lsl.w	r2, r1, r2
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d19e      	bne.n	8005f4e <HAL_RCC_OscConfig+0xcfe>
 8006010:	e01e      	b.n	8006050 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006012:	1d3b      	adds	r3, r7, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e018      	b.n	8006052 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006020:	4b0e      	ldr	r3, [pc, #56]	; (800605c <HAL_RCC_OscConfig+0xe0c>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006028:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800602c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006030:	1d3b      	adds	r3, r7, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	429a      	cmp	r2, r3
 8006038:	d108      	bne.n	800604c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800603a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800603e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006042:	1d3b      	adds	r3, r7, #4
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006048:	429a      	cmp	r2, r3
 800604a:	d001      	beq.n	8006050 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40021000 	.word	0x40021000

08006060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b09e      	sub	sp, #120	; 0x78
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e162      	b.n	800633e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006078:	4b90      	ldr	r3, [pc, #576]	; (80062bc <HAL_RCC_ClockConfig+0x25c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d910      	bls.n	80060a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006086:	4b8d      	ldr	r3, [pc, #564]	; (80062bc <HAL_RCC_ClockConfig+0x25c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f023 0207 	bic.w	r2, r3, #7
 800608e:	498b      	ldr	r1, [pc, #556]	; (80062bc <HAL_RCC_ClockConfig+0x25c>)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	4313      	orrs	r3, r2
 8006094:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006096:	4b89      	ldr	r3, [pc, #548]	; (80062bc <HAL_RCC_ClockConfig+0x25c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d001      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e14a      	b.n	800633e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060b4:	4b82      	ldr	r3, [pc, #520]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	497f      	ldr	r1, [pc, #508]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 80dc 	beq.w	800628c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d13c      	bne.n	8006156 <HAL_RCC_ClockConfig+0xf6>
 80060dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060e4:	fa93 f3a3 	rbit	r3, r3
 80060e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80060ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ec:	fab3 f383 	clz	r3, r3
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d102      	bne.n	8006106 <HAL_RCC_ClockConfig+0xa6>
 8006100:	4b6f      	ldr	r3, [pc, #444]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	e00f      	b.n	8006126 <HAL_RCC_ClockConfig+0xc6>
 8006106:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800610a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800610e:	fa93 f3a3 	rbit	r3, r3
 8006112:	667b      	str	r3, [r7, #100]	; 0x64
 8006114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006118:	663b      	str	r3, [r7, #96]	; 0x60
 800611a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800611c:	fa93 f3a3 	rbit	r3, r3
 8006120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006122:	4b67      	ldr	r3, [pc, #412]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800612a:	65ba      	str	r2, [r7, #88]	; 0x58
 800612c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800612e:	fa92 f2a2 	rbit	r2, r2
 8006132:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006136:	fab2 f282 	clz	r2, r2
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	f042 0220 	orr.w	r2, r2, #32
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	f002 021f 	and.w	r2, r2, #31
 8006146:	2101      	movs	r1, #1
 8006148:	fa01 f202 	lsl.w	r2, r1, r2
 800614c:	4013      	ands	r3, r2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d17b      	bne.n	800624a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e0f3      	b.n	800633e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d13c      	bne.n	80061d8 <HAL_RCC_ClockConfig+0x178>
 800615e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006162:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006166:	fa93 f3a3 	rbit	r3, r3
 800616a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800616c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616e:	fab3 f383 	clz	r3, r3
 8006172:	b2db      	uxtb	r3, r3
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b01      	cmp	r3, #1
 8006180:	d102      	bne.n	8006188 <HAL_RCC_ClockConfig+0x128>
 8006182:	4b4f      	ldr	r3, [pc, #316]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	e00f      	b.n	80061a8 <HAL_RCC_ClockConfig+0x148>
 8006188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800618c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006190:	fa93 f3a3 	rbit	r3, r3
 8006194:	647b      	str	r3, [r7, #68]	; 0x44
 8006196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800619a:	643b      	str	r3, [r7, #64]	; 0x40
 800619c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619e:	fa93 f3a3 	rbit	r3, r3
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a4:	4b46      	ldr	r3, [pc, #280]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80061ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061b0:	fa92 f2a2 	rbit	r2, r2
 80061b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80061b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b8:	fab2 f282 	clz	r2, r2
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	f042 0220 	orr.w	r2, r2, #32
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	f002 021f 	and.w	r2, r2, #31
 80061c8:	2101      	movs	r1, #1
 80061ca:	fa01 f202 	lsl.w	r2, r1, r2
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d13a      	bne.n	800624a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0b2      	b.n	800633e <HAL_RCC_ClockConfig+0x2de>
 80061d8:	2302      	movs	r3, #2
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	fa93 f3a3 	rbit	r3, r3
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e6:	fab3 f383 	clz	r3, r3
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	f043 0301 	orr.w	r3, r3, #1
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d102      	bne.n	8006200 <HAL_RCC_ClockConfig+0x1a0>
 80061fa:	4b31      	ldr	r3, [pc, #196]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	e00d      	b.n	800621c <HAL_RCC_ClockConfig+0x1bc>
 8006200:	2302      	movs	r3, #2
 8006202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	fa93 f3a3 	rbit	r3, r3
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
 800620c:	2302      	movs	r3, #2
 800620e:	623b      	str	r3, [r7, #32]
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	fa93 f3a3 	rbit	r3, r3
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	4b29      	ldr	r3, [pc, #164]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2202      	movs	r2, #2
 800621e:	61ba      	str	r2, [r7, #24]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	fa92 f2a2 	rbit	r2, r2
 8006226:	617a      	str	r2, [r7, #20]
  return result;
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	fab2 f282 	clz	r2, r2
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	f042 0220 	orr.w	r2, r2, #32
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	f002 021f 	and.w	r2, r2, #31
 800623a:	2101      	movs	r1, #1
 800623c:	fa01 f202 	lsl.w	r2, r1, r2
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e079      	b.n	800633e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800624a:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f023 0203 	bic.w	r2, r3, #3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	491a      	ldr	r1, [pc, #104]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 8006258:	4313      	orrs	r3, r2
 800625a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800625c:	f7fd fa46 	bl	80036ec <HAL_GetTick>
 8006260:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006262:	e00a      	b.n	800627a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006264:	f7fd fa42 	bl	80036ec <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e061      	b.n	800633e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627a:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <HAL_RCC_ClockConfig+0x260>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f003 020c 	and.w	r2, r3, #12
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	429a      	cmp	r2, r3
 800628a:	d1eb      	bne.n	8006264 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <HAL_RCC_ClockConfig+0x25c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d214      	bcs.n	80062c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800629a:	4b08      	ldr	r3, [pc, #32]	; (80062bc <HAL_RCC_ClockConfig+0x25c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f023 0207 	bic.w	r2, r3, #7
 80062a2:	4906      	ldr	r1, [pc, #24]	; (80062bc <HAL_RCC_ClockConfig+0x25c>)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b04      	ldr	r3, [pc, #16]	; (80062bc <HAL_RCC_ClockConfig+0x25c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d005      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e040      	b.n	800633e <HAL_RCC_ClockConfig+0x2de>
 80062bc:	40022000 	.word	0x40022000
 80062c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d0:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <HAL_RCC_ClockConfig+0x2e8>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	491a      	ldr	r1, [pc, #104]	; (8006348 <HAL_RCC_ClockConfig+0x2e8>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ee:	4b16      	ldr	r3, [pc, #88]	; (8006348 <HAL_RCC_ClockConfig+0x2e8>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4912      	ldr	r1, [pc, #72]	; (8006348 <HAL_RCC_ClockConfig+0x2e8>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006302:	f000 f829 	bl	8006358 <HAL_RCC_GetSysClockFreq>
 8006306:	4601      	mov	r1, r0
 8006308:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <HAL_RCC_ClockConfig+0x2e8>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006310:	22f0      	movs	r2, #240	; 0xf0
 8006312:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	fa92 f2a2 	rbit	r2, r2
 800631a:	60fa      	str	r2, [r7, #12]
  return result;
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	fab2 f282 	clz	r2, r2
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	40d3      	lsrs	r3, r2
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <HAL_RCC_ClockConfig+0x2ec>)
 8006328:	5cd3      	ldrb	r3, [r2, r3]
 800632a:	fa21 f303 	lsr.w	r3, r1, r3
 800632e:	4a08      	ldr	r2, [pc, #32]	; (8006350 <HAL_RCC_ClockConfig+0x2f0>)
 8006330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006332:	4b08      	ldr	r3, [pc, #32]	; (8006354 <HAL_RCC_ClockConfig+0x2f4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fd f994 	bl	8003664 <HAL_InitTick>
  
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3778      	adds	r7, #120	; 0x78
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40021000 	.word	0x40021000
 800634c:	0800daf8 	.word	0x0800daf8
 8006350:	20000010 	.word	0x20000010
 8006354:	20000014 	.word	0x20000014

08006358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006358:	b480      	push	{r7}
 800635a:	b08b      	sub	sp, #44	; 0x2c
 800635c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	2300      	movs	r3, #0
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006372:	4b29      	ldr	r3, [pc, #164]	; (8006418 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b04      	cmp	r3, #4
 8006380:	d002      	beq.n	8006388 <HAL_RCC_GetSysClockFreq+0x30>
 8006382:	2b08      	cmp	r3, #8
 8006384:	d003      	beq.n	800638e <HAL_RCC_GetSysClockFreq+0x36>
 8006386:	e03c      	b.n	8006402 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006388:	4b24      	ldr	r3, [pc, #144]	; (800641c <HAL_RCC_GetSysClockFreq+0xc4>)
 800638a:	623b      	str	r3, [r7, #32]
      break;
 800638c:	e03c      	b.n	8006408 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006394:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006398:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	fa92 f2a2 	rbit	r2, r2
 80063a0:	607a      	str	r2, [r7, #4]
  return result;
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	fab2 f282 	clz	r2, r2
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	40d3      	lsrs	r3, r2
 80063ac:	4a1c      	ldr	r2, [pc, #112]	; (8006420 <HAL_RCC_GetSysClockFreq+0xc8>)
 80063ae:	5cd3      	ldrb	r3, [r2, r3]
 80063b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80063b2:	4b19      	ldr	r3, [pc, #100]	; (8006418 <HAL_RCC_GetSysClockFreq+0xc0>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	220f      	movs	r2, #15
 80063bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	fa92 f2a2 	rbit	r2, r2
 80063c4:	60fa      	str	r2, [r7, #12]
  return result;
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	fab2 f282 	clz	r2, r2
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	40d3      	lsrs	r3, r2
 80063d0:	4a14      	ldr	r2, [pc, #80]	; (8006424 <HAL_RCC_GetSysClockFreq+0xcc>)
 80063d2:	5cd3      	ldrb	r3, [r2, r3]
 80063d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80063e0:	4a0e      	ldr	r2, [pc, #56]	; (800641c <HAL_RCC_GetSysClockFreq+0xc4>)
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	fb02 f303 	mul.w	r3, r2, r3
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
 80063f0:	e004      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	4a0c      	ldr	r2, [pc, #48]	; (8006428 <HAL_RCC_GetSysClockFreq+0xd0>)
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	623b      	str	r3, [r7, #32]
      break;
 8006400:	e002      	b.n	8006408 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006402:	4b06      	ldr	r3, [pc, #24]	; (800641c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006404:	623b      	str	r3, [r7, #32]
      break;
 8006406:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006408:	6a3b      	ldr	r3, [r7, #32]
}
 800640a:	4618      	mov	r0, r3
 800640c:	372c      	adds	r7, #44	; 0x2c
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000
 800641c:	007a1200 	.word	0x007a1200
 8006420:	0800db10 	.word	0x0800db10
 8006424:	0800db20 	.word	0x0800db20
 8006428:	003d0900 	.word	0x003d0900

0800642c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006430:	4b03      	ldr	r3, [pc, #12]	; (8006440 <HAL_RCC_GetHCLKFreq+0x14>)
 8006432:	681b      	ldr	r3, [r3, #0]
}
 8006434:	4618      	mov	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20000010 	.word	0x20000010

08006444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800644a:	f7ff ffef 	bl	800642c <HAL_RCC_GetHCLKFreq>
 800644e:	4601      	mov	r1, r0
 8006450:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006458:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800645c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	fa92 f2a2 	rbit	r2, r2
 8006464:	603a      	str	r2, [r7, #0]
  return result;
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	fab2 f282 	clz	r2, r2
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	40d3      	lsrs	r3, r2
 8006470:	4a04      	ldr	r2, [pc, #16]	; (8006484 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006472:	5cd3      	ldrb	r3, [r2, r3]
 8006474:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40021000 	.word	0x40021000
 8006484:	0800db08 	.word	0x0800db08

08006488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800648e:	f7ff ffcd 	bl	800642c <HAL_RCC_GetHCLKFreq>
 8006492:	4601      	mov	r1, r0
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800649c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80064a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	fa92 f2a2 	rbit	r2, r2
 80064a8:	603a      	str	r2, [r7, #0]
  return result;
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	fab2 f282 	clz	r2, r2
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	40d3      	lsrs	r3, r2
 80064b4:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80064b6:	5cd3      	ldrb	r3, [r2, r3]
 80064b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40021000 	.word	0x40021000
 80064c8:	0800db08 	.word	0x0800db08

080064cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b092      	sub	sp, #72	; 0x48
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80064dc:	2300      	movs	r3, #0
 80064de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 80cd 	beq.w	800668a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064f0:	4b86      	ldr	r3, [pc, #536]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10e      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064fc:	4b83      	ldr	r3, [pc, #524]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	4a82      	ldr	r2, [pc, #520]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006506:	61d3      	str	r3, [r2, #28]
 8006508:	4b80      	ldr	r3, [pc, #512]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006514:	2301      	movs	r3, #1
 8006516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651a:	4b7d      	ldr	r3, [pc, #500]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006522:	2b00      	cmp	r3, #0
 8006524:	d118      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006526:	4b7a      	ldr	r3, [pc, #488]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a79      	ldr	r2, [pc, #484]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800652c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006530:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006532:	f7fd f8db 	bl	80036ec <HAL_GetTick>
 8006536:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006538:	e008      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800653a:	f7fd f8d7 	bl	80036ec <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b64      	cmp	r3, #100	; 0x64
 8006546:	d901      	bls.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e0db      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654c:	4b70      	ldr	r3, [pc, #448]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0f0      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006558:	4b6c      	ldr	r3, [pc, #432]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d07d      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006572:	429a      	cmp	r2, r3
 8006574:	d076      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006576:	4b65      	ldr	r3, [pc, #404]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006584:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	fa93 f3a3 	rbit	r3, r3
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006590:	fab3 f383 	clz	r3, r3
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	4b5e      	ldr	r3, [pc, #376]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	461a      	mov	r2, r3
 80065a0:	2301      	movs	r3, #1
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	fa93 f3a3 	rbit	r3, r3
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065b4:	fab3 f383 	clz	r3, r3
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	4b55      	ldr	r3, [pc, #340]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	461a      	mov	r2, r3
 80065c4:	2300      	movs	r3, #0
 80065c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80065c8:	4a50      	ldr	r2, [pc, #320]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80065ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d045      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d8:	f7fd f888 	bl	80036ec <HAL_GetTick>
 80065dc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065de:	e00a      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e0:	f7fd f884 	bl	80036ec <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e086      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80065f6:	2302      	movs	r3, #2
 80065f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	fa93 f3a3 	rbit	r3, r3
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
 8006602:	2302      	movs	r3, #2
 8006604:	623b      	str	r3, [r7, #32]
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	fa93 f3a3 	rbit	r3, r3
 800660c:	61fb      	str	r3, [r7, #28]
  return result;
 800660e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006610:	fab3 f383 	clz	r3, r3
 8006614:	b2db      	uxtb	r3, r3
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	b2db      	uxtb	r3, r3
 800661a:	f043 0302 	orr.w	r3, r3, #2
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d102      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006624:	4b39      	ldr	r3, [pc, #228]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	e007      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800662a:	2302      	movs	r3, #2
 800662c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	fa93 f3a3 	rbit	r3, r3
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	4b35      	ldr	r3, [pc, #212]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	2202      	movs	r2, #2
 800663c:	613a      	str	r2, [r7, #16]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	fa92 f2a2 	rbit	r2, r2
 8006644:	60fa      	str	r2, [r7, #12]
  return result;
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	fab2 f282 	clz	r2, r2
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	f002 021f 	and.w	r2, r2, #31
 8006658:	2101      	movs	r1, #1
 800665a:	fa01 f202 	lsl.w	r2, r1, r2
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0bd      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006664:	4b29      	ldr	r3, [pc, #164]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4926      	ldr	r1, [pc, #152]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006672:	4313      	orrs	r3, r2
 8006674:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006676:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800667a:	2b01      	cmp	r3, #1
 800667c:	d105      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800667e:	4b23      	ldr	r3, [pc, #140]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	4a22      	ldr	r2, [pc, #136]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006688:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d008      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006696:	4b1d      	ldr	r3, [pc, #116]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f023 0203 	bic.w	r2, r3, #3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	491a      	ldr	r1, [pc, #104]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066b4:	4b15      	ldr	r3, [pc, #84]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	f023 0210 	bic.w	r2, r3, #16
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4912      	ldr	r1, [pc, #72]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d008      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80066d2:	4b0e      	ldr	r3, [pc, #56]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	490b      	ldr	r1, [pc, #44]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	4903      	ldr	r1, [pc, #12]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3748      	adds	r7, #72	; 0x48
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40021000 	.word	0x40021000
 8006710:	40007000 	.word	0x40007000
 8006714:	10908100 	.word	0x10908100

08006718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e049      	b.n	80067be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d106      	bne.n	8006744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fc fd54 	bl	80031ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3304      	adds	r3, #4
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f000 fd64 	bl	8007224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d001      	beq.n	80067e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e040      	b.n	8006862 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <HAL_TIM_Base_Start_IT+0xa8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00e      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0x58>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680a:	d009      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0x58>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a18      	ldr	r2, [pc, #96]	; (8006874 <HAL_TIM_Base_Start_IT+0xac>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d004      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0x58>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a17      	ldr	r2, [pc, #92]	; (8006878 <HAL_TIM_Base_Start_IT+0xb0>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d115      	bne.n	800684c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	4b15      	ldr	r3, [pc, #84]	; (800687c <HAL_TIM_Base_Start_IT+0xb4>)
 8006828:	4013      	ands	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b06      	cmp	r3, #6
 8006830:	d015      	beq.n	800685e <HAL_TIM_Base_Start_IT+0x96>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006838:	d011      	beq.n	800685e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0201 	orr.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684a:	e008      	b.n	800685e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	e000      	b.n	8006860 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40000400 	.word	0x40000400
 8006878:	40014000 	.word	0x40014000
 800687c:	00010007 	.word	0x00010007

08006880 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e049      	b.n	8006926 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fc fc0e 	bl	80030c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4619      	mov	r1, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f000 fcb0 	bl	8007224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <HAL_TIM_PWM_Start+0x24>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	bf14      	ite	ne
 800694c:	2301      	movne	r3, #1
 800694e:	2300      	moveq	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	e03c      	b.n	80069ce <HAL_TIM_PWM_Start+0x9e>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b04      	cmp	r3, #4
 8006958:	d109      	bne.n	800696e <HAL_TIM_PWM_Start+0x3e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b01      	cmp	r3, #1
 8006964:	bf14      	ite	ne
 8006966:	2301      	movne	r3, #1
 8006968:	2300      	moveq	r3, #0
 800696a:	b2db      	uxtb	r3, r3
 800696c:	e02f      	b.n	80069ce <HAL_TIM_PWM_Start+0x9e>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b08      	cmp	r3, #8
 8006972:	d109      	bne.n	8006988 <HAL_TIM_PWM_Start+0x58>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b01      	cmp	r3, #1
 800697e:	bf14      	ite	ne
 8006980:	2301      	movne	r3, #1
 8006982:	2300      	moveq	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	e022      	b.n	80069ce <HAL_TIM_PWM_Start+0x9e>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b0c      	cmp	r3, #12
 800698c:	d109      	bne.n	80069a2 <HAL_TIM_PWM_Start+0x72>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b01      	cmp	r3, #1
 8006998:	bf14      	ite	ne
 800699a:	2301      	movne	r3, #1
 800699c:	2300      	moveq	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	e015      	b.n	80069ce <HAL_TIM_PWM_Start+0x9e>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d109      	bne.n	80069bc <HAL_TIM_PWM_Start+0x8c>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	bf14      	ite	ne
 80069b4:	2301      	movne	r3, #1
 80069b6:	2300      	moveq	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	e008      	b.n	80069ce <HAL_TIM_PWM_Start+0x9e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e088      	b.n	8006ae8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_PWM_Start+0xb6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e4:	e023      	b.n	8006a2e <HAL_TIM_PWM_Start+0xfe>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_PWM_Start+0xc6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f4:	e01b      	b.n	8006a2e <HAL_TIM_PWM_Start+0xfe>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_PWM_Start+0xd6>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a04:	e013      	b.n	8006a2e <HAL_TIM_PWM_Start+0xfe>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b0c      	cmp	r3, #12
 8006a0a:	d104      	bne.n	8006a16 <HAL_TIM_PWM_Start+0xe6>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a14:	e00b      	b.n	8006a2e <HAL_TIM_PWM_Start+0xfe>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b10      	cmp	r3, #16
 8006a1a:	d104      	bne.n	8006a26 <HAL_TIM_PWM_Start+0xf6>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a24:	e003      	b.n	8006a2e <HAL_TIM_PWM_Start+0xfe>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2201      	movs	r2, #1
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 ff12 	bl	8007860 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a2b      	ldr	r2, [pc, #172]	; (8006af0 <HAL_TIM_PWM_Start+0x1c0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00e      	beq.n	8006a64 <HAL_TIM_PWM_Start+0x134>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a2a      	ldr	r2, [pc, #168]	; (8006af4 <HAL_TIM_PWM_Start+0x1c4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d009      	beq.n	8006a64 <HAL_TIM_PWM_Start+0x134>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a28      	ldr	r2, [pc, #160]	; (8006af8 <HAL_TIM_PWM_Start+0x1c8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <HAL_TIM_PWM_Start+0x134>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a27      	ldr	r2, [pc, #156]	; (8006afc <HAL_TIM_PWM_Start+0x1cc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d101      	bne.n	8006a68 <HAL_TIM_PWM_Start+0x138>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <HAL_TIM_PWM_Start+0x13a>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <HAL_TIM_PWM_Start+0x1c0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00e      	beq.n	8006aa6 <HAL_TIM_PWM_Start+0x176>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a90:	d009      	beq.n	8006aa6 <HAL_TIM_PWM_Start+0x176>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1a      	ldr	r2, [pc, #104]	; (8006b00 <HAL_TIM_PWM_Start+0x1d0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d004      	beq.n	8006aa6 <HAL_TIM_PWM_Start+0x176>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a14      	ldr	r2, [pc, #80]	; (8006af4 <HAL_TIM_PWM_Start+0x1c4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d115      	bne.n	8006ad2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	4b15      	ldr	r3, [pc, #84]	; (8006b04 <HAL_TIM_PWM_Start+0x1d4>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b06      	cmp	r3, #6
 8006ab6:	d015      	beq.n	8006ae4 <HAL_TIM_PWM_Start+0x1b4>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abe:	d011      	beq.n	8006ae4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad0:	e008      	b.n	8006ae4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0201 	orr.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	e000      	b.n	8006ae6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40012c00 	.word	0x40012c00
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40014400 	.word	0x40014400
 8006afc:	40014800 	.word	0x40014800
 8006b00:	40000400 	.word	0x40000400
 8006b04:	00010007 	.word	0x00010007

08006b08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e097      	b.n	8006c4c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d106      	bne.n	8006b36 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fc fae9 	bl	8003108 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6812      	ldr	r2, [r2, #0]
 8006b48:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006b4c:	f023 0307 	bic.w	r3, r3, #7
 8006b50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f000 fb61 	bl	8007224 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ba8:	f023 030c 	bic.w	r3, r3, #12
 8006bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	011a      	lsls	r2, r3, #4
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	031b      	lsls	r3, r3, #12
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d110      	bne.n	8006ca6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d102      	bne.n	8006c90 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c8a:	7b7b      	ldrb	r3, [r7, #13]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d001      	beq.n	8006c94 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e068      	b.n	8006d66 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca4:	e031      	b.n	8006d0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d110      	bne.n	8006cce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d102      	bne.n	8006cb8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cb2:	7b3b      	ldrb	r3, [r7, #12]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d001      	beq.n	8006cbc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e054      	b.n	8006d66 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ccc:	e01d      	b.n	8006d0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d108      	bne.n	8006ce6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d105      	bne.n	8006ce6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cda:	7b7b      	ldrb	r3, [r7, #13]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d102      	bne.n	8006ce6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ce0:	7b3b      	ldrb	r3, [r7, #12]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d001      	beq.n	8006cea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e03d      	b.n	8006d66 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2202      	movs	r2, #2
 8006d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_TIM_Encoder_Start+0xc2>
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d008      	beq.n	8006d26 <HAL_TIM_Encoder_Start+0xd2>
 8006d14:	e00f      	b.n	8006d36 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fd9e 	bl	8007860 <TIM_CCxChannelCmd>
      break;
 8006d24:	e016      	b.n	8006d54 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	2104      	movs	r1, #4
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fd96 	bl	8007860 <TIM_CCxChannelCmd>
      break;
 8006d34:	e00e      	b.n	8006d54 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fd8e 	bl	8007860 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	2104      	movs	r1, #4
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fd87 	bl	8007860 <TIM_CCxChannelCmd>
      break;
 8006d52:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0201 	orr.w	r2, r2, #1
 8006d62:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d122      	bne.n	8006dca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d11b      	bne.n	8006dca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f06f 0202 	mvn.w	r2, #2
 8006d9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fa19 	bl	80071e8 <HAL_TIM_IC_CaptureCallback>
 8006db6:	e005      	b.n	8006dc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fa0b 	bl	80071d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa1c 	bl	80071fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d122      	bne.n	8006e1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d11b      	bne.n	8006e1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f06f 0204 	mvn.w	r2, #4
 8006dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f9ef 	bl	80071e8 <HAL_TIM_IC_CaptureCallback>
 8006e0a:	e005      	b.n	8006e18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f9e1 	bl	80071d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9f2 	bl	80071fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d122      	bne.n	8006e72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d11b      	bne.n	8006e72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f06f 0208 	mvn.w	r2, #8
 8006e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2204      	movs	r2, #4
 8006e48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f9c5 	bl	80071e8 <HAL_TIM_IC_CaptureCallback>
 8006e5e:	e005      	b.n	8006e6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f9b7 	bl	80071d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f9c8 	bl	80071fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	2b10      	cmp	r3, #16
 8006e7e:	d122      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d11b      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f06f 0210 	mvn.w	r2, #16
 8006e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f99b 	bl	80071e8 <HAL_TIM_IC_CaptureCallback>
 8006eb2:	e005      	b.n	8006ec0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f98d 	bl	80071d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f99e 	bl	80071fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d10e      	bne.n	8006ef2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d107      	bne.n	8006ef2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f06f 0201 	mvn.w	r2, #1
 8006eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7fb ff3b 	bl	8002d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efc:	2b80      	cmp	r3, #128	; 0x80
 8006efe:	d10e      	bne.n	8006f1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0a:	2b80      	cmp	r3, #128	; 0x80
 8006f0c:	d107      	bne.n	8006f1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fdb7 	bl	8007a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2c:	d10e      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f38:	2b80      	cmp	r3, #128	; 0x80
 8006f3a:	d107      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fdaa 	bl	8007aa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d10e      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	d107      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f94c 	bl	8007210 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d10e      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d107      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0220 	mvn.w	r2, #32
 8006f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fd6a 	bl	8007a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e0ff      	b.n	80071ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b14      	cmp	r3, #20
 8006fd6:	f200 80f0 	bhi.w	80071ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006fda:	a201      	add	r2, pc, #4	; (adr r2, 8006fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe0:	08007035 	.word	0x08007035
 8006fe4:	080071bb 	.word	0x080071bb
 8006fe8:	080071bb 	.word	0x080071bb
 8006fec:	080071bb 	.word	0x080071bb
 8006ff0:	08007075 	.word	0x08007075
 8006ff4:	080071bb 	.word	0x080071bb
 8006ff8:	080071bb 	.word	0x080071bb
 8006ffc:	080071bb 	.word	0x080071bb
 8007000:	080070b7 	.word	0x080070b7
 8007004:	080071bb 	.word	0x080071bb
 8007008:	080071bb 	.word	0x080071bb
 800700c:	080071bb 	.word	0x080071bb
 8007010:	080070f7 	.word	0x080070f7
 8007014:	080071bb 	.word	0x080071bb
 8007018:	080071bb 	.word	0x080071bb
 800701c:	080071bb 	.word	0x080071bb
 8007020:	08007139 	.word	0x08007139
 8007024:	080071bb 	.word	0x080071bb
 8007028:	080071bb 	.word	0x080071bb
 800702c:	080071bb 	.word	0x080071bb
 8007030:	08007179 	.word	0x08007179
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68b9      	ldr	r1, [r7, #8]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f96a 	bl	8007314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0208 	orr.w	r2, r2, #8
 800704e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699a      	ldr	r2, [r3, #24]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0204 	bic.w	r2, r2, #4
 800705e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6999      	ldr	r1, [r3, #24]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	691a      	ldr	r2, [r3, #16]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	619a      	str	r2, [r3, #24]
      break;
 8007072:	e0a5      	b.n	80071c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68b9      	ldr	r1, [r7, #8]
 800707a:	4618      	mov	r0, r3
 800707c:	f000 f9d0 	bl	8007420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800708e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6999      	ldr	r1, [r3, #24]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	021a      	lsls	r2, r3, #8
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	619a      	str	r2, [r3, #24]
      break;
 80070b4:	e084      	b.n	80071c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 fa2f 	bl	8007520 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0208 	orr.w	r2, r2, #8
 80070d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69da      	ldr	r2, [r3, #28]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0204 	bic.w	r2, r2, #4
 80070e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69d9      	ldr	r1, [r3, #28]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	61da      	str	r2, [r3, #28]
      break;
 80070f4:	e064      	b.n	80071c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fa8d 	bl	800761c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69da      	ldr	r2, [r3, #28]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69d9      	ldr	r1, [r3, #28]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	021a      	lsls	r2, r3, #8
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	61da      	str	r2, [r3, #28]
      break;
 8007136:	e043      	b.n	80071c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fad0 	bl	80076e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0208 	orr.w	r2, r2, #8
 8007152:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0204 	bic.w	r2, r2, #4
 8007162:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007176:	e023      	b.n	80071c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fb0e 	bl	80077a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007192:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	021a      	lsls	r2, r3, #8
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071b8:	e002      	b.n	80071c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	75fb      	strb	r3, [r7, #23]
      break;
 80071be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop

080071d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a32      	ldr	r2, [pc, #200]	; (8007300 <TIM_Base_SetConfig+0xdc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d007      	beq.n	800724c <TIM_Base_SetConfig+0x28>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007242:	d003      	beq.n	800724c <TIM_Base_SetConfig+0x28>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a2f      	ldr	r2, [pc, #188]	; (8007304 <TIM_Base_SetConfig+0xe0>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d108      	bne.n	800725e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a27      	ldr	r2, [pc, #156]	; (8007300 <TIM_Base_SetConfig+0xdc>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d013      	beq.n	800728e <TIM_Base_SetConfig+0x6a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726c:	d00f      	beq.n	800728e <TIM_Base_SetConfig+0x6a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a24      	ldr	r2, [pc, #144]	; (8007304 <TIM_Base_SetConfig+0xe0>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00b      	beq.n	800728e <TIM_Base_SetConfig+0x6a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a23      	ldr	r2, [pc, #140]	; (8007308 <TIM_Base_SetConfig+0xe4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d007      	beq.n	800728e <TIM_Base_SetConfig+0x6a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a22      	ldr	r2, [pc, #136]	; (800730c <TIM_Base_SetConfig+0xe8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d003      	beq.n	800728e <TIM_Base_SetConfig+0x6a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a21      	ldr	r2, [pc, #132]	; (8007310 <TIM_Base_SetConfig+0xec>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d108      	bne.n	80072a0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a0e      	ldr	r2, [pc, #56]	; (8007300 <TIM_Base_SetConfig+0xdc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00b      	beq.n	80072e4 <TIM_Base_SetConfig+0xc0>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a0e      	ldr	r2, [pc, #56]	; (8007308 <TIM_Base_SetConfig+0xe4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d007      	beq.n	80072e4 <TIM_Base_SetConfig+0xc0>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a0d      	ldr	r2, [pc, #52]	; (800730c <TIM_Base_SetConfig+0xe8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d003      	beq.n	80072e4 <TIM_Base_SetConfig+0xc0>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a0c      	ldr	r2, [pc, #48]	; (8007310 <TIM_Base_SetConfig+0xec>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d103      	bne.n	80072ec <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	691a      	ldr	r2, [r3, #16]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	615a      	str	r2, [r3, #20]
}
 80072f2:	bf00      	nop
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40012c00 	.word	0x40012c00
 8007304:	40000400 	.word	0x40000400
 8007308:	40014000 	.word	0x40014000
 800730c:	40014400 	.word	0x40014400
 8007310:	40014800 	.word	0x40014800

08007314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	f023 0201 	bic.w	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0303 	bic.w	r3, r3, #3
 800734e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f023 0302 	bic.w	r3, r3, #2
 8007360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a28      	ldr	r2, [pc, #160]	; (8007410 <TIM_OC1_SetConfig+0xfc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00b      	beq.n	800738c <TIM_OC1_SetConfig+0x78>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a27      	ldr	r2, [pc, #156]	; (8007414 <TIM_OC1_SetConfig+0x100>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d007      	beq.n	800738c <TIM_OC1_SetConfig+0x78>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a26      	ldr	r2, [pc, #152]	; (8007418 <TIM_OC1_SetConfig+0x104>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <TIM_OC1_SetConfig+0x78>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a25      	ldr	r2, [pc, #148]	; (800741c <TIM_OC1_SetConfig+0x108>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d10c      	bne.n	80073a6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f023 0308 	bic.w	r3, r3, #8
 8007392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f023 0304 	bic.w	r3, r3, #4
 80073a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a19      	ldr	r2, [pc, #100]	; (8007410 <TIM_OC1_SetConfig+0xfc>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d00b      	beq.n	80073c6 <TIM_OC1_SetConfig+0xb2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a18      	ldr	r2, [pc, #96]	; (8007414 <TIM_OC1_SetConfig+0x100>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d007      	beq.n	80073c6 <TIM_OC1_SetConfig+0xb2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a17      	ldr	r2, [pc, #92]	; (8007418 <TIM_OC1_SetConfig+0x104>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d003      	beq.n	80073c6 <TIM_OC1_SetConfig+0xb2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a16      	ldr	r2, [pc, #88]	; (800741c <TIM_OC1_SetConfig+0x108>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d111      	bne.n	80073ea <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	621a      	str	r2, [r3, #32]
}
 8007404:	bf00      	nop
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	40012c00 	.word	0x40012c00
 8007414:	40014000 	.word	0x40014000
 8007418:	40014400 	.word	0x40014400
 800741c:	40014800 	.word	0x40014800

08007420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f023 0210 	bic.w	r2, r3, #16
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800745a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f023 0320 	bic.w	r3, r3, #32
 800746e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a24      	ldr	r2, [pc, #144]	; (8007510 <TIM_OC2_SetConfig+0xf0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d10d      	bne.n	80074a0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800748a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800749e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <TIM_OC2_SetConfig+0xf0>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d00b      	beq.n	80074c0 <TIM_OC2_SetConfig+0xa0>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <TIM_OC2_SetConfig+0xf4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d007      	beq.n	80074c0 <TIM_OC2_SetConfig+0xa0>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a19      	ldr	r2, [pc, #100]	; (8007518 <TIM_OC2_SetConfig+0xf8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_OC2_SetConfig+0xa0>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a18      	ldr	r2, [pc, #96]	; (800751c <TIM_OC2_SetConfig+0xfc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d113      	bne.n	80074e8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074c6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074ce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	621a      	str	r2, [r3, #32]
}
 8007502:	bf00      	nop
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	40012c00 	.word	0x40012c00
 8007514:	40014000 	.word	0x40014000
 8007518:	40014400 	.word	0x40014400
 800751c:	40014800 	.word	0x40014800

08007520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800754e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0303 	bic.w	r3, r3, #3
 800755a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800756c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	021b      	lsls	r3, r3, #8
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a23      	ldr	r2, [pc, #140]	; (800760c <TIM_OC3_SetConfig+0xec>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d10d      	bne.n	800759e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800759c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a1a      	ldr	r2, [pc, #104]	; (800760c <TIM_OC3_SetConfig+0xec>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00b      	beq.n	80075be <TIM_OC3_SetConfig+0x9e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a19      	ldr	r2, [pc, #100]	; (8007610 <TIM_OC3_SetConfig+0xf0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d007      	beq.n	80075be <TIM_OC3_SetConfig+0x9e>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a18      	ldr	r2, [pc, #96]	; (8007614 <TIM_OC3_SetConfig+0xf4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d003      	beq.n	80075be <TIM_OC3_SetConfig+0x9e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a17      	ldr	r2, [pc, #92]	; (8007618 <TIM_OC3_SetConfig+0xf8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d113      	bne.n	80075e6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	621a      	str	r2, [r3, #32]
}
 8007600:	bf00      	nop
 8007602:	371c      	adds	r7, #28
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	40012c00 	.word	0x40012c00
 8007610:	40014000 	.word	0x40014000
 8007614:	40014400 	.word	0x40014400
 8007618:	40014800 	.word	0x40014800

0800761c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800764a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800766a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	031b      	lsls	r3, r3, #12
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a16      	ldr	r2, [pc, #88]	; (80076d4 <TIM_OC4_SetConfig+0xb8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00b      	beq.n	8007698 <TIM_OC4_SetConfig+0x7c>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <TIM_OC4_SetConfig+0xbc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d007      	beq.n	8007698 <TIM_OC4_SetConfig+0x7c>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a14      	ldr	r2, [pc, #80]	; (80076dc <TIM_OC4_SetConfig+0xc0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d003      	beq.n	8007698 <TIM_OC4_SetConfig+0x7c>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <TIM_OC4_SetConfig+0xc4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d109      	bne.n	80076ac <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800769e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	019b      	lsls	r3, r3, #6
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	40012c00 	.word	0x40012c00
 80076d8:	40014000 	.word	0x40014000
 80076dc:	40014400 	.word	0x40014400
 80076e0:	40014800 	.word	0x40014800

080076e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007728:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	041b      	lsls	r3, r3, #16
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a15      	ldr	r2, [pc, #84]	; (8007790 <TIM_OC5_SetConfig+0xac>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00b      	beq.n	8007756 <TIM_OC5_SetConfig+0x72>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a14      	ldr	r2, [pc, #80]	; (8007794 <TIM_OC5_SetConfig+0xb0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d007      	beq.n	8007756 <TIM_OC5_SetConfig+0x72>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a13      	ldr	r2, [pc, #76]	; (8007798 <TIM_OC5_SetConfig+0xb4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d003      	beq.n	8007756 <TIM_OC5_SetConfig+0x72>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a12      	ldr	r2, [pc, #72]	; (800779c <TIM_OC5_SetConfig+0xb8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d109      	bne.n	800776a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800775c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	4313      	orrs	r3, r2
 8007768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	621a      	str	r2, [r3, #32]
}
 8007784:	bf00      	nop
 8007786:	371c      	adds	r7, #28
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40012c00 	.word	0x40012c00
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800

080077a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	051b      	lsls	r3, r3, #20
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a16      	ldr	r2, [pc, #88]	; (8007850 <TIM_OC6_SetConfig+0xb0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d00b      	beq.n	8007814 <TIM_OC6_SetConfig+0x74>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a15      	ldr	r2, [pc, #84]	; (8007854 <TIM_OC6_SetConfig+0xb4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d007      	beq.n	8007814 <TIM_OC6_SetConfig+0x74>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a14      	ldr	r2, [pc, #80]	; (8007858 <TIM_OC6_SetConfig+0xb8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d003      	beq.n	8007814 <TIM_OC6_SetConfig+0x74>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a13      	ldr	r2, [pc, #76]	; (800785c <TIM_OC6_SetConfig+0xbc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d109      	bne.n	8007828 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800781a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	029b      	lsls	r3, r3, #10
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	621a      	str	r2, [r3, #32]
}
 8007842:	bf00      	nop
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	40012c00 	.word	0x40012c00
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800

08007860 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f003 031f 	and.w	r3, r3, #31
 8007872:	2201      	movs	r2, #1
 8007874:	fa02 f303 	lsl.w	r3, r2, r3
 8007878:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a1a      	ldr	r2, [r3, #32]
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	43db      	mvns	r3, r3
 8007882:	401a      	ands	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1a      	ldr	r2, [r3, #32]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f003 031f 	and.w	r3, r3, #31
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	fa01 f303 	lsl.w	r3, r1, r3
 8007898:	431a      	orrs	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	621a      	str	r2, [r3, #32]
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
	...

080078ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e054      	b.n	800796e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a24      	ldr	r2, [pc, #144]	; (800797c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d108      	bne.n	8007900 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a17      	ldr	r2, [pc, #92]	; (800797c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00e      	beq.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792c:	d009      	beq.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a13      	ldr	r2, [pc, #76]	; (8007980 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d004      	beq.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a11      	ldr	r2, [pc, #68]	; (8007984 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d10c      	bne.n	800795c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	4313      	orrs	r3, r2
 8007952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	40012c00 	.word	0x40012c00
 8007980:	40000400 	.word	0x40000400
 8007984:	40014000 	.word	0x40014000

08007988 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e060      	b.n	8007a66 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	041b      	lsls	r3, r3, #16
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a14      	ldr	r2, [pc, #80]	; (8007a74 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d115      	bne.n	8007a54 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	051b      	lsls	r3, r3, #20
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	40012c00 	.word	0x40012c00

08007a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e040      	b.n	8007b48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7fb fc4e 	bl	8003378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2224      	movs	r2, #36	; 0x24
 8007ae0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0201 	bic.w	r2, r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fbc0 	bl	8008278 <UART_SetConfig>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e022      	b.n	8007b48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fcec 	bl	80084e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0201 	orr.w	r2, r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fd73 	bl	800862c <UART_CheckIdleState>
 8007b46:	4603      	mov	r3, r0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08a      	sub	sp, #40	; 0x28
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	f040 8082 	bne.w	8007c6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <HAL_UART_Transmit+0x26>
 8007b70:	88fb      	ldrh	r3, [r7, #6]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e07a      	b.n	8007c70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_UART_Transmit+0x38>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e073      	b.n	8007c70 <HAL_UART_Transmit+0x120>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2221      	movs	r2, #33	; 0x21
 8007b9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b9e:	f7fb fda5 	bl	80036ec <HAL_GetTick>
 8007ba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	88fa      	ldrh	r2, [r7, #6]
 8007ba8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	88fa      	ldrh	r2, [r7, #6]
 8007bb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bbc:	d108      	bne.n	8007bd0 <HAL_UART_Transmit+0x80>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d104      	bne.n	8007bd0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	61bb      	str	r3, [r7, #24]
 8007bce:	e003      	b.n	8007bd8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007be0:	e02d      	b.n	8007c3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2200      	movs	r2, #0
 8007bea:	2180      	movs	r1, #128	; 0x80
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fd66 	bl	80086be <UART_WaitOnFlagUntilTimeout>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e039      	b.n	8007c70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10b      	bne.n	8007c1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	881a      	ldrh	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	3302      	adds	r3, #2
 8007c16:	61bb      	str	r3, [r7, #24]
 8007c18:	e008      	b.n	8007c2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	781a      	ldrb	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	b292      	uxth	r2, r2
 8007c24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	3b01      	subs	r3, #1
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1cb      	bne.n	8007be2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2200      	movs	r2, #0
 8007c52:	2140      	movs	r1, #64	; 0x40
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 fd32 	bl	80086be <UART_WaitOnFlagUntilTimeout>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e005      	b.n	8007c70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e000      	b.n	8007c70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007c6e:	2302      	movs	r3, #2
  }
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3720      	adds	r7, #32
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b0ba      	sub	sp, #232	; 0xe8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ca2:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d115      	bne.n	8007ce0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb8:	f003 0320 	and.w	r3, r3, #32
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00f      	beq.n	8007ce0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d009      	beq.n	8007ce0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 82a4 	beq.w	800821e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
      }
      return;
 8007cde:	e29e      	b.n	800821e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8117 	beq.w	8007f18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007cf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007cfa:	4b85      	ldr	r3, [pc, #532]	; (8007f10 <HAL_UART_IRQHandler+0x298>)
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 810a 	beq.w	8007f18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d011      	beq.n	8007d34 <HAL_UART_IRQHandler+0xbc>
 8007d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00b      	beq.n	8007d34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2201      	movs	r2, #1
 8007d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d2a:	f043 0201 	orr.w	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d011      	beq.n	8007d64 <HAL_UART_IRQHandler+0xec>
 8007d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2202      	movs	r2, #2
 8007d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d5a:	f043 0204 	orr.w	r2, r3, #4
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d011      	beq.n	8007d94 <HAL_UART_IRQHandler+0x11c>
 8007d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2204      	movs	r2, #4
 8007d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d8a:	f043 0202 	orr.w	r2, r3, #2
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d017      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d105      	bne.n	8007db8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007db0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2208      	movs	r2, #8
 8007dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dc6:	f043 0208 	orr.w	r2, r3, #8
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d012      	beq.n	8007e02 <HAL_UART_IRQHandler+0x18a>
 8007ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007de0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00c      	beq.n	8007e02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007df0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007df8:	f043 0220 	orr.w	r2, r3, #32
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 820a 	beq.w	8008222 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00d      	beq.n	8007e36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d005      	beq.n	8007e5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d04f      	beq.n	8007efa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fcf3 	bl	8008846 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6a:	2b40      	cmp	r3, #64	; 0x40
 8007e6c:	d141      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3308      	adds	r3, #8
 8007e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3308      	adds	r3, #8
 8007e96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1d9      	bne.n	8007e6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d013      	beq.n	8007eea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec6:	4a13      	ldr	r2, [pc, #76]	; (8007f14 <HAL_UART_IRQHandler+0x29c>)
 8007ec8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fc fdde 	bl	8004a90 <HAL_DMA_Abort_IT>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d017      	beq.n	8007f0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee8:	e00f      	b.n	8007f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f9ae 	bl	800824c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef0:	e00b      	b.n	8007f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f9aa 	bl	800824c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef8:	e007      	b.n	8007f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f9a6 	bl	800824c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007f08:	e18b      	b.n	8008222 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f0a:	bf00      	nop
    return;
 8007f0c:	e189      	b.n	8008222 <HAL_UART_IRQHandler+0x5aa>
 8007f0e:	bf00      	nop
 8007f10:	04000120 	.word	0x04000120
 8007f14:	0800890d 	.word	0x0800890d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	f040 8143 	bne.w	80081a8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f26:	f003 0310 	and.w	r3, r3, #16
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 813c 	beq.w	80081a8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f34:	f003 0310 	and.w	r3, r3, #16
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 8135 	beq.w	80081a8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2210      	movs	r2, #16
 8007f44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f50:	2b40      	cmp	r3, #64	; 0x40
 8007f52:	f040 80b1 	bne.w	80080b8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 815d 	beq.w	8008226 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f76:	429a      	cmp	r2, r3
 8007f78:	f080 8155 	bcs.w	8008226 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	f000 8085 	beq.w	800809c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007faa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007fc0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1da      	bne.n	8007f92 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fe6:	e853 3f00 	ldrex	r3, [r3]
 8007fea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fee:	f023 0301 	bic.w	r3, r3, #1
 8007ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008000:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008004:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008006:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008008:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e1      	bne.n	8007fdc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800802a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800803c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800803e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008042:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800804a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e3      	bne.n	8008018 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800806a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800806c:	f023 0310 	bic.w	r3, r3, #16
 8008070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800807e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008080:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008084:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800808c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e4      	bne.n	800805c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008096:	4618      	mov	r0, r3
 8008098:	f7fc fcc1 	bl	8004a1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f8d5 	bl	8008260 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080b6:	e0b6      	b.n	8008226 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80a8 	beq.w	800822a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80080da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 80a3 	beq.w	800822a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008106:	647b      	str	r3, [r7, #68]	; 0x44
 8008108:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800810c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e4      	bne.n	80080e4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3308      	adds	r3, #8
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	623b      	str	r3, [r7, #32]
   return(result);
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	f023 0301 	bic.w	r3, r3, #1
 8008130:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800813e:	633a      	str	r2, [r7, #48]	; 0x30
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e3      	bne.n	800811a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	60fb      	str	r3, [r7, #12]
   return(result);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f023 0310 	bic.w	r3, r3, #16
 8008178:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008186:	61fb      	str	r3, [r7, #28]
 8008188:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	69b9      	ldr	r1, [r7, #24]
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	617b      	str	r3, [r7, #20]
   return(result);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e4      	bne.n	8008164 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800819a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f85d 	bl	8008260 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081a6:	e040      	b.n	800822a <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <HAL_UART_IRQHandler+0x55a>
 80081b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d008      	beq.n	80081d2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fbde 	bl	800898c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081d0:	e02e      	b.n	8008230 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00e      	beq.n	80081fc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80081de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d008      	beq.n	80081fc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d01d      	beq.n	800822e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
    }
    return;
 80081fa:	e018      	b.n	800822e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d013      	beq.n	8008230 <HAL_UART_IRQHandler+0x5b8>
 8008208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800820c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00d      	beq.n	8008230 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fb8f 	bl	8008938 <UART_EndTransmit_IT>
    return;
 800821a:	bf00      	nop
 800821c:	e008      	b.n	8008230 <HAL_UART_IRQHandler+0x5b8>
      return;
 800821e:	bf00      	nop
 8008220:	e006      	b.n	8008230 <HAL_UART_IRQHandler+0x5b8>
    return;
 8008222:	bf00      	nop
 8008224:	e004      	b.n	8008230 <HAL_UART_IRQHandler+0x5b8>
      return;
 8008226:	bf00      	nop
 8008228:	e002      	b.n	8008230 <HAL_UART_IRQHandler+0x5b8>
      return;
 800822a:	bf00      	nop
 800822c:	e000      	b.n	8008230 <HAL_UART_IRQHandler+0x5b8>
    return;
 800822e:	bf00      	nop
  }

}
 8008230:	37e8      	adds	r7, #232	; 0xe8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop

08008238 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	431a      	orrs	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	4b8b      	ldr	r3, [pc, #556]	; (80084d0 <UART_SetConfig+0x258>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	6979      	ldr	r1, [r7, #20]
 80082ac:	430b      	orrs	r3, r1
 80082ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a79      	ldr	r2, [pc, #484]	; (80084d4 <UART_SetConfig+0x25c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d121      	bne.n	8008338 <UART_SetConfig+0xc0>
 80082f4:	4b78      	ldr	r3, [pc, #480]	; (80084d8 <UART_SetConfig+0x260>)
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d817      	bhi.n	8008330 <UART_SetConfig+0xb8>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <UART_SetConfig+0x90>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008319 	.word	0x08008319
 800830c:	08008325 	.word	0x08008325
 8008310:	0800832b 	.word	0x0800832b
 8008314:	0800831f 	.word	0x0800831f
 8008318:	2300      	movs	r3, #0
 800831a:	77fb      	strb	r3, [r7, #31]
 800831c:	e01e      	b.n	800835c <UART_SetConfig+0xe4>
 800831e:	2302      	movs	r3, #2
 8008320:	77fb      	strb	r3, [r7, #31]
 8008322:	e01b      	b.n	800835c <UART_SetConfig+0xe4>
 8008324:	2304      	movs	r3, #4
 8008326:	77fb      	strb	r3, [r7, #31]
 8008328:	e018      	b.n	800835c <UART_SetConfig+0xe4>
 800832a:	2308      	movs	r3, #8
 800832c:	77fb      	strb	r3, [r7, #31]
 800832e:	e015      	b.n	800835c <UART_SetConfig+0xe4>
 8008330:	2310      	movs	r3, #16
 8008332:	77fb      	strb	r3, [r7, #31]
 8008334:	bf00      	nop
 8008336:	e011      	b.n	800835c <UART_SetConfig+0xe4>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a67      	ldr	r2, [pc, #412]	; (80084dc <UART_SetConfig+0x264>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d102      	bne.n	8008348 <UART_SetConfig+0xd0>
 8008342:	2300      	movs	r3, #0
 8008344:	77fb      	strb	r3, [r7, #31]
 8008346:	e009      	b.n	800835c <UART_SetConfig+0xe4>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a64      	ldr	r2, [pc, #400]	; (80084e0 <UART_SetConfig+0x268>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d102      	bne.n	8008358 <UART_SetConfig+0xe0>
 8008352:	2300      	movs	r3, #0
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	e001      	b.n	800835c <UART_SetConfig+0xe4>
 8008358:	2310      	movs	r3, #16
 800835a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008364:	d15c      	bne.n	8008420 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8008366:	7ffb      	ldrb	r3, [r7, #31]
 8008368:	2b08      	cmp	r3, #8
 800836a:	d828      	bhi.n	80083be <UART_SetConfig+0x146>
 800836c:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <UART_SetConfig+0xfc>)
 800836e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008372:	bf00      	nop
 8008374:	08008399 	.word	0x08008399
 8008378:	080083a1 	.word	0x080083a1
 800837c:	080083a9 	.word	0x080083a9
 8008380:	080083bf 	.word	0x080083bf
 8008384:	080083af 	.word	0x080083af
 8008388:	080083bf 	.word	0x080083bf
 800838c:	080083bf 	.word	0x080083bf
 8008390:	080083bf 	.word	0x080083bf
 8008394:	080083b7 	.word	0x080083b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008398:	f7fe f854 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 800839c:	61b8      	str	r0, [r7, #24]
        break;
 800839e:	e013      	b.n	80083c8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a0:	f7fe f872 	bl	8006488 <HAL_RCC_GetPCLK2Freq>
 80083a4:	61b8      	str	r0, [r7, #24]
        break;
 80083a6:	e00f      	b.n	80083c8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083a8:	4b4e      	ldr	r3, [pc, #312]	; (80084e4 <UART_SetConfig+0x26c>)
 80083aa:	61bb      	str	r3, [r7, #24]
        break;
 80083ac:	e00c      	b.n	80083c8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ae:	f7fd ffd3 	bl	8006358 <HAL_RCC_GetSysClockFreq>
 80083b2:	61b8      	str	r0, [r7, #24]
        break;
 80083b4:	e008      	b.n	80083c8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ba:	61bb      	str	r3, [r7, #24]
        break;
 80083bc:	e004      	b.n	80083c8 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	77bb      	strb	r3, [r7, #30]
        break;
 80083c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d074      	beq.n	80084b8 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	005a      	lsls	r2, r3, #1
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	085b      	lsrs	r3, r3, #1
 80083d8:	441a      	add	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	2b0f      	cmp	r3, #15
 80083ea:	d916      	bls.n	800841a <UART_SetConfig+0x1a2>
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f2:	d212      	bcs.n	800841a <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	f023 030f 	bic.w	r3, r3, #15
 80083fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	085b      	lsrs	r3, r3, #1
 8008402:	b29b      	uxth	r3, r3
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	b29a      	uxth	r2, r3
 800840a:	89fb      	ldrh	r3, [r7, #14]
 800840c:	4313      	orrs	r3, r2
 800840e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	89fa      	ldrh	r2, [r7, #14]
 8008416:	60da      	str	r2, [r3, #12]
 8008418:	e04e      	b.n	80084b8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	77bb      	strb	r3, [r7, #30]
 800841e:	e04b      	b.n	80084b8 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008420:	7ffb      	ldrb	r3, [r7, #31]
 8008422:	2b08      	cmp	r3, #8
 8008424:	d827      	bhi.n	8008476 <UART_SetConfig+0x1fe>
 8008426:	a201      	add	r2, pc, #4	; (adr r2, 800842c <UART_SetConfig+0x1b4>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	08008451 	.word	0x08008451
 8008430:	08008459 	.word	0x08008459
 8008434:	08008461 	.word	0x08008461
 8008438:	08008477 	.word	0x08008477
 800843c:	08008467 	.word	0x08008467
 8008440:	08008477 	.word	0x08008477
 8008444:	08008477 	.word	0x08008477
 8008448:	08008477 	.word	0x08008477
 800844c:	0800846f 	.word	0x0800846f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008450:	f7fd fff8 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 8008454:	61b8      	str	r0, [r7, #24]
        break;
 8008456:	e013      	b.n	8008480 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008458:	f7fe f816 	bl	8006488 <HAL_RCC_GetPCLK2Freq>
 800845c:	61b8      	str	r0, [r7, #24]
        break;
 800845e:	e00f      	b.n	8008480 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008460:	4b20      	ldr	r3, [pc, #128]	; (80084e4 <UART_SetConfig+0x26c>)
 8008462:	61bb      	str	r3, [r7, #24]
        break;
 8008464:	e00c      	b.n	8008480 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008466:	f7fd ff77 	bl	8006358 <HAL_RCC_GetSysClockFreq>
 800846a:	61b8      	str	r0, [r7, #24]
        break;
 800846c:	e008      	b.n	8008480 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800846e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008472:	61bb      	str	r3, [r7, #24]
        break;
 8008474:	e004      	b.n	8008480 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	77bb      	strb	r3, [r7, #30]
        break;
 800847e:	bf00      	nop
    }

    if (pclk != 0U)
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d018      	beq.n	80084b8 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	085a      	lsrs	r2, r3, #1
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	441a      	add	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	fbb2 f3f3 	udiv	r3, r2, r3
 8008498:	b29b      	uxth	r3, r3
 800849a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	2b0f      	cmp	r3, #15
 80084a0:	d908      	bls.n	80084b4 <UART_SetConfig+0x23c>
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a8:	d204      	bcs.n	80084b4 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	60da      	str	r2, [r3, #12]
 80084b2:	e001      	b.n	80084b8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80084c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3720      	adds	r7, #32
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	efff69f3 	.word	0xefff69f3
 80084d4:	40013800 	.word	0x40013800
 80084d8:	40021000 	.word	0x40021000
 80084dc:	40004400 	.word	0x40004400
 80084e0:	40004800 	.word	0x40004800
 80084e4:	007a1200 	.word	0x007a1200

080084e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00a      	beq.n	8008512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855a:	f003 0308 	and.w	r3, r3, #8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00a      	beq.n	800859a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00a      	beq.n	80085bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01a      	beq.n	80085fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085e6:	d10a      	bne.n	80085fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	430a      	orrs	r2, r1
 800861e:	605a      	str	r2, [r3, #4]
  }
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af02      	add	r7, sp, #8
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800863c:	f7fb f856 	bl	80036ec <HAL_GetTick>
 8008640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	2b08      	cmp	r3, #8
 800864e:	d10e      	bne.n	800866e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f82d 	bl	80086be <UART_WaitOnFlagUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e023      	b.n	80086b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b04      	cmp	r3, #4
 800867a:	d10e      	bne.n	800869a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800867c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f817 	bl	80086be <UART_WaitOnFlagUntilTimeout>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e00d      	b.n	80086b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b09c      	sub	sp, #112	; 0x70
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	603b      	str	r3, [r7, #0]
 80086ca:	4613      	mov	r3, r2
 80086cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ce:	e0a5      	b.n	800881c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d6:	f000 80a1 	beq.w	800881c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086da:	f7fb f807 	bl	80036ec <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d302      	bcc.n	80086f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80086ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d13e      	bne.n	800876e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008704:	667b      	str	r3, [r7, #100]	; 0x64
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800870e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008710:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008714:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800871c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e6      	bne.n	80086f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3308      	adds	r3, #8
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	f023 0301 	bic.w	r3, r3, #1
 8008738:	663b      	str	r3, [r7, #96]	; 0x60
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3308      	adds	r3, #8
 8008740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008742:	64ba      	str	r2, [r7, #72]	; 0x48
 8008744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e5      	bne.n	8008722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2220      	movs	r2, #32
 800875a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2220      	movs	r2, #32
 8008760:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e067      	b.n	800883e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0304 	and.w	r3, r3, #4
 8008778:	2b00      	cmp	r3, #0
 800877a:	d04f      	beq.n	800881c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800878a:	d147      	bne.n	800881c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008794:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b4:	637b      	str	r3, [r7, #52]	; 0x34
 80087b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e6      	bne.n	8008796 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3308      	adds	r3, #8
 80087ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	613b      	str	r3, [r7, #16]
   return(result);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f023 0301 	bic.w	r3, r3, #1
 80087de:	66bb      	str	r3, [r7, #104]	; 0x68
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3308      	adds	r3, #8
 80087e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087e8:	623a      	str	r2, [r7, #32]
 80087ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	69f9      	ldr	r1, [r7, #28]
 80087ee:	6a3a      	ldr	r2, [r7, #32]
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e5      	bne.n	80087c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2220      	movs	r2, #32
 8008800:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2220      	movs	r2, #32
 8008806:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2220      	movs	r2, #32
 800880c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e010      	b.n	800883e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	69da      	ldr	r2, [r3, #28]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	4013      	ands	r3, r2
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	429a      	cmp	r2, r3
 800882a:	bf0c      	ite	eq
 800882c:	2301      	moveq	r3, #1
 800882e:	2300      	movne	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	429a      	cmp	r2, r3
 8008838:	f43f af4a 	beq.w	80086d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3770      	adds	r7, #112	; 0x70
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008846:	b480      	push	{r7}
 8008848:	b095      	sub	sp, #84	; 0x54
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800886c:	643b      	str	r3, [r7, #64]	; 0x40
 800886e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e6      	bne.n	800884e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3308      	adds	r3, #8
 8008886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	f023 0301 	bic.w	r3, r3, #1
 8008896:	64bb      	str	r3, [r7, #72]	; 0x48
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3308      	adds	r3, #8
 800889e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e5      	bne.n	8008880 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d118      	bne.n	80088ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f023 0310 	bic.w	r3, r3, #16
 80088d0:	647b      	str	r3, [r7, #68]	; 0x44
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088da:	61bb      	str	r3, [r7, #24]
 80088dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6979      	ldr	r1, [r7, #20]
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	613b      	str	r3, [r7, #16]
   return(result);
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e6      	bne.n	80088bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2220      	movs	r2, #32
 80088f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008900:	bf00      	nop
 8008902:	3754      	adds	r7, #84	; 0x54
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff fc8e 	bl	800824c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	60bb      	str	r3, [r7, #8]
   return(result);
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008954:	61fb      	str	r3, [r7, #28]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6979      	ldr	r1, [r7, #20]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	613b      	str	r3, [r7, #16]
   return(result);
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e6      	bne.n	8008940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff fc5a 	bl	8008238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008984:	bf00      	nop
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <tan>:
 80089a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089a2:	ec51 0b10 	vmov	r0, r1, d0
 80089a6:	4a14      	ldr	r2, [pc, #80]	; (80089f8 <tan+0x58>)
 80089a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089ac:	4293      	cmp	r3, r2
 80089ae:	dc05      	bgt.n	80089bc <tan+0x1c>
 80089b0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80089f0 <tan+0x50>
 80089b4:	2001      	movs	r0, #1
 80089b6:	f000 fd57 	bl	8009468 <__kernel_tan>
 80089ba:	e009      	b.n	80089d0 <tan+0x30>
 80089bc:	4a0f      	ldr	r2, [pc, #60]	; (80089fc <tan+0x5c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	dd09      	ble.n	80089d6 <tan+0x36>
 80089c2:	ee10 2a10 	vmov	r2, s0
 80089c6:	460b      	mov	r3, r1
 80089c8:	f7f7 fc5e 	bl	8000288 <__aeabi_dsub>
 80089cc:	ec41 0b10 	vmov	d0, r0, r1
 80089d0:	b005      	add	sp, #20
 80089d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80089d6:	4668      	mov	r0, sp
 80089d8:	f000 f812 	bl	8008a00 <__ieee754_rem_pio2>
 80089dc:	0040      	lsls	r0, r0, #1
 80089de:	f000 0002 	and.w	r0, r0, #2
 80089e2:	f1c0 0001 	rsb	r0, r0, #1
 80089e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80089ea:	ed9d 0b00 	vldr	d0, [sp]
 80089ee:	e7e2      	b.n	80089b6 <tan+0x16>
	...
 80089f8:	3fe921fb 	.word	0x3fe921fb
 80089fc:	7fefffff 	.word	0x7fefffff

08008a00 <__ieee754_rem_pio2>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	ec57 6b10 	vmov	r6, r7, d0
 8008a08:	4bc3      	ldr	r3, [pc, #780]	; (8008d18 <__ieee754_rem_pio2+0x318>)
 8008a0a:	b08d      	sub	sp, #52	; 0x34
 8008a0c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008a10:	4598      	cmp	r8, r3
 8008a12:	4604      	mov	r4, r0
 8008a14:	9704      	str	r7, [sp, #16]
 8008a16:	dc07      	bgt.n	8008a28 <__ieee754_rem_pio2+0x28>
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	ed84 0b00 	vstr	d0, [r4]
 8008a20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008a24:	2500      	movs	r5, #0
 8008a26:	e027      	b.n	8008a78 <__ieee754_rem_pio2+0x78>
 8008a28:	4bbc      	ldr	r3, [pc, #752]	; (8008d1c <__ieee754_rem_pio2+0x31c>)
 8008a2a:	4598      	cmp	r8, r3
 8008a2c:	dc75      	bgt.n	8008b1a <__ieee754_rem_pio2+0x11a>
 8008a2e:	9b04      	ldr	r3, [sp, #16]
 8008a30:	4dbb      	ldr	r5, [pc, #748]	; (8008d20 <__ieee754_rem_pio2+0x320>)
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	ee10 0a10 	vmov	r0, s0
 8008a38:	a3a9      	add	r3, pc, #676	; (adr r3, 8008ce0 <__ieee754_rem_pio2+0x2e0>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	4639      	mov	r1, r7
 8008a40:	dd36      	ble.n	8008ab0 <__ieee754_rem_pio2+0xb0>
 8008a42:	f7f7 fc21 	bl	8000288 <__aeabi_dsub>
 8008a46:	45a8      	cmp	r8, r5
 8008a48:	4606      	mov	r6, r0
 8008a4a:	460f      	mov	r7, r1
 8008a4c:	d018      	beq.n	8008a80 <__ieee754_rem_pio2+0x80>
 8008a4e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008ce8 <__ieee754_rem_pio2+0x2e8>)
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	f7f7 fc18 	bl	8000288 <__aeabi_dsub>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	e9c4 2300 	strd	r2, r3, [r4]
 8008a60:	4630      	mov	r0, r6
 8008a62:	4639      	mov	r1, r7
 8008a64:	f7f7 fc10 	bl	8000288 <__aeabi_dsub>
 8008a68:	a39f      	add	r3, pc, #636	; (adr r3, 8008ce8 <__ieee754_rem_pio2+0x2e8>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	f7f7 fc0b 	bl	8000288 <__aeabi_dsub>
 8008a72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a76:	2501      	movs	r5, #1
 8008a78:	4628      	mov	r0, r5
 8008a7a:	b00d      	add	sp, #52	; 0x34
 8008a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a80:	a39b      	add	r3, pc, #620	; (adr r3, 8008cf0 <__ieee754_rem_pio2+0x2f0>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fbff 	bl	8000288 <__aeabi_dsub>
 8008a8a:	a39b      	add	r3, pc, #620	; (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2f8>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	4606      	mov	r6, r0
 8008a92:	460f      	mov	r7, r1
 8008a94:	f7f7 fbf8 	bl	8000288 <__aeabi_dsub>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	e9c4 2300 	strd	r2, r3, [r4]
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	f7f7 fbf0 	bl	8000288 <__aeabi_dsub>
 8008aa8:	a393      	add	r3, pc, #588	; (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2f8>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	e7de      	b.n	8008a6e <__ieee754_rem_pio2+0x6e>
 8008ab0:	f7f7 fbec 	bl	800028c <__adddf3>
 8008ab4:	45a8      	cmp	r8, r5
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	460f      	mov	r7, r1
 8008aba:	d016      	beq.n	8008aea <__ieee754_rem_pio2+0xea>
 8008abc:	a38a      	add	r3, pc, #552	; (adr r3, 8008ce8 <__ieee754_rem_pio2+0x2e8>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fbe3 	bl	800028c <__adddf3>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	e9c4 2300 	strd	r2, r3, [r4]
 8008ace:	4630      	mov	r0, r6
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	f7f7 fbd9 	bl	8000288 <__aeabi_dsub>
 8008ad6:	a384      	add	r3, pc, #528	; (adr r3, 8008ce8 <__ieee754_rem_pio2+0x2e8>)
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	f7f7 fbd6 	bl	800028c <__adddf3>
 8008ae0:	f04f 35ff 	mov.w	r5, #4294967295
 8008ae4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ae8:	e7c6      	b.n	8008a78 <__ieee754_rem_pio2+0x78>
 8008aea:	a381      	add	r3, pc, #516	; (adr r3, 8008cf0 <__ieee754_rem_pio2+0x2f0>)
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f7f7 fbcc 	bl	800028c <__adddf3>
 8008af4:	a380      	add	r3, pc, #512	; (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2f8>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	4606      	mov	r6, r0
 8008afc:	460f      	mov	r7, r1
 8008afe:	f7f7 fbc5 	bl	800028c <__adddf3>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	e9c4 2300 	strd	r2, r3, [r4]
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	4639      	mov	r1, r7
 8008b0e:	f7f7 fbbb 	bl	8000288 <__aeabi_dsub>
 8008b12:	a379      	add	r3, pc, #484	; (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2f8>)
 8008b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b18:	e7e0      	b.n	8008adc <__ieee754_rem_pio2+0xdc>
 8008b1a:	4b82      	ldr	r3, [pc, #520]	; (8008d24 <__ieee754_rem_pio2+0x324>)
 8008b1c:	4598      	cmp	r8, r3
 8008b1e:	f300 80d0 	bgt.w	8008cc2 <__ieee754_rem_pio2+0x2c2>
 8008b22:	f000 fe6d 	bl	8009800 <fabs>
 8008b26:	ec57 6b10 	vmov	r6, r7, d0
 8008b2a:	ee10 0a10 	vmov	r0, s0
 8008b2e:	a374      	add	r3, pc, #464	; (adr r3, 8008d00 <__ieee754_rem_pio2+0x300>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	4639      	mov	r1, r7
 8008b36:	f7f7 fd5f 	bl	80005f8 <__aeabi_dmul>
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	4b7a      	ldr	r3, [pc, #488]	; (8008d28 <__ieee754_rem_pio2+0x328>)
 8008b3e:	f7f7 fba5 	bl	800028c <__adddf3>
 8008b42:	f7f8 f809 	bl	8000b58 <__aeabi_d2iz>
 8008b46:	4605      	mov	r5, r0
 8008b48:	f7f7 fcec 	bl	8000524 <__aeabi_i2d>
 8008b4c:	a364      	add	r3, pc, #400	; (adr r3, 8008ce0 <__ieee754_rem_pio2+0x2e0>)
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b56:	f7f7 fd4f 	bl	80005f8 <__aeabi_dmul>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4639      	mov	r1, r7
 8008b62:	f7f7 fb91 	bl	8000288 <__aeabi_dsub>
 8008b66:	a360      	add	r3, pc, #384	; (adr r3, 8008ce8 <__ieee754_rem_pio2+0x2e8>)
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	4682      	mov	sl, r0
 8008b6e:	468b      	mov	fp, r1
 8008b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b74:	f7f7 fd40 	bl	80005f8 <__aeabi_dmul>
 8008b78:	2d1f      	cmp	r5, #31
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	460f      	mov	r7, r1
 8008b7e:	dc0c      	bgt.n	8008b9a <__ieee754_rem_pio2+0x19a>
 8008b80:	1e6a      	subs	r2, r5, #1
 8008b82:	4b6a      	ldr	r3, [pc, #424]	; (8008d2c <__ieee754_rem_pio2+0x32c>)
 8008b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b88:	4543      	cmp	r3, r8
 8008b8a:	d006      	beq.n	8008b9a <__ieee754_rem_pio2+0x19a>
 8008b8c:	4632      	mov	r2, r6
 8008b8e:	463b      	mov	r3, r7
 8008b90:	4650      	mov	r0, sl
 8008b92:	4659      	mov	r1, fp
 8008b94:	f7f7 fb78 	bl	8000288 <__aeabi_dsub>
 8008b98:	e00e      	b.n	8008bb8 <__ieee754_rem_pio2+0x1b8>
 8008b9a:	4632      	mov	r2, r6
 8008b9c:	463b      	mov	r3, r7
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	4659      	mov	r1, fp
 8008ba2:	f7f7 fb71 	bl	8000288 <__aeabi_dsub>
 8008ba6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008baa:	9305      	str	r3, [sp, #20]
 8008bac:	9a05      	ldr	r2, [sp, #20]
 8008bae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b10      	cmp	r3, #16
 8008bb6:	dc02      	bgt.n	8008bbe <__ieee754_rem_pio2+0x1be>
 8008bb8:	e9c4 0100 	strd	r0, r1, [r4]
 8008bbc:	e039      	b.n	8008c32 <__ieee754_rem_pio2+0x232>
 8008bbe:	a34c      	add	r3, pc, #304	; (adr r3, 8008cf0 <__ieee754_rem_pio2+0x2f0>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bc8:	f7f7 fd16 	bl	80005f8 <__aeabi_dmul>
 8008bcc:	4606      	mov	r6, r0
 8008bce:	460f      	mov	r7, r1
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4650      	mov	r0, sl
 8008bd6:	4659      	mov	r1, fp
 8008bd8:	f7f7 fb56 	bl	8000288 <__aeabi_dsub>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4680      	mov	r8, r0
 8008be2:	4689      	mov	r9, r1
 8008be4:	4650      	mov	r0, sl
 8008be6:	4659      	mov	r1, fp
 8008be8:	f7f7 fb4e 	bl	8000288 <__aeabi_dsub>
 8008bec:	4632      	mov	r2, r6
 8008bee:	463b      	mov	r3, r7
 8008bf0:	f7f7 fb4a 	bl	8000288 <__aeabi_dsub>
 8008bf4:	a340      	add	r3, pc, #256	; (adr r3, 8008cf8 <__ieee754_rem_pio2+0x2f8>)
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	460f      	mov	r7, r1
 8008bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c02:	f7f7 fcf9 	bl	80005f8 <__aeabi_dmul>
 8008c06:	4632      	mov	r2, r6
 8008c08:	463b      	mov	r3, r7
 8008c0a:	f7f7 fb3d 	bl	8000288 <__aeabi_dsub>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4606      	mov	r6, r0
 8008c14:	460f      	mov	r7, r1
 8008c16:	4640      	mov	r0, r8
 8008c18:	4649      	mov	r1, r9
 8008c1a:	f7f7 fb35 	bl	8000288 <__aeabi_dsub>
 8008c1e:	9a05      	ldr	r2, [sp, #20]
 8008c20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b31      	cmp	r3, #49	; 0x31
 8008c28:	dc20      	bgt.n	8008c6c <__ieee754_rem_pio2+0x26c>
 8008c2a:	e9c4 0100 	strd	r0, r1, [r4]
 8008c2e:	46c2      	mov	sl, r8
 8008c30:	46cb      	mov	fp, r9
 8008c32:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008c36:	4650      	mov	r0, sl
 8008c38:	4642      	mov	r2, r8
 8008c3a:	464b      	mov	r3, r9
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	f7f7 fb23 	bl	8000288 <__aeabi_dsub>
 8008c42:	463b      	mov	r3, r7
 8008c44:	4632      	mov	r2, r6
 8008c46:	f7f7 fb1f 	bl	8000288 <__aeabi_dsub>
 8008c4a:	9b04      	ldr	r3, [sp, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c52:	f6bf af11 	bge.w	8008a78 <__ieee754_rem_pio2+0x78>
 8008c56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c5a:	6063      	str	r3, [r4, #4]
 8008c5c:	f8c4 8000 	str.w	r8, [r4]
 8008c60:	60a0      	str	r0, [r4, #8]
 8008c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c66:	60e3      	str	r3, [r4, #12]
 8008c68:	426d      	negs	r5, r5
 8008c6a:	e705      	b.n	8008a78 <__ieee754_rem_pio2+0x78>
 8008c6c:	a326      	add	r3, pc, #152	; (adr r3, 8008d08 <__ieee754_rem_pio2+0x308>)
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c76:	f7f7 fcbf 	bl	80005f8 <__aeabi_dmul>
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	460f      	mov	r7, r1
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4640      	mov	r0, r8
 8008c84:	4649      	mov	r1, r9
 8008c86:	f7f7 faff 	bl	8000288 <__aeabi_dsub>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4682      	mov	sl, r0
 8008c90:	468b      	mov	fp, r1
 8008c92:	4640      	mov	r0, r8
 8008c94:	4649      	mov	r1, r9
 8008c96:	f7f7 faf7 	bl	8000288 <__aeabi_dsub>
 8008c9a:	4632      	mov	r2, r6
 8008c9c:	463b      	mov	r3, r7
 8008c9e:	f7f7 faf3 	bl	8000288 <__aeabi_dsub>
 8008ca2:	a31b      	add	r3, pc, #108	; (adr r3, 8008d10 <__ieee754_rem_pio2+0x310>)
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	4606      	mov	r6, r0
 8008caa:	460f      	mov	r7, r1
 8008cac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb0:	f7f7 fca2 	bl	80005f8 <__aeabi_dmul>
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	f7f7 fae6 	bl	8000288 <__aeabi_dsub>
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	460f      	mov	r7, r1
 8008cc0:	e764      	b.n	8008b8c <__ieee754_rem_pio2+0x18c>
 8008cc2:	4b1b      	ldr	r3, [pc, #108]	; (8008d30 <__ieee754_rem_pio2+0x330>)
 8008cc4:	4598      	cmp	r8, r3
 8008cc6:	dd35      	ble.n	8008d34 <__ieee754_rem_pio2+0x334>
 8008cc8:	ee10 2a10 	vmov	r2, s0
 8008ccc:	463b      	mov	r3, r7
 8008cce:	4630      	mov	r0, r6
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f7 fad9 	bl	8000288 <__aeabi_dsub>
 8008cd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008cda:	e9c4 0100 	strd	r0, r1, [r4]
 8008cde:	e6a1      	b.n	8008a24 <__ieee754_rem_pio2+0x24>
 8008ce0:	54400000 	.word	0x54400000
 8008ce4:	3ff921fb 	.word	0x3ff921fb
 8008ce8:	1a626331 	.word	0x1a626331
 8008cec:	3dd0b461 	.word	0x3dd0b461
 8008cf0:	1a600000 	.word	0x1a600000
 8008cf4:	3dd0b461 	.word	0x3dd0b461
 8008cf8:	2e037073 	.word	0x2e037073
 8008cfc:	3ba3198a 	.word	0x3ba3198a
 8008d00:	6dc9c883 	.word	0x6dc9c883
 8008d04:	3fe45f30 	.word	0x3fe45f30
 8008d08:	2e000000 	.word	0x2e000000
 8008d0c:	3ba3198a 	.word	0x3ba3198a
 8008d10:	252049c1 	.word	0x252049c1
 8008d14:	397b839a 	.word	0x397b839a
 8008d18:	3fe921fb 	.word	0x3fe921fb
 8008d1c:	4002d97b 	.word	0x4002d97b
 8008d20:	3ff921fb 	.word	0x3ff921fb
 8008d24:	413921fb 	.word	0x413921fb
 8008d28:	3fe00000 	.word	0x3fe00000
 8008d2c:	0800db30 	.word	0x0800db30
 8008d30:	7fefffff 	.word	0x7fefffff
 8008d34:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008d38:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008d3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008d40:	4630      	mov	r0, r6
 8008d42:	460f      	mov	r7, r1
 8008d44:	f7f7 ff08 	bl	8000b58 <__aeabi_d2iz>
 8008d48:	f7f7 fbec 	bl	8000524 <__aeabi_i2d>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d58:	f7f7 fa96 	bl	8000288 <__aeabi_dsub>
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4b1f      	ldr	r3, [pc, #124]	; (8008ddc <__ieee754_rem_pio2+0x3dc>)
 8008d60:	f7f7 fc4a 	bl	80005f8 <__aeabi_dmul>
 8008d64:	460f      	mov	r7, r1
 8008d66:	4606      	mov	r6, r0
 8008d68:	f7f7 fef6 	bl	8000b58 <__aeabi_d2iz>
 8008d6c:	f7f7 fbda 	bl	8000524 <__aeabi_i2d>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	4630      	mov	r0, r6
 8008d76:	4639      	mov	r1, r7
 8008d78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d7c:	f7f7 fa84 	bl	8000288 <__aeabi_dsub>
 8008d80:	2200      	movs	r2, #0
 8008d82:	4b16      	ldr	r3, [pc, #88]	; (8008ddc <__ieee754_rem_pio2+0x3dc>)
 8008d84:	f7f7 fc38 	bl	80005f8 <__aeabi_dmul>
 8008d88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d8c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008d90:	f04f 0803 	mov.w	r8, #3
 8008d94:	2600      	movs	r6, #0
 8008d96:	2700      	movs	r7, #0
 8008d98:	4632      	mov	r2, r6
 8008d9a:	463b      	mov	r3, r7
 8008d9c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008da0:	f108 3aff 	add.w	sl, r8, #4294967295
 8008da4:	f7f7 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8008da8:	b9b0      	cbnz	r0, 8008dd8 <__ieee754_rem_pio2+0x3d8>
 8008daa:	4b0d      	ldr	r3, [pc, #52]	; (8008de0 <__ieee754_rem_pio2+0x3e0>)
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	2302      	movs	r3, #2
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	462a      	mov	r2, r5
 8008db4:	4643      	mov	r3, r8
 8008db6:	4621      	mov	r1, r4
 8008db8:	a806      	add	r0, sp, #24
 8008dba:	f000 f815 	bl	8008de8 <__kernel_rem_pio2>
 8008dbe:	9b04      	ldr	r3, [sp, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	f6bf ae58 	bge.w	8008a78 <__ieee754_rem_pio2+0x78>
 8008dc8:	6863      	ldr	r3, [r4, #4]
 8008dca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008dce:	6063      	str	r3, [r4, #4]
 8008dd0:	68e3      	ldr	r3, [r4, #12]
 8008dd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008dd6:	e746      	b.n	8008c66 <__ieee754_rem_pio2+0x266>
 8008dd8:	46d0      	mov	r8, sl
 8008dda:	e7dd      	b.n	8008d98 <__ieee754_rem_pio2+0x398>
 8008ddc:	41700000 	.word	0x41700000
 8008de0:	0800dbb0 	.word	0x0800dbb0
 8008de4:	00000000 	.word	0x00000000

08008de8 <__kernel_rem_pio2>:
 8008de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dec:	ed2d 8b02 	vpush	{d8}
 8008df0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008df4:	1ed4      	subs	r4, r2, #3
 8008df6:	9308      	str	r3, [sp, #32]
 8008df8:	9101      	str	r1, [sp, #4]
 8008dfa:	4bc5      	ldr	r3, [pc, #788]	; (8009110 <__kernel_rem_pio2+0x328>)
 8008dfc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008dfe:	9009      	str	r0, [sp, #36]	; 0x24
 8008e00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	9b08      	ldr	r3, [sp, #32]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	9307      	str	r3, [sp, #28]
 8008e0c:	2318      	movs	r3, #24
 8008e0e:	fb94 f4f3 	sdiv	r4, r4, r3
 8008e12:	f06f 0317 	mvn.w	r3, #23
 8008e16:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008e1a:	fb04 3303 	mla	r3, r4, r3, r3
 8008e1e:	eb03 0a02 	add.w	sl, r3, r2
 8008e22:	9b04      	ldr	r3, [sp, #16]
 8008e24:	9a07      	ldr	r2, [sp, #28]
 8008e26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009100 <__kernel_rem_pio2+0x318>
 8008e2a:	eb03 0802 	add.w	r8, r3, r2
 8008e2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008e30:	1aa7      	subs	r7, r4, r2
 8008e32:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008e36:	ae22      	add	r6, sp, #136	; 0x88
 8008e38:	2500      	movs	r5, #0
 8008e3a:	4545      	cmp	r5, r8
 8008e3c:	dd13      	ble.n	8008e66 <__kernel_rem_pio2+0x7e>
 8008e3e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009100 <__kernel_rem_pio2+0x318>
 8008e42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008e46:	2600      	movs	r6, #0
 8008e48:	9b04      	ldr	r3, [sp, #16]
 8008e4a:	429e      	cmp	r6, r3
 8008e4c:	dc32      	bgt.n	8008eb4 <__kernel_rem_pio2+0xcc>
 8008e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e50:	9302      	str	r3, [sp, #8]
 8008e52:	9b08      	ldr	r3, [sp, #32]
 8008e54:	199d      	adds	r5, r3, r6
 8008e56:	ab22      	add	r3, sp, #136	; 0x88
 8008e58:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008e5c:	9306      	str	r3, [sp, #24]
 8008e5e:	ec59 8b18 	vmov	r8, r9, d8
 8008e62:	2700      	movs	r7, #0
 8008e64:	e01f      	b.n	8008ea6 <__kernel_rem_pio2+0xbe>
 8008e66:	42ef      	cmn	r7, r5
 8008e68:	d407      	bmi.n	8008e7a <__kernel_rem_pio2+0x92>
 8008e6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008e6e:	f7f7 fb59 	bl	8000524 <__aeabi_i2d>
 8008e72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008e76:	3501      	adds	r5, #1
 8008e78:	e7df      	b.n	8008e3a <__kernel_rem_pio2+0x52>
 8008e7a:	ec51 0b18 	vmov	r0, r1, d8
 8008e7e:	e7f8      	b.n	8008e72 <__kernel_rem_pio2+0x8a>
 8008e80:	9906      	ldr	r1, [sp, #24]
 8008e82:	9d02      	ldr	r5, [sp, #8]
 8008e84:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008e88:	9106      	str	r1, [sp, #24]
 8008e8a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008e8e:	9502      	str	r5, [sp, #8]
 8008e90:	f7f7 fbb2 	bl	80005f8 <__aeabi_dmul>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4640      	mov	r0, r8
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	f7f7 f9f6 	bl	800028c <__adddf3>
 8008ea0:	3701      	adds	r7, #1
 8008ea2:	4680      	mov	r8, r0
 8008ea4:	4689      	mov	r9, r1
 8008ea6:	9b07      	ldr	r3, [sp, #28]
 8008ea8:	429f      	cmp	r7, r3
 8008eaa:	dde9      	ble.n	8008e80 <__kernel_rem_pio2+0x98>
 8008eac:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008eb0:	3601      	adds	r6, #1
 8008eb2:	e7c9      	b.n	8008e48 <__kernel_rem_pio2+0x60>
 8008eb4:	9b04      	ldr	r3, [sp, #16]
 8008eb6:	aa0e      	add	r2, sp, #56	; 0x38
 8008eb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ebc:	930c      	str	r3, [sp, #48]	; 0x30
 8008ebe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008ec0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008ec4:	9c04      	ldr	r4, [sp, #16]
 8008ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ec8:	ab9a      	add	r3, sp, #616	; 0x268
 8008eca:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8008ece:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ed6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008eda:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008ede:	ab9a      	add	r3, sp, #616	; 0x268
 8008ee0:	445b      	add	r3, fp
 8008ee2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8008ee6:	2500      	movs	r5, #0
 8008ee8:	1b63      	subs	r3, r4, r5
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dc78      	bgt.n	8008fe0 <__kernel_rem_pio2+0x1f8>
 8008eee:	4650      	mov	r0, sl
 8008ef0:	ec49 8b10 	vmov	d0, r8, r9
 8008ef4:	f000 fd14 	bl	8009920 <scalbn>
 8008ef8:	ec57 6b10 	vmov	r6, r7, d0
 8008efc:	2200      	movs	r2, #0
 8008efe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008f02:	ee10 0a10 	vmov	r0, s0
 8008f06:	4639      	mov	r1, r7
 8008f08:	f7f7 fb76 	bl	80005f8 <__aeabi_dmul>
 8008f0c:	ec41 0b10 	vmov	d0, r0, r1
 8008f10:	f000 fc82 	bl	8009818 <floor>
 8008f14:	2200      	movs	r2, #0
 8008f16:	ec51 0b10 	vmov	r0, r1, d0
 8008f1a:	4b7e      	ldr	r3, [pc, #504]	; (8009114 <__kernel_rem_pio2+0x32c>)
 8008f1c:	f7f7 fb6c 	bl	80005f8 <__aeabi_dmul>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	f7f7 f9ae 	bl	8000288 <__aeabi_dsub>
 8008f2c:	460f      	mov	r7, r1
 8008f2e:	4606      	mov	r6, r0
 8008f30:	f7f7 fe12 	bl	8000b58 <__aeabi_d2iz>
 8008f34:	9006      	str	r0, [sp, #24]
 8008f36:	f7f7 faf5 	bl	8000524 <__aeabi_i2d>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	4630      	mov	r0, r6
 8008f40:	4639      	mov	r1, r7
 8008f42:	f7f7 f9a1 	bl	8000288 <__aeabi_dsub>
 8008f46:	f1ba 0f00 	cmp.w	sl, #0
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	dd6c      	ble.n	800902a <__kernel_rem_pio2+0x242>
 8008f50:	1e62      	subs	r2, r4, #1
 8008f52:	ab0e      	add	r3, sp, #56	; 0x38
 8008f54:	f1ca 0118 	rsb	r1, sl, #24
 8008f58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008f5c:	9d06      	ldr	r5, [sp, #24]
 8008f5e:	fa40 f301 	asr.w	r3, r0, r1
 8008f62:	441d      	add	r5, r3
 8008f64:	408b      	lsls	r3, r1
 8008f66:	1ac0      	subs	r0, r0, r3
 8008f68:	ab0e      	add	r3, sp, #56	; 0x38
 8008f6a:	9506      	str	r5, [sp, #24]
 8008f6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008f70:	f1ca 0317 	rsb	r3, sl, #23
 8008f74:	fa40 f303 	asr.w	r3, r0, r3
 8008f78:	9302      	str	r3, [sp, #8]
 8008f7a:	9b02      	ldr	r3, [sp, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dd62      	ble.n	8009046 <__kernel_rem_pio2+0x25e>
 8008f80:	9b06      	ldr	r3, [sp, #24]
 8008f82:	2200      	movs	r2, #0
 8008f84:	3301      	adds	r3, #1
 8008f86:	9306      	str	r3, [sp, #24]
 8008f88:	4615      	mov	r5, r2
 8008f8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008f8e:	4294      	cmp	r4, r2
 8008f90:	f300 8095 	bgt.w	80090be <__kernel_rem_pio2+0x2d6>
 8008f94:	f1ba 0f00 	cmp.w	sl, #0
 8008f98:	dd07      	ble.n	8008faa <__kernel_rem_pio2+0x1c2>
 8008f9a:	f1ba 0f01 	cmp.w	sl, #1
 8008f9e:	f000 80a2 	beq.w	80090e6 <__kernel_rem_pio2+0x2fe>
 8008fa2:	f1ba 0f02 	cmp.w	sl, #2
 8008fa6:	f000 80c1 	beq.w	800912c <__kernel_rem_pio2+0x344>
 8008faa:	9b02      	ldr	r3, [sp, #8]
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d14a      	bne.n	8009046 <__kernel_rem_pio2+0x25e>
 8008fb0:	4632      	mov	r2, r6
 8008fb2:	463b      	mov	r3, r7
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	4958      	ldr	r1, [pc, #352]	; (8009118 <__kernel_rem_pio2+0x330>)
 8008fb8:	f7f7 f966 	bl	8000288 <__aeabi_dsub>
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	460f      	mov	r7, r1
 8008fc0:	2d00      	cmp	r5, #0
 8008fc2:	d040      	beq.n	8009046 <__kernel_rem_pio2+0x25e>
 8008fc4:	4650      	mov	r0, sl
 8008fc6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009108 <__kernel_rem_pio2+0x320>
 8008fca:	f000 fca9 	bl	8009920 <scalbn>
 8008fce:	4630      	mov	r0, r6
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	ec53 2b10 	vmov	r2, r3, d0
 8008fd6:	f7f7 f957 	bl	8000288 <__aeabi_dsub>
 8008fda:	4606      	mov	r6, r0
 8008fdc:	460f      	mov	r7, r1
 8008fde:	e032      	b.n	8009046 <__kernel_rem_pio2+0x25e>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	4b4e      	ldr	r3, [pc, #312]	; (800911c <__kernel_rem_pio2+0x334>)
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	f7f7 fdb4 	bl	8000b58 <__aeabi_d2iz>
 8008ff0:	f7f7 fa98 	bl	8000524 <__aeabi_i2d>
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4b4a      	ldr	r3, [pc, #296]	; (8009120 <__kernel_rem_pio2+0x338>)
 8008ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ffc:	f7f7 fafc 	bl	80005f8 <__aeabi_dmul>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4640      	mov	r0, r8
 8009006:	4649      	mov	r1, r9
 8009008:	f7f7 f93e 	bl	8000288 <__aeabi_dsub>
 800900c:	f7f7 fda4 	bl	8000b58 <__aeabi_d2iz>
 8009010:	ab0e      	add	r3, sp, #56	; 0x38
 8009012:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009016:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800901a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800901e:	f7f7 f935 	bl	800028c <__adddf3>
 8009022:	3501      	adds	r5, #1
 8009024:	4680      	mov	r8, r0
 8009026:	4689      	mov	r9, r1
 8009028:	e75e      	b.n	8008ee8 <__kernel_rem_pio2+0x100>
 800902a:	d105      	bne.n	8009038 <__kernel_rem_pio2+0x250>
 800902c:	1e63      	subs	r3, r4, #1
 800902e:	aa0e      	add	r2, sp, #56	; 0x38
 8009030:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009034:	15c3      	asrs	r3, r0, #23
 8009036:	e79f      	b.n	8008f78 <__kernel_rem_pio2+0x190>
 8009038:	2200      	movs	r2, #0
 800903a:	4b3a      	ldr	r3, [pc, #232]	; (8009124 <__kernel_rem_pio2+0x33c>)
 800903c:	f7f7 fd62 	bl	8000b04 <__aeabi_dcmpge>
 8009040:	2800      	cmp	r0, #0
 8009042:	d139      	bne.n	80090b8 <__kernel_rem_pio2+0x2d0>
 8009044:	9002      	str	r0, [sp, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	2300      	movs	r3, #0
 800904a:	4630      	mov	r0, r6
 800904c:	4639      	mov	r1, r7
 800904e:	f7f7 fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009052:	2800      	cmp	r0, #0
 8009054:	f000 80c7 	beq.w	80091e6 <__kernel_rem_pio2+0x3fe>
 8009058:	1e65      	subs	r5, r4, #1
 800905a:	462b      	mov	r3, r5
 800905c:	2200      	movs	r2, #0
 800905e:	9904      	ldr	r1, [sp, #16]
 8009060:	428b      	cmp	r3, r1
 8009062:	da6a      	bge.n	800913a <__kernel_rem_pio2+0x352>
 8009064:	2a00      	cmp	r2, #0
 8009066:	f000 8088 	beq.w	800917a <__kernel_rem_pio2+0x392>
 800906a:	ab0e      	add	r3, sp, #56	; 0x38
 800906c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009070:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 80b4 	beq.w	80091e2 <__kernel_rem_pio2+0x3fa>
 800907a:	4650      	mov	r0, sl
 800907c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009108 <__kernel_rem_pio2+0x320>
 8009080:	f000 fc4e 	bl	8009920 <scalbn>
 8009084:	00ec      	lsls	r4, r5, #3
 8009086:	ab72      	add	r3, sp, #456	; 0x1c8
 8009088:	191e      	adds	r6, r3, r4
 800908a:	ec59 8b10 	vmov	r8, r9, d0
 800908e:	f106 0a08 	add.w	sl, r6, #8
 8009092:	462f      	mov	r7, r5
 8009094:	2f00      	cmp	r7, #0
 8009096:	f280 80df 	bge.w	8009258 <__kernel_rem_pio2+0x470>
 800909a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009100 <__kernel_rem_pio2+0x318>
 800909e:	f04f 0a00 	mov.w	sl, #0
 80090a2:	eba5 030a 	sub.w	r3, r5, sl
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f2c0 810a 	blt.w	80092c0 <__kernel_rem_pio2+0x4d8>
 80090ac:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009128 <__kernel_rem_pio2+0x340>
 80090b0:	ec59 8b18 	vmov	r8, r9, d8
 80090b4:	2700      	movs	r7, #0
 80090b6:	e0f5      	b.n	80092a4 <__kernel_rem_pio2+0x4bc>
 80090b8:	2302      	movs	r3, #2
 80090ba:	9302      	str	r3, [sp, #8]
 80090bc:	e760      	b.n	8008f80 <__kernel_rem_pio2+0x198>
 80090be:	ab0e      	add	r3, sp, #56	; 0x38
 80090c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c4:	b94d      	cbnz	r5, 80090da <__kernel_rem_pio2+0x2f2>
 80090c6:	b12b      	cbz	r3, 80090d4 <__kernel_rem_pio2+0x2ec>
 80090c8:	a80e      	add	r0, sp, #56	; 0x38
 80090ca:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80090ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80090d2:	2301      	movs	r3, #1
 80090d4:	3201      	adds	r2, #1
 80090d6:	461d      	mov	r5, r3
 80090d8:	e759      	b.n	8008f8e <__kernel_rem_pio2+0x1a6>
 80090da:	a80e      	add	r0, sp, #56	; 0x38
 80090dc:	1acb      	subs	r3, r1, r3
 80090de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80090e2:	462b      	mov	r3, r5
 80090e4:	e7f6      	b.n	80090d4 <__kernel_rem_pio2+0x2ec>
 80090e6:	1e62      	subs	r2, r4, #1
 80090e8:	ab0e      	add	r3, sp, #56	; 0x38
 80090ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80090f2:	a90e      	add	r1, sp, #56	; 0x38
 80090f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80090f8:	e757      	b.n	8008faa <__kernel_rem_pio2+0x1c2>
 80090fa:	bf00      	nop
 80090fc:	f3af 8000 	nop.w
	...
 800910c:	3ff00000 	.word	0x3ff00000
 8009110:	0800dcf8 	.word	0x0800dcf8
 8009114:	40200000 	.word	0x40200000
 8009118:	3ff00000 	.word	0x3ff00000
 800911c:	3e700000 	.word	0x3e700000
 8009120:	41700000 	.word	0x41700000
 8009124:	3fe00000 	.word	0x3fe00000
 8009128:	0800dcb8 	.word	0x0800dcb8
 800912c:	1e62      	subs	r2, r4, #1
 800912e:	ab0e      	add	r3, sp, #56	; 0x38
 8009130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009134:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009138:	e7db      	b.n	80090f2 <__kernel_rem_pio2+0x30a>
 800913a:	a90e      	add	r1, sp, #56	; 0x38
 800913c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009140:	3b01      	subs	r3, #1
 8009142:	430a      	orrs	r2, r1
 8009144:	e78b      	b.n	800905e <__kernel_rem_pio2+0x276>
 8009146:	3301      	adds	r3, #1
 8009148:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800914c:	2900      	cmp	r1, #0
 800914e:	d0fa      	beq.n	8009146 <__kernel_rem_pio2+0x35e>
 8009150:	9a08      	ldr	r2, [sp, #32]
 8009152:	4422      	add	r2, r4
 8009154:	00d2      	lsls	r2, r2, #3
 8009156:	a922      	add	r1, sp, #136	; 0x88
 8009158:	18e3      	adds	r3, r4, r3
 800915a:	9206      	str	r2, [sp, #24]
 800915c:	440a      	add	r2, r1
 800915e:	9302      	str	r3, [sp, #8]
 8009160:	f10b 0108 	add.w	r1, fp, #8
 8009164:	f102 0308 	add.w	r3, r2, #8
 8009168:	1c66      	adds	r6, r4, #1
 800916a:	910a      	str	r1, [sp, #40]	; 0x28
 800916c:	2500      	movs	r5, #0
 800916e:	930d      	str	r3, [sp, #52]	; 0x34
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	42b3      	cmp	r3, r6
 8009174:	da04      	bge.n	8009180 <__kernel_rem_pio2+0x398>
 8009176:	461c      	mov	r4, r3
 8009178:	e6a6      	b.n	8008ec8 <__kernel_rem_pio2+0xe0>
 800917a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800917c:	2301      	movs	r3, #1
 800917e:	e7e3      	b.n	8009148 <__kernel_rem_pio2+0x360>
 8009180:	9b06      	ldr	r3, [sp, #24]
 8009182:	18ef      	adds	r7, r5, r3
 8009184:	ab22      	add	r3, sp, #136	; 0x88
 8009186:	441f      	add	r7, r3
 8009188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800918a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800918e:	f7f7 f9c9 	bl	8000524 <__aeabi_i2d>
 8009192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009194:	461c      	mov	r4, r3
 8009196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009198:	e9c7 0100 	strd	r0, r1, [r7]
 800919c:	eb03 0b05 	add.w	fp, r3, r5
 80091a0:	2700      	movs	r7, #0
 80091a2:	f04f 0800 	mov.w	r8, #0
 80091a6:	f04f 0900 	mov.w	r9, #0
 80091aa:	9b07      	ldr	r3, [sp, #28]
 80091ac:	429f      	cmp	r7, r3
 80091ae:	dd08      	ble.n	80091c2 <__kernel_rem_pio2+0x3da>
 80091b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b2:	aa72      	add	r2, sp, #456	; 0x1c8
 80091b4:	18eb      	adds	r3, r5, r3
 80091b6:	4413      	add	r3, r2
 80091b8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80091bc:	3601      	adds	r6, #1
 80091be:	3508      	adds	r5, #8
 80091c0:	e7d6      	b.n	8009170 <__kernel_rem_pio2+0x388>
 80091c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80091c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80091ca:	f7f7 fa15 	bl	80005f8 <__aeabi_dmul>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4640      	mov	r0, r8
 80091d4:	4649      	mov	r1, r9
 80091d6:	f7f7 f859 	bl	800028c <__adddf3>
 80091da:	3701      	adds	r7, #1
 80091dc:	4680      	mov	r8, r0
 80091de:	4689      	mov	r9, r1
 80091e0:	e7e3      	b.n	80091aa <__kernel_rem_pio2+0x3c2>
 80091e2:	3d01      	subs	r5, #1
 80091e4:	e741      	b.n	800906a <__kernel_rem_pio2+0x282>
 80091e6:	f1ca 0000 	rsb	r0, sl, #0
 80091ea:	ec47 6b10 	vmov	d0, r6, r7
 80091ee:	f000 fb97 	bl	8009920 <scalbn>
 80091f2:	ec57 6b10 	vmov	r6, r7, d0
 80091f6:	2200      	movs	r2, #0
 80091f8:	4b99      	ldr	r3, [pc, #612]	; (8009460 <__kernel_rem_pio2+0x678>)
 80091fa:	ee10 0a10 	vmov	r0, s0
 80091fe:	4639      	mov	r1, r7
 8009200:	f7f7 fc80 	bl	8000b04 <__aeabi_dcmpge>
 8009204:	b1f8      	cbz	r0, 8009246 <__kernel_rem_pio2+0x45e>
 8009206:	2200      	movs	r2, #0
 8009208:	4b96      	ldr	r3, [pc, #600]	; (8009464 <__kernel_rem_pio2+0x67c>)
 800920a:	4630      	mov	r0, r6
 800920c:	4639      	mov	r1, r7
 800920e:	f7f7 f9f3 	bl	80005f8 <__aeabi_dmul>
 8009212:	f7f7 fca1 	bl	8000b58 <__aeabi_d2iz>
 8009216:	4680      	mov	r8, r0
 8009218:	f7f7 f984 	bl	8000524 <__aeabi_i2d>
 800921c:	2200      	movs	r2, #0
 800921e:	4b90      	ldr	r3, [pc, #576]	; (8009460 <__kernel_rem_pio2+0x678>)
 8009220:	f7f7 f9ea 	bl	80005f8 <__aeabi_dmul>
 8009224:	460b      	mov	r3, r1
 8009226:	4602      	mov	r2, r0
 8009228:	4639      	mov	r1, r7
 800922a:	4630      	mov	r0, r6
 800922c:	f7f7 f82c 	bl	8000288 <__aeabi_dsub>
 8009230:	f7f7 fc92 	bl	8000b58 <__aeabi_d2iz>
 8009234:	1c65      	adds	r5, r4, #1
 8009236:	ab0e      	add	r3, sp, #56	; 0x38
 8009238:	f10a 0a18 	add.w	sl, sl, #24
 800923c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009240:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009244:	e719      	b.n	800907a <__kernel_rem_pio2+0x292>
 8009246:	4630      	mov	r0, r6
 8009248:	4639      	mov	r1, r7
 800924a:	f7f7 fc85 	bl	8000b58 <__aeabi_d2iz>
 800924e:	ab0e      	add	r3, sp, #56	; 0x38
 8009250:	4625      	mov	r5, r4
 8009252:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009256:	e710      	b.n	800907a <__kernel_rem_pio2+0x292>
 8009258:	ab0e      	add	r3, sp, #56	; 0x38
 800925a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800925e:	f7f7 f961 	bl	8000524 <__aeabi_i2d>
 8009262:	4642      	mov	r2, r8
 8009264:	464b      	mov	r3, r9
 8009266:	f7f7 f9c7 	bl	80005f8 <__aeabi_dmul>
 800926a:	2200      	movs	r2, #0
 800926c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009270:	4b7c      	ldr	r3, [pc, #496]	; (8009464 <__kernel_rem_pio2+0x67c>)
 8009272:	4640      	mov	r0, r8
 8009274:	4649      	mov	r1, r9
 8009276:	f7f7 f9bf 	bl	80005f8 <__aeabi_dmul>
 800927a:	3f01      	subs	r7, #1
 800927c:	4680      	mov	r8, r0
 800927e:	4689      	mov	r9, r1
 8009280:	e708      	b.n	8009094 <__kernel_rem_pio2+0x2ac>
 8009282:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800928e:	f7f7 f9b3 	bl	80005f8 <__aeabi_dmul>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4640      	mov	r0, r8
 8009298:	4649      	mov	r1, r9
 800929a:	f7f6 fff7 	bl	800028c <__adddf3>
 800929e:	3701      	adds	r7, #1
 80092a0:	4680      	mov	r8, r0
 80092a2:	4689      	mov	r9, r1
 80092a4:	9b04      	ldr	r3, [sp, #16]
 80092a6:	429f      	cmp	r7, r3
 80092a8:	dc01      	bgt.n	80092ae <__kernel_rem_pio2+0x4c6>
 80092aa:	45ba      	cmp	sl, r7
 80092ac:	dae9      	bge.n	8009282 <__kernel_rem_pio2+0x49a>
 80092ae:	ab4a      	add	r3, sp, #296	; 0x128
 80092b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80092b4:	e9c3 8900 	strd	r8, r9, [r3]
 80092b8:	f10a 0a01 	add.w	sl, sl, #1
 80092bc:	3e08      	subs	r6, #8
 80092be:	e6f0      	b.n	80090a2 <__kernel_rem_pio2+0x2ba>
 80092c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d85b      	bhi.n	800937e <__kernel_rem_pio2+0x596>
 80092c6:	e8df f003 	tbb	[pc, r3]
 80092ca:	264a      	.short	0x264a
 80092cc:	0226      	.short	0x0226
 80092ce:	ab9a      	add	r3, sp, #616	; 0x268
 80092d0:	441c      	add	r4, r3
 80092d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80092d6:	46a2      	mov	sl, r4
 80092d8:	46ab      	mov	fp, r5
 80092da:	f1bb 0f00 	cmp.w	fp, #0
 80092de:	dc6c      	bgt.n	80093ba <__kernel_rem_pio2+0x5d2>
 80092e0:	46a2      	mov	sl, r4
 80092e2:	46ab      	mov	fp, r5
 80092e4:	f1bb 0f01 	cmp.w	fp, #1
 80092e8:	f300 8086 	bgt.w	80093f8 <__kernel_rem_pio2+0x610>
 80092ec:	2000      	movs	r0, #0
 80092ee:	2100      	movs	r1, #0
 80092f0:	2d01      	cmp	r5, #1
 80092f2:	f300 80a0 	bgt.w	8009436 <__kernel_rem_pio2+0x64e>
 80092f6:	9b02      	ldr	r3, [sp, #8]
 80092f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80092fc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8009300:	2b00      	cmp	r3, #0
 8009302:	f040 809e 	bne.w	8009442 <__kernel_rem_pio2+0x65a>
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	e9c3 7800 	strd	r7, r8, [r3]
 800930c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009310:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009314:	e033      	b.n	800937e <__kernel_rem_pio2+0x596>
 8009316:	3408      	adds	r4, #8
 8009318:	ab4a      	add	r3, sp, #296	; 0x128
 800931a:	441c      	add	r4, r3
 800931c:	462e      	mov	r6, r5
 800931e:	2000      	movs	r0, #0
 8009320:	2100      	movs	r1, #0
 8009322:	2e00      	cmp	r6, #0
 8009324:	da3a      	bge.n	800939c <__kernel_rem_pio2+0x5b4>
 8009326:	9b02      	ldr	r3, [sp, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d03d      	beq.n	80093a8 <__kernel_rem_pio2+0x5c0>
 800932c:	4602      	mov	r2, r0
 800932e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009332:	9c01      	ldr	r4, [sp, #4]
 8009334:	e9c4 2300 	strd	r2, r3, [r4]
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009340:	f7f6 ffa2 	bl	8000288 <__aeabi_dsub>
 8009344:	ae4c      	add	r6, sp, #304	; 0x130
 8009346:	2401      	movs	r4, #1
 8009348:	42a5      	cmp	r5, r4
 800934a:	da30      	bge.n	80093ae <__kernel_rem_pio2+0x5c6>
 800934c:	9b02      	ldr	r3, [sp, #8]
 800934e:	b113      	cbz	r3, 8009356 <__kernel_rem_pio2+0x56e>
 8009350:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009354:	4619      	mov	r1, r3
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800935c:	e00f      	b.n	800937e <__kernel_rem_pio2+0x596>
 800935e:	ab9a      	add	r3, sp, #616	; 0x268
 8009360:	441c      	add	r4, r3
 8009362:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009366:	2000      	movs	r0, #0
 8009368:	2100      	movs	r1, #0
 800936a:	2d00      	cmp	r5, #0
 800936c:	da10      	bge.n	8009390 <__kernel_rem_pio2+0x5a8>
 800936e:	9b02      	ldr	r3, [sp, #8]
 8009370:	b113      	cbz	r3, 8009378 <__kernel_rem_pio2+0x590>
 8009372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009376:	4619      	mov	r1, r3
 8009378:	9b01      	ldr	r3, [sp, #4]
 800937a:	e9c3 0100 	strd	r0, r1, [r3]
 800937e:	9b06      	ldr	r3, [sp, #24]
 8009380:	f003 0007 	and.w	r0, r3, #7
 8009384:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009388:	ecbd 8b02 	vpop	{d8}
 800938c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009390:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009394:	f7f6 ff7a 	bl	800028c <__adddf3>
 8009398:	3d01      	subs	r5, #1
 800939a:	e7e6      	b.n	800936a <__kernel_rem_pio2+0x582>
 800939c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80093a0:	f7f6 ff74 	bl	800028c <__adddf3>
 80093a4:	3e01      	subs	r6, #1
 80093a6:	e7bc      	b.n	8009322 <__kernel_rem_pio2+0x53a>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	e7c1      	b.n	8009332 <__kernel_rem_pio2+0x54a>
 80093ae:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80093b2:	f7f6 ff6b 	bl	800028c <__adddf3>
 80093b6:	3401      	adds	r4, #1
 80093b8:	e7c6      	b.n	8009348 <__kernel_rem_pio2+0x560>
 80093ba:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80093be:	ed3a 7b02 	vldmdb	sl!, {d7}
 80093c2:	4640      	mov	r0, r8
 80093c4:	ec53 2b17 	vmov	r2, r3, d7
 80093c8:	4649      	mov	r1, r9
 80093ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 80093ce:	f7f6 ff5d 	bl	800028c <__adddf3>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4606      	mov	r6, r0
 80093d8:	460f      	mov	r7, r1
 80093da:	4640      	mov	r0, r8
 80093dc:	4649      	mov	r1, r9
 80093de:	f7f6 ff53 	bl	8000288 <__aeabi_dsub>
 80093e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e6:	f7f6 ff51 	bl	800028c <__adddf3>
 80093ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093ee:	e9ca 0100 	strd	r0, r1, [sl]
 80093f2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80093f6:	e770      	b.n	80092da <__kernel_rem_pio2+0x4f2>
 80093f8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80093fc:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009400:	4630      	mov	r0, r6
 8009402:	ec53 2b17 	vmov	r2, r3, d7
 8009406:	4639      	mov	r1, r7
 8009408:	ed8d 7b04 	vstr	d7, [sp, #16]
 800940c:	f7f6 ff3e 	bl	800028c <__adddf3>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4680      	mov	r8, r0
 8009416:	4689      	mov	r9, r1
 8009418:	4630      	mov	r0, r6
 800941a:	4639      	mov	r1, r7
 800941c:	f7f6 ff34 	bl	8000288 <__aeabi_dsub>
 8009420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009424:	f7f6 ff32 	bl	800028c <__adddf3>
 8009428:	f10b 3bff 	add.w	fp, fp, #4294967295
 800942c:	e9ca 0100 	strd	r0, r1, [sl]
 8009430:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8009434:	e756      	b.n	80092e4 <__kernel_rem_pio2+0x4fc>
 8009436:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800943a:	f7f6 ff27 	bl	800028c <__adddf3>
 800943e:	3d01      	subs	r5, #1
 8009440:	e756      	b.n	80092f0 <__kernel_rem_pio2+0x508>
 8009442:	9b01      	ldr	r3, [sp, #4]
 8009444:	9a01      	ldr	r2, [sp, #4]
 8009446:	601f      	str	r7, [r3, #0]
 8009448:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800944c:	605c      	str	r4, [r3, #4]
 800944e:	609d      	str	r5, [r3, #8]
 8009450:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009454:	60d3      	str	r3, [r2, #12]
 8009456:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800945a:	6110      	str	r0, [r2, #16]
 800945c:	6153      	str	r3, [r2, #20]
 800945e:	e78e      	b.n	800937e <__kernel_rem_pio2+0x596>
 8009460:	41700000 	.word	0x41700000
 8009464:	3e700000 	.word	0x3e700000

08009468 <__kernel_tan>:
 8009468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	ec5b ab10 	vmov	sl, fp, d0
 8009470:	4bbf      	ldr	r3, [pc, #764]	; (8009770 <__kernel_tan+0x308>)
 8009472:	b089      	sub	sp, #36	; 0x24
 8009474:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009478:	429f      	cmp	r7, r3
 800947a:	ec59 8b11 	vmov	r8, r9, d1
 800947e:	4606      	mov	r6, r0
 8009480:	f8cd b008 	str.w	fp, [sp, #8]
 8009484:	dc22      	bgt.n	80094cc <__kernel_tan+0x64>
 8009486:	ee10 0a10 	vmov	r0, s0
 800948a:	4659      	mov	r1, fp
 800948c:	f7f7 fb64 	bl	8000b58 <__aeabi_d2iz>
 8009490:	2800      	cmp	r0, #0
 8009492:	d145      	bne.n	8009520 <__kernel_tan+0xb8>
 8009494:	1c73      	adds	r3, r6, #1
 8009496:	4652      	mov	r2, sl
 8009498:	4313      	orrs	r3, r2
 800949a:	433b      	orrs	r3, r7
 800949c:	d110      	bne.n	80094c0 <__kernel_tan+0x58>
 800949e:	ec4b ab10 	vmov	d0, sl, fp
 80094a2:	f000 f9ad 	bl	8009800 <fabs>
 80094a6:	49b3      	ldr	r1, [pc, #716]	; (8009774 <__kernel_tan+0x30c>)
 80094a8:	ec53 2b10 	vmov	r2, r3, d0
 80094ac:	2000      	movs	r0, #0
 80094ae:	f7f7 f9cd 	bl	800084c <__aeabi_ddiv>
 80094b2:	4682      	mov	sl, r0
 80094b4:	468b      	mov	fp, r1
 80094b6:	ec4b ab10 	vmov	d0, sl, fp
 80094ba:	b009      	add	sp, #36	; 0x24
 80094bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c0:	2e01      	cmp	r6, #1
 80094c2:	d0f8      	beq.n	80094b6 <__kernel_tan+0x4e>
 80094c4:	465b      	mov	r3, fp
 80094c6:	2000      	movs	r0, #0
 80094c8:	49ab      	ldr	r1, [pc, #684]	; (8009778 <__kernel_tan+0x310>)
 80094ca:	e7f0      	b.n	80094ae <__kernel_tan+0x46>
 80094cc:	4bab      	ldr	r3, [pc, #684]	; (800977c <__kernel_tan+0x314>)
 80094ce:	429f      	cmp	r7, r3
 80094d0:	dd26      	ble.n	8009520 <__kernel_tan+0xb8>
 80094d2:	9b02      	ldr	r3, [sp, #8]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	da09      	bge.n	80094ec <__kernel_tan+0x84>
 80094d8:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80094dc:	469b      	mov	fp, r3
 80094de:	ee10 aa10 	vmov	sl, s0
 80094e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094e6:	ee11 8a10 	vmov	r8, s2
 80094ea:	4699      	mov	r9, r3
 80094ec:	4652      	mov	r2, sl
 80094ee:	465b      	mov	r3, fp
 80094f0:	a181      	add	r1, pc, #516	; (adr r1, 80096f8 <__kernel_tan+0x290>)
 80094f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f6:	f7f6 fec7 	bl	8000288 <__aeabi_dsub>
 80094fa:	4642      	mov	r2, r8
 80094fc:	464b      	mov	r3, r9
 80094fe:	4604      	mov	r4, r0
 8009500:	460d      	mov	r5, r1
 8009502:	a17f      	add	r1, pc, #508	; (adr r1, 8009700 <__kernel_tan+0x298>)
 8009504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009508:	f7f6 febe 	bl	8000288 <__aeabi_dsub>
 800950c:	4622      	mov	r2, r4
 800950e:	462b      	mov	r3, r5
 8009510:	f7f6 febc 	bl	800028c <__adddf3>
 8009514:	f04f 0800 	mov.w	r8, #0
 8009518:	4682      	mov	sl, r0
 800951a:	468b      	mov	fp, r1
 800951c:	f04f 0900 	mov.w	r9, #0
 8009520:	4652      	mov	r2, sl
 8009522:	465b      	mov	r3, fp
 8009524:	4650      	mov	r0, sl
 8009526:	4659      	mov	r1, fp
 8009528:	f7f7 f866 	bl	80005f8 <__aeabi_dmul>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	e9cd 0100 	strd	r0, r1, [sp]
 8009534:	f7f7 f860 	bl	80005f8 <__aeabi_dmul>
 8009538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800953c:	4604      	mov	r4, r0
 800953e:	460d      	mov	r5, r1
 8009540:	4650      	mov	r0, sl
 8009542:	4659      	mov	r1, fp
 8009544:	f7f7 f858 	bl	80005f8 <__aeabi_dmul>
 8009548:	a36f      	add	r3, pc, #444	; (adr r3, 8009708 <__kernel_tan+0x2a0>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009552:	4620      	mov	r0, r4
 8009554:	4629      	mov	r1, r5
 8009556:	f7f7 f84f 	bl	80005f8 <__aeabi_dmul>
 800955a:	a36d      	add	r3, pc, #436	; (adr r3, 8009710 <__kernel_tan+0x2a8>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f6 fe94 	bl	800028c <__adddf3>
 8009564:	4622      	mov	r2, r4
 8009566:	462b      	mov	r3, r5
 8009568:	f7f7 f846 	bl	80005f8 <__aeabi_dmul>
 800956c:	a36a      	add	r3, pc, #424	; (adr r3, 8009718 <__kernel_tan+0x2b0>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f6 fe8b 	bl	800028c <__adddf3>
 8009576:	4622      	mov	r2, r4
 8009578:	462b      	mov	r3, r5
 800957a:	f7f7 f83d 	bl	80005f8 <__aeabi_dmul>
 800957e:	a368      	add	r3, pc, #416	; (adr r3, 8009720 <__kernel_tan+0x2b8>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	f7f6 fe82 	bl	800028c <__adddf3>
 8009588:	4622      	mov	r2, r4
 800958a:	462b      	mov	r3, r5
 800958c:	f7f7 f834 	bl	80005f8 <__aeabi_dmul>
 8009590:	a365      	add	r3, pc, #404	; (adr r3, 8009728 <__kernel_tan+0x2c0>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f7f6 fe79 	bl	800028c <__adddf3>
 800959a:	4622      	mov	r2, r4
 800959c:	462b      	mov	r3, r5
 800959e:	f7f7 f82b 	bl	80005f8 <__aeabi_dmul>
 80095a2:	a363      	add	r3, pc, #396	; (adr r3, 8009730 <__kernel_tan+0x2c8>)
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f7f6 fe70 	bl	800028c <__adddf3>
 80095ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095b0:	f7f7 f822 	bl	80005f8 <__aeabi_dmul>
 80095b4:	a360      	add	r3, pc, #384	; (adr r3, 8009738 <__kernel_tan+0x2d0>)
 80095b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80095be:	4620      	mov	r0, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f7 f819 	bl	80005f8 <__aeabi_dmul>
 80095c6:	a35e      	add	r3, pc, #376	; (adr r3, 8009740 <__kernel_tan+0x2d8>)
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	f7f6 fe5e 	bl	800028c <__adddf3>
 80095d0:	4622      	mov	r2, r4
 80095d2:	462b      	mov	r3, r5
 80095d4:	f7f7 f810 	bl	80005f8 <__aeabi_dmul>
 80095d8:	a35b      	add	r3, pc, #364	; (adr r3, 8009748 <__kernel_tan+0x2e0>)
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	f7f6 fe55 	bl	800028c <__adddf3>
 80095e2:	4622      	mov	r2, r4
 80095e4:	462b      	mov	r3, r5
 80095e6:	f7f7 f807 	bl	80005f8 <__aeabi_dmul>
 80095ea:	a359      	add	r3, pc, #356	; (adr r3, 8009750 <__kernel_tan+0x2e8>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	f7f6 fe4c 	bl	800028c <__adddf3>
 80095f4:	4622      	mov	r2, r4
 80095f6:	462b      	mov	r3, r5
 80095f8:	f7f6 fffe 	bl	80005f8 <__aeabi_dmul>
 80095fc:	a356      	add	r3, pc, #344	; (adr r3, 8009758 <__kernel_tan+0x2f0>)
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f7f6 fe43 	bl	800028c <__adddf3>
 8009606:	4622      	mov	r2, r4
 8009608:	462b      	mov	r3, r5
 800960a:	f7f6 fff5 	bl	80005f8 <__aeabi_dmul>
 800960e:	a354      	add	r3, pc, #336	; (adr r3, 8009760 <__kernel_tan+0x2f8>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f7f6 fe3a 	bl	800028c <__adddf3>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009620:	f7f6 fe34 	bl	800028c <__adddf3>
 8009624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009628:	f7f6 ffe6 	bl	80005f8 <__aeabi_dmul>
 800962c:	4642      	mov	r2, r8
 800962e:	464b      	mov	r3, r9
 8009630:	f7f6 fe2c 	bl	800028c <__adddf3>
 8009634:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009638:	f7f6 ffde 	bl	80005f8 <__aeabi_dmul>
 800963c:	4642      	mov	r2, r8
 800963e:	464b      	mov	r3, r9
 8009640:	f7f6 fe24 	bl	800028c <__adddf3>
 8009644:	a348      	add	r3, pc, #288	; (adr r3, 8009768 <__kernel_tan+0x300>)
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	4604      	mov	r4, r0
 800964c:	460d      	mov	r5, r1
 800964e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009652:	f7f6 ffd1 	bl	80005f8 <__aeabi_dmul>
 8009656:	4622      	mov	r2, r4
 8009658:	462b      	mov	r3, r5
 800965a:	f7f6 fe17 	bl	800028c <__adddf3>
 800965e:	e9cd 0100 	strd	r0, r1, [sp]
 8009662:	460b      	mov	r3, r1
 8009664:	4602      	mov	r2, r0
 8009666:	4659      	mov	r1, fp
 8009668:	4650      	mov	r0, sl
 800966a:	f7f6 fe0f 	bl	800028c <__adddf3>
 800966e:	4b43      	ldr	r3, [pc, #268]	; (800977c <__kernel_tan+0x314>)
 8009670:	429f      	cmp	r7, r3
 8009672:	4604      	mov	r4, r0
 8009674:	460d      	mov	r5, r1
 8009676:	f340 8083 	ble.w	8009780 <__kernel_tan+0x318>
 800967a:	4630      	mov	r0, r6
 800967c:	f7f6 ff52 	bl	8000524 <__aeabi_i2d>
 8009680:	4622      	mov	r2, r4
 8009682:	4680      	mov	r8, r0
 8009684:	4689      	mov	r9, r1
 8009686:	462b      	mov	r3, r5
 8009688:	4620      	mov	r0, r4
 800968a:	4629      	mov	r1, r5
 800968c:	f7f6 ffb4 	bl	80005f8 <__aeabi_dmul>
 8009690:	4642      	mov	r2, r8
 8009692:	4606      	mov	r6, r0
 8009694:	460f      	mov	r7, r1
 8009696:	464b      	mov	r3, r9
 8009698:	4620      	mov	r0, r4
 800969a:	4629      	mov	r1, r5
 800969c:	f7f6 fdf6 	bl	800028c <__adddf3>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4630      	mov	r0, r6
 80096a6:	4639      	mov	r1, r7
 80096a8:	f7f7 f8d0 	bl	800084c <__aeabi_ddiv>
 80096ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096b0:	f7f6 fdea 	bl	8000288 <__aeabi_dsub>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4650      	mov	r0, sl
 80096ba:	4659      	mov	r1, fp
 80096bc:	f7f6 fde4 	bl	8000288 <__aeabi_dsub>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	f7f6 fde2 	bl	800028c <__adddf3>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4640      	mov	r0, r8
 80096ce:	4649      	mov	r1, r9
 80096d0:	f7f6 fdda 	bl	8000288 <__aeabi_dsub>
 80096d4:	9b02      	ldr	r3, [sp, #8]
 80096d6:	4604      	mov	r4, r0
 80096d8:	1798      	asrs	r0, r3, #30
 80096da:	f000 0002 	and.w	r0, r0, #2
 80096de:	f1c0 0001 	rsb	r0, r0, #1
 80096e2:	460d      	mov	r5, r1
 80096e4:	f7f6 ff1e 	bl	8000524 <__aeabi_i2d>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4620      	mov	r0, r4
 80096ee:	4629      	mov	r1, r5
 80096f0:	f7f6 ff82 	bl	80005f8 <__aeabi_dmul>
 80096f4:	e6dd      	b.n	80094b2 <__kernel_tan+0x4a>
 80096f6:	bf00      	nop
 80096f8:	54442d18 	.word	0x54442d18
 80096fc:	3fe921fb 	.word	0x3fe921fb
 8009700:	33145c07 	.word	0x33145c07
 8009704:	3c81a626 	.word	0x3c81a626
 8009708:	74bf7ad4 	.word	0x74bf7ad4
 800970c:	3efb2a70 	.word	0x3efb2a70
 8009710:	32f0a7e9 	.word	0x32f0a7e9
 8009714:	3f12b80f 	.word	0x3f12b80f
 8009718:	1a8d1068 	.word	0x1a8d1068
 800971c:	3f3026f7 	.word	0x3f3026f7
 8009720:	fee08315 	.word	0xfee08315
 8009724:	3f57dbc8 	.word	0x3f57dbc8
 8009728:	e96e8493 	.word	0xe96e8493
 800972c:	3f8226e3 	.word	0x3f8226e3
 8009730:	1bb341fe 	.word	0x1bb341fe
 8009734:	3faba1ba 	.word	0x3faba1ba
 8009738:	db605373 	.word	0xdb605373
 800973c:	bef375cb 	.word	0xbef375cb
 8009740:	a03792a6 	.word	0xa03792a6
 8009744:	3f147e88 	.word	0x3f147e88
 8009748:	f2f26501 	.word	0xf2f26501
 800974c:	3f4344d8 	.word	0x3f4344d8
 8009750:	c9560328 	.word	0xc9560328
 8009754:	3f6d6d22 	.word	0x3f6d6d22
 8009758:	8406d637 	.word	0x8406d637
 800975c:	3f9664f4 	.word	0x3f9664f4
 8009760:	1110fe7a 	.word	0x1110fe7a
 8009764:	3fc11111 	.word	0x3fc11111
 8009768:	55555563 	.word	0x55555563
 800976c:	3fd55555 	.word	0x3fd55555
 8009770:	3e2fffff 	.word	0x3e2fffff
 8009774:	3ff00000 	.word	0x3ff00000
 8009778:	bff00000 	.word	0xbff00000
 800977c:	3fe59427 	.word	0x3fe59427
 8009780:	2e01      	cmp	r6, #1
 8009782:	d036      	beq.n	80097f2 <__kernel_tan+0x38a>
 8009784:	460f      	mov	r7, r1
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	2000      	movs	r0, #0
 800978c:	491a      	ldr	r1, [pc, #104]	; (80097f8 <__kernel_tan+0x390>)
 800978e:	f7f7 f85d 	bl	800084c <__aeabi_ddiv>
 8009792:	2600      	movs	r6, #0
 8009794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009798:	4652      	mov	r2, sl
 800979a:	465b      	mov	r3, fp
 800979c:	4630      	mov	r0, r6
 800979e:	4639      	mov	r1, r7
 80097a0:	f7f6 fd72 	bl	8000288 <__aeabi_dsub>
 80097a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097b0:	f7f6 fd6a 	bl	8000288 <__aeabi_dsub>
 80097b4:	4632      	mov	r2, r6
 80097b6:	462b      	mov	r3, r5
 80097b8:	f7f6 ff1e 	bl	80005f8 <__aeabi_dmul>
 80097bc:	4632      	mov	r2, r6
 80097be:	4682      	mov	sl, r0
 80097c0:	468b      	mov	fp, r1
 80097c2:	462b      	mov	r3, r5
 80097c4:	4630      	mov	r0, r6
 80097c6:	4639      	mov	r1, r7
 80097c8:	f7f6 ff16 	bl	80005f8 <__aeabi_dmul>
 80097cc:	2200      	movs	r2, #0
 80097ce:	4b0b      	ldr	r3, [pc, #44]	; (80097fc <__kernel_tan+0x394>)
 80097d0:	f7f6 fd5c 	bl	800028c <__adddf3>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	4650      	mov	r0, sl
 80097da:	4659      	mov	r1, fp
 80097dc:	f7f6 fd56 	bl	800028c <__adddf3>
 80097e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097e4:	f7f6 ff08 	bl	80005f8 <__aeabi_dmul>
 80097e8:	4632      	mov	r2, r6
 80097ea:	462b      	mov	r3, r5
 80097ec:	f7f6 fd4e 	bl	800028c <__adddf3>
 80097f0:	e65f      	b.n	80094b2 <__kernel_tan+0x4a>
 80097f2:	4682      	mov	sl, r0
 80097f4:	468b      	mov	fp, r1
 80097f6:	e65e      	b.n	80094b6 <__kernel_tan+0x4e>
 80097f8:	bff00000 	.word	0xbff00000
 80097fc:	3ff00000 	.word	0x3ff00000

08009800 <fabs>:
 8009800:	ec51 0b10 	vmov	r0, r1, d0
 8009804:	ee10 2a10 	vmov	r2, s0
 8009808:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800980c:	ec43 2b10 	vmov	d0, r2, r3
 8009810:	4770      	bx	lr
 8009812:	0000      	movs	r0, r0
 8009814:	0000      	movs	r0, r0
	...

08009818 <floor>:
 8009818:	ec51 0b10 	vmov	r0, r1, d0
 800981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009820:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009824:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009828:	2e13      	cmp	r6, #19
 800982a:	460c      	mov	r4, r1
 800982c:	ee10 5a10 	vmov	r5, s0
 8009830:	4680      	mov	r8, r0
 8009832:	dc34      	bgt.n	800989e <floor+0x86>
 8009834:	2e00      	cmp	r6, #0
 8009836:	da16      	bge.n	8009866 <floor+0x4e>
 8009838:	a335      	add	r3, pc, #212	; (adr r3, 8009910 <floor+0xf8>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 fd25 	bl	800028c <__adddf3>
 8009842:	2200      	movs	r2, #0
 8009844:	2300      	movs	r3, #0
 8009846:	f7f7 f967 	bl	8000b18 <__aeabi_dcmpgt>
 800984a:	b148      	cbz	r0, 8009860 <floor+0x48>
 800984c:	2c00      	cmp	r4, #0
 800984e:	da59      	bge.n	8009904 <floor+0xec>
 8009850:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009854:	4a30      	ldr	r2, [pc, #192]	; (8009918 <floor+0x100>)
 8009856:	432b      	orrs	r3, r5
 8009858:	2500      	movs	r5, #0
 800985a:	42ab      	cmp	r3, r5
 800985c:	bf18      	it	ne
 800985e:	4614      	movne	r4, r2
 8009860:	4621      	mov	r1, r4
 8009862:	4628      	mov	r0, r5
 8009864:	e025      	b.n	80098b2 <floor+0x9a>
 8009866:	4f2d      	ldr	r7, [pc, #180]	; (800991c <floor+0x104>)
 8009868:	4137      	asrs	r7, r6
 800986a:	ea01 0307 	and.w	r3, r1, r7
 800986e:	4303      	orrs	r3, r0
 8009870:	d01f      	beq.n	80098b2 <floor+0x9a>
 8009872:	a327      	add	r3, pc, #156	; (adr r3, 8009910 <floor+0xf8>)
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	f7f6 fd08 	bl	800028c <__adddf3>
 800987c:	2200      	movs	r2, #0
 800987e:	2300      	movs	r3, #0
 8009880:	f7f7 f94a 	bl	8000b18 <__aeabi_dcmpgt>
 8009884:	2800      	cmp	r0, #0
 8009886:	d0eb      	beq.n	8009860 <floor+0x48>
 8009888:	2c00      	cmp	r4, #0
 800988a:	bfbe      	ittt	lt
 800988c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009890:	fa43 f606 	asrlt.w	r6, r3, r6
 8009894:	19a4      	addlt	r4, r4, r6
 8009896:	ea24 0407 	bic.w	r4, r4, r7
 800989a:	2500      	movs	r5, #0
 800989c:	e7e0      	b.n	8009860 <floor+0x48>
 800989e:	2e33      	cmp	r6, #51	; 0x33
 80098a0:	dd0b      	ble.n	80098ba <floor+0xa2>
 80098a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80098a6:	d104      	bne.n	80098b2 <floor+0x9a>
 80098a8:	ee10 2a10 	vmov	r2, s0
 80098ac:	460b      	mov	r3, r1
 80098ae:	f7f6 fced 	bl	800028c <__adddf3>
 80098b2:	ec41 0b10 	vmov	d0, r0, r1
 80098b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80098be:	f04f 33ff 	mov.w	r3, #4294967295
 80098c2:	fa23 f707 	lsr.w	r7, r3, r7
 80098c6:	4207      	tst	r7, r0
 80098c8:	d0f3      	beq.n	80098b2 <floor+0x9a>
 80098ca:	a311      	add	r3, pc, #68	; (adr r3, 8009910 <floor+0xf8>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f7f6 fcdc 	bl	800028c <__adddf3>
 80098d4:	2200      	movs	r2, #0
 80098d6:	2300      	movs	r3, #0
 80098d8:	f7f7 f91e 	bl	8000b18 <__aeabi_dcmpgt>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d0bf      	beq.n	8009860 <floor+0x48>
 80098e0:	2c00      	cmp	r4, #0
 80098e2:	da02      	bge.n	80098ea <floor+0xd2>
 80098e4:	2e14      	cmp	r6, #20
 80098e6:	d103      	bne.n	80098f0 <floor+0xd8>
 80098e8:	3401      	adds	r4, #1
 80098ea:	ea25 0507 	bic.w	r5, r5, r7
 80098ee:	e7b7      	b.n	8009860 <floor+0x48>
 80098f0:	2301      	movs	r3, #1
 80098f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80098f6:	fa03 f606 	lsl.w	r6, r3, r6
 80098fa:	4435      	add	r5, r6
 80098fc:	4545      	cmp	r5, r8
 80098fe:	bf38      	it	cc
 8009900:	18e4      	addcc	r4, r4, r3
 8009902:	e7f2      	b.n	80098ea <floor+0xd2>
 8009904:	2500      	movs	r5, #0
 8009906:	462c      	mov	r4, r5
 8009908:	e7aa      	b.n	8009860 <floor+0x48>
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w
 8009910:	8800759c 	.word	0x8800759c
 8009914:	7e37e43c 	.word	0x7e37e43c
 8009918:	bff00000 	.word	0xbff00000
 800991c:	000fffff 	.word	0x000fffff

08009920 <scalbn>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	ec55 4b10 	vmov	r4, r5, d0
 8009926:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800992a:	4606      	mov	r6, r0
 800992c:	462b      	mov	r3, r5
 800992e:	b9aa      	cbnz	r2, 800995c <scalbn+0x3c>
 8009930:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009934:	4323      	orrs	r3, r4
 8009936:	d03b      	beq.n	80099b0 <scalbn+0x90>
 8009938:	4b31      	ldr	r3, [pc, #196]	; (8009a00 <scalbn+0xe0>)
 800993a:	4629      	mov	r1, r5
 800993c:	2200      	movs	r2, #0
 800993e:	ee10 0a10 	vmov	r0, s0
 8009942:	f7f6 fe59 	bl	80005f8 <__aeabi_dmul>
 8009946:	4b2f      	ldr	r3, [pc, #188]	; (8009a04 <scalbn+0xe4>)
 8009948:	429e      	cmp	r6, r3
 800994a:	4604      	mov	r4, r0
 800994c:	460d      	mov	r5, r1
 800994e:	da12      	bge.n	8009976 <scalbn+0x56>
 8009950:	a327      	add	r3, pc, #156	; (adr r3, 80099f0 <scalbn+0xd0>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f7f6 fe4f 	bl	80005f8 <__aeabi_dmul>
 800995a:	e009      	b.n	8009970 <scalbn+0x50>
 800995c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009960:	428a      	cmp	r2, r1
 8009962:	d10c      	bne.n	800997e <scalbn+0x5e>
 8009964:	ee10 2a10 	vmov	r2, s0
 8009968:	4620      	mov	r0, r4
 800996a:	4629      	mov	r1, r5
 800996c:	f7f6 fc8e 	bl	800028c <__adddf3>
 8009970:	4604      	mov	r4, r0
 8009972:	460d      	mov	r5, r1
 8009974:	e01c      	b.n	80099b0 <scalbn+0x90>
 8009976:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800997a:	460b      	mov	r3, r1
 800997c:	3a36      	subs	r2, #54	; 0x36
 800997e:	4432      	add	r2, r6
 8009980:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009984:	428a      	cmp	r2, r1
 8009986:	dd0b      	ble.n	80099a0 <scalbn+0x80>
 8009988:	ec45 4b11 	vmov	d1, r4, r5
 800998c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80099f8 <scalbn+0xd8>
 8009990:	f000 f83c 	bl	8009a0c <copysign>
 8009994:	a318      	add	r3, pc, #96	; (adr r3, 80099f8 <scalbn+0xd8>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	ec51 0b10 	vmov	r0, r1, d0
 800999e:	e7da      	b.n	8009956 <scalbn+0x36>
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	dd08      	ble.n	80099b6 <scalbn+0x96>
 80099a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80099a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099b0:	ec45 4b10 	vmov	d0, r4, r5
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
 80099b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80099ba:	da0d      	bge.n	80099d8 <scalbn+0xb8>
 80099bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80099c0:	429e      	cmp	r6, r3
 80099c2:	ec45 4b11 	vmov	d1, r4, r5
 80099c6:	dce1      	bgt.n	800998c <scalbn+0x6c>
 80099c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80099f0 <scalbn+0xd0>
 80099cc:	f000 f81e 	bl	8009a0c <copysign>
 80099d0:	a307      	add	r3, pc, #28	; (adr r3, 80099f0 <scalbn+0xd0>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	e7e0      	b.n	800999a <scalbn+0x7a>
 80099d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80099dc:	3236      	adds	r2, #54	; 0x36
 80099de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099e6:	4620      	mov	r0, r4
 80099e8:	4629      	mov	r1, r5
 80099ea:	2200      	movs	r2, #0
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <scalbn+0xe8>)
 80099ee:	e7b2      	b.n	8009956 <scalbn+0x36>
 80099f0:	c2f8f359 	.word	0xc2f8f359
 80099f4:	01a56e1f 	.word	0x01a56e1f
 80099f8:	8800759c 	.word	0x8800759c
 80099fc:	7e37e43c 	.word	0x7e37e43c
 8009a00:	43500000 	.word	0x43500000
 8009a04:	ffff3cb0 	.word	0xffff3cb0
 8009a08:	3c900000 	.word	0x3c900000

08009a0c <copysign>:
 8009a0c:	ec51 0b10 	vmov	r0, r1, d0
 8009a10:	ee11 0a90 	vmov	r0, s3
 8009a14:	ee10 2a10 	vmov	r2, s0
 8009a18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009a1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009a20:	ea41 0300 	orr.w	r3, r1, r0
 8009a24:	ec43 2b10 	vmov	d0, r2, r3
 8009a28:	4770      	bx	lr
	...

08009a2c <__errno>:
 8009a2c:	4b01      	ldr	r3, [pc, #4]	; (8009a34 <__errno+0x8>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	2000001c 	.word	0x2000001c

08009a38 <__libc_init_array>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4e0d      	ldr	r6, [pc, #52]	; (8009a70 <__libc_init_array+0x38>)
 8009a3c:	4c0d      	ldr	r4, [pc, #52]	; (8009a74 <__libc_init_array+0x3c>)
 8009a3e:	1ba4      	subs	r4, r4, r6
 8009a40:	10a4      	asrs	r4, r4, #2
 8009a42:	2500      	movs	r5, #0
 8009a44:	42a5      	cmp	r5, r4
 8009a46:	d109      	bne.n	8009a5c <__libc_init_array+0x24>
 8009a48:	4e0b      	ldr	r6, [pc, #44]	; (8009a78 <__libc_init_array+0x40>)
 8009a4a:	4c0c      	ldr	r4, [pc, #48]	; (8009a7c <__libc_init_array+0x44>)
 8009a4c:	f004 f848 	bl	800dae0 <_init>
 8009a50:	1ba4      	subs	r4, r4, r6
 8009a52:	10a4      	asrs	r4, r4, #2
 8009a54:	2500      	movs	r5, #0
 8009a56:	42a5      	cmp	r5, r4
 8009a58:	d105      	bne.n	8009a66 <__libc_init_array+0x2e>
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a60:	4798      	blx	r3
 8009a62:	3501      	adds	r5, #1
 8009a64:	e7ee      	b.n	8009a44 <__libc_init_array+0xc>
 8009a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a6a:	4798      	blx	r3
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	e7f2      	b.n	8009a56 <__libc_init_array+0x1e>
 8009a70:	0800e028 	.word	0x0800e028
 8009a74:	0800e028 	.word	0x0800e028
 8009a78:	0800e028 	.word	0x0800e028
 8009a7c:	0800e02c 	.word	0x0800e02c

08009a80 <memset>:
 8009a80:	4402      	add	r2, r0
 8009a82:	4603      	mov	r3, r0
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d100      	bne.n	8009a8a <memset+0xa>
 8009a88:	4770      	bx	lr
 8009a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a8e:	e7f9      	b.n	8009a84 <memset+0x4>

08009a90 <__cvt>:
 8009a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a94:	ec55 4b10 	vmov	r4, r5, d0
 8009a98:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009a9a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	460e      	mov	r6, r1
 8009aa2:	4691      	mov	r9, r2
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	bfb8      	it	lt
 8009aa8:	4622      	movlt	r2, r4
 8009aaa:	462b      	mov	r3, r5
 8009aac:	f027 0720 	bic.w	r7, r7, #32
 8009ab0:	bfbb      	ittet	lt
 8009ab2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ab6:	461d      	movlt	r5, r3
 8009ab8:	2300      	movge	r3, #0
 8009aba:	232d      	movlt	r3, #45	; 0x2d
 8009abc:	bfb8      	it	lt
 8009abe:	4614      	movlt	r4, r2
 8009ac0:	2f46      	cmp	r7, #70	; 0x46
 8009ac2:	700b      	strb	r3, [r1, #0]
 8009ac4:	d004      	beq.n	8009ad0 <__cvt+0x40>
 8009ac6:	2f45      	cmp	r7, #69	; 0x45
 8009ac8:	d100      	bne.n	8009acc <__cvt+0x3c>
 8009aca:	3601      	adds	r6, #1
 8009acc:	2102      	movs	r1, #2
 8009ace:	e000      	b.n	8009ad2 <__cvt+0x42>
 8009ad0:	2103      	movs	r1, #3
 8009ad2:	ab03      	add	r3, sp, #12
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	ab02      	add	r3, sp, #8
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	4632      	mov	r2, r6
 8009adc:	4653      	mov	r3, sl
 8009ade:	ec45 4b10 	vmov	d0, r4, r5
 8009ae2:	f001 fe2d 	bl	800b740 <_dtoa_r>
 8009ae6:	2f47      	cmp	r7, #71	; 0x47
 8009ae8:	4680      	mov	r8, r0
 8009aea:	d102      	bne.n	8009af2 <__cvt+0x62>
 8009aec:	f019 0f01 	tst.w	r9, #1
 8009af0:	d026      	beq.n	8009b40 <__cvt+0xb0>
 8009af2:	2f46      	cmp	r7, #70	; 0x46
 8009af4:	eb08 0906 	add.w	r9, r8, r6
 8009af8:	d111      	bne.n	8009b1e <__cvt+0x8e>
 8009afa:	f898 3000 	ldrb.w	r3, [r8]
 8009afe:	2b30      	cmp	r3, #48	; 0x30
 8009b00:	d10a      	bne.n	8009b18 <__cvt+0x88>
 8009b02:	2200      	movs	r2, #0
 8009b04:	2300      	movs	r3, #0
 8009b06:	4620      	mov	r0, r4
 8009b08:	4629      	mov	r1, r5
 8009b0a:	f7f6 ffdd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b0e:	b918      	cbnz	r0, 8009b18 <__cvt+0x88>
 8009b10:	f1c6 0601 	rsb	r6, r6, #1
 8009b14:	f8ca 6000 	str.w	r6, [sl]
 8009b18:	f8da 3000 	ldr.w	r3, [sl]
 8009b1c:	4499      	add	r9, r3
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2300      	movs	r3, #0
 8009b22:	4620      	mov	r0, r4
 8009b24:	4629      	mov	r1, r5
 8009b26:	f7f6 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b2a:	b938      	cbnz	r0, 8009b3c <__cvt+0xac>
 8009b2c:	2230      	movs	r2, #48	; 0x30
 8009b2e:	9b03      	ldr	r3, [sp, #12]
 8009b30:	454b      	cmp	r3, r9
 8009b32:	d205      	bcs.n	8009b40 <__cvt+0xb0>
 8009b34:	1c59      	adds	r1, r3, #1
 8009b36:	9103      	str	r1, [sp, #12]
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	e7f8      	b.n	8009b2e <__cvt+0x9e>
 8009b3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b40:	9b03      	ldr	r3, [sp, #12]
 8009b42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b44:	eba3 0308 	sub.w	r3, r3, r8
 8009b48:	4640      	mov	r0, r8
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	b004      	add	sp, #16
 8009b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009b52 <__exponent>:
 8009b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b54:	2900      	cmp	r1, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	bfba      	itte	lt
 8009b5a:	4249      	neglt	r1, r1
 8009b5c:	232d      	movlt	r3, #45	; 0x2d
 8009b5e:	232b      	movge	r3, #43	; 0x2b
 8009b60:	2909      	cmp	r1, #9
 8009b62:	f804 2b02 	strb.w	r2, [r4], #2
 8009b66:	7043      	strb	r3, [r0, #1]
 8009b68:	dd20      	ble.n	8009bac <__exponent+0x5a>
 8009b6a:	f10d 0307 	add.w	r3, sp, #7
 8009b6e:	461f      	mov	r7, r3
 8009b70:	260a      	movs	r6, #10
 8009b72:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b76:	fb06 1115 	mls	r1, r6, r5, r1
 8009b7a:	3130      	adds	r1, #48	; 0x30
 8009b7c:	2d09      	cmp	r5, #9
 8009b7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b82:	f103 32ff 	add.w	r2, r3, #4294967295
 8009b86:	4629      	mov	r1, r5
 8009b88:	dc09      	bgt.n	8009b9e <__exponent+0x4c>
 8009b8a:	3130      	adds	r1, #48	; 0x30
 8009b8c:	3b02      	subs	r3, #2
 8009b8e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009b92:	42bb      	cmp	r3, r7
 8009b94:	4622      	mov	r2, r4
 8009b96:	d304      	bcc.n	8009ba2 <__exponent+0x50>
 8009b98:	1a10      	subs	r0, r2, r0
 8009b9a:	b003      	add	sp, #12
 8009b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	e7e7      	b.n	8009b72 <__exponent+0x20>
 8009ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ba6:	f804 2b01 	strb.w	r2, [r4], #1
 8009baa:	e7f2      	b.n	8009b92 <__exponent+0x40>
 8009bac:	2330      	movs	r3, #48	; 0x30
 8009bae:	4419      	add	r1, r3
 8009bb0:	7083      	strb	r3, [r0, #2]
 8009bb2:	1d02      	adds	r2, r0, #4
 8009bb4:	70c1      	strb	r1, [r0, #3]
 8009bb6:	e7ef      	b.n	8009b98 <__exponent+0x46>

08009bb8 <_printf_float>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	b08d      	sub	sp, #52	; 0x34
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009bc4:	4616      	mov	r6, r2
 8009bc6:	461f      	mov	r7, r3
 8009bc8:	4605      	mov	r5, r0
 8009bca:	f003 f817 	bl	800cbfc <_localeconv_r>
 8009bce:	6803      	ldr	r3, [r0, #0]
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7f6 fafc 	bl	80001d0 <strlen>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	930a      	str	r3, [sp, #40]	; 0x28
 8009bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009be0:	9005      	str	r0, [sp, #20]
 8009be2:	3307      	adds	r3, #7
 8009be4:	f023 0307 	bic.w	r3, r3, #7
 8009be8:	f103 0208 	add.w	r2, r3, #8
 8009bec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009bf0:	f8d4 b000 	ldr.w	fp, [r4]
 8009bf4:	f8c8 2000 	str.w	r2, [r8]
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c00:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009c04:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c12:	4ba7      	ldr	r3, [pc, #668]	; (8009eb0 <_printf_float+0x2f8>)
 8009c14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c18:	f7f6 ff88 	bl	8000b2c <__aeabi_dcmpun>
 8009c1c:	bb70      	cbnz	r0, 8009c7c <_printf_float+0xc4>
 8009c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c22:	4ba3      	ldr	r3, [pc, #652]	; (8009eb0 <_printf_float+0x2f8>)
 8009c24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c28:	f7f6 ff62 	bl	8000af0 <__aeabi_dcmple>
 8009c2c:	bb30      	cbnz	r0, 8009c7c <_printf_float+0xc4>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	4640      	mov	r0, r8
 8009c34:	4649      	mov	r1, r9
 8009c36:	f7f6 ff51 	bl	8000adc <__aeabi_dcmplt>
 8009c3a:	b110      	cbz	r0, 8009c42 <_printf_float+0x8a>
 8009c3c:	232d      	movs	r3, #45	; 0x2d
 8009c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c42:	4a9c      	ldr	r2, [pc, #624]	; (8009eb4 <_printf_float+0x2fc>)
 8009c44:	4b9c      	ldr	r3, [pc, #624]	; (8009eb8 <_printf_float+0x300>)
 8009c46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009c4a:	bf8c      	ite	hi
 8009c4c:	4690      	movhi	r8, r2
 8009c4e:	4698      	movls	r8, r3
 8009c50:	2303      	movs	r3, #3
 8009c52:	f02b 0204 	bic.w	r2, fp, #4
 8009c56:	6123      	str	r3, [r4, #16]
 8009c58:	6022      	str	r2, [r4, #0]
 8009c5a:	f04f 0900 	mov.w	r9, #0
 8009c5e:	9700      	str	r7, [sp, #0]
 8009c60:	4633      	mov	r3, r6
 8009c62:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c64:	4621      	mov	r1, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 f9e6 	bl	800a038 <_printf_common>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	f040 808d 	bne.w	8009d8c <_printf_float+0x1d4>
 8009c72:	f04f 30ff 	mov.w	r0, #4294967295
 8009c76:	b00d      	add	sp, #52	; 0x34
 8009c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7c:	4642      	mov	r2, r8
 8009c7e:	464b      	mov	r3, r9
 8009c80:	4640      	mov	r0, r8
 8009c82:	4649      	mov	r1, r9
 8009c84:	f7f6 ff52 	bl	8000b2c <__aeabi_dcmpun>
 8009c88:	b110      	cbz	r0, 8009c90 <_printf_float+0xd8>
 8009c8a:	4a8c      	ldr	r2, [pc, #560]	; (8009ebc <_printf_float+0x304>)
 8009c8c:	4b8c      	ldr	r3, [pc, #560]	; (8009ec0 <_printf_float+0x308>)
 8009c8e:	e7da      	b.n	8009c46 <_printf_float+0x8e>
 8009c90:	6861      	ldr	r1, [r4, #4]
 8009c92:	1c4b      	adds	r3, r1, #1
 8009c94:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009c98:	a80a      	add	r0, sp, #40	; 0x28
 8009c9a:	d13e      	bne.n	8009d1a <_printf_float+0x162>
 8009c9c:	2306      	movs	r3, #6
 8009c9e:	6063      	str	r3, [r4, #4]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009ca6:	ab09      	add	r3, sp, #36	; 0x24
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	ec49 8b10 	vmov	d0, r8, r9
 8009cae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009cb2:	6022      	str	r2, [r4, #0]
 8009cb4:	f8cd a004 	str.w	sl, [sp, #4]
 8009cb8:	6861      	ldr	r1, [r4, #4]
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f7ff fee8 	bl	8009a90 <__cvt>
 8009cc0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009cc4:	2b47      	cmp	r3, #71	; 0x47
 8009cc6:	4680      	mov	r8, r0
 8009cc8:	d109      	bne.n	8009cde <_printf_float+0x126>
 8009cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ccc:	1cd8      	adds	r0, r3, #3
 8009cce:	db02      	blt.n	8009cd6 <_printf_float+0x11e>
 8009cd0:	6862      	ldr	r2, [r4, #4]
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	dd47      	ble.n	8009d66 <_printf_float+0x1ae>
 8009cd6:	f1aa 0a02 	sub.w	sl, sl, #2
 8009cda:	fa5f fa8a 	uxtb.w	sl, sl
 8009cde:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ce4:	d824      	bhi.n	8009d30 <_printf_float+0x178>
 8009ce6:	3901      	subs	r1, #1
 8009ce8:	4652      	mov	r2, sl
 8009cea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cee:	9109      	str	r1, [sp, #36]	; 0x24
 8009cf0:	f7ff ff2f 	bl	8009b52 <__exponent>
 8009cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cf6:	1813      	adds	r3, r2, r0
 8009cf8:	2a01      	cmp	r2, #1
 8009cfa:	4681      	mov	r9, r0
 8009cfc:	6123      	str	r3, [r4, #16]
 8009cfe:	dc02      	bgt.n	8009d06 <_printf_float+0x14e>
 8009d00:	6822      	ldr	r2, [r4, #0]
 8009d02:	07d1      	lsls	r1, r2, #31
 8009d04:	d501      	bpl.n	8009d0a <_printf_float+0x152>
 8009d06:	3301      	adds	r3, #1
 8009d08:	6123      	str	r3, [r4, #16]
 8009d0a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0a5      	beq.n	8009c5e <_printf_float+0xa6>
 8009d12:	232d      	movs	r3, #45	; 0x2d
 8009d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d18:	e7a1      	b.n	8009c5e <_printf_float+0xa6>
 8009d1a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009d1e:	f000 8177 	beq.w	800a010 <_printf_float+0x458>
 8009d22:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009d26:	d1bb      	bne.n	8009ca0 <_printf_float+0xe8>
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	d1b9      	bne.n	8009ca0 <_printf_float+0xe8>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e7b6      	b.n	8009c9e <_printf_float+0xe6>
 8009d30:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009d34:	d119      	bne.n	8009d6a <_printf_float+0x1b2>
 8009d36:	2900      	cmp	r1, #0
 8009d38:	6863      	ldr	r3, [r4, #4]
 8009d3a:	dd0c      	ble.n	8009d56 <_printf_float+0x19e>
 8009d3c:	6121      	str	r1, [r4, #16]
 8009d3e:	b913      	cbnz	r3, 8009d46 <_printf_float+0x18e>
 8009d40:	6822      	ldr	r2, [r4, #0]
 8009d42:	07d2      	lsls	r2, r2, #31
 8009d44:	d502      	bpl.n	8009d4c <_printf_float+0x194>
 8009d46:	3301      	adds	r3, #1
 8009d48:	440b      	add	r3, r1
 8009d4a:	6123      	str	r3, [r4, #16]
 8009d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d50:	f04f 0900 	mov.w	r9, #0
 8009d54:	e7d9      	b.n	8009d0a <_printf_float+0x152>
 8009d56:	b913      	cbnz	r3, 8009d5e <_printf_float+0x1a6>
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	07d0      	lsls	r0, r2, #31
 8009d5c:	d501      	bpl.n	8009d62 <_printf_float+0x1aa>
 8009d5e:	3302      	adds	r3, #2
 8009d60:	e7f3      	b.n	8009d4a <_printf_float+0x192>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e7f1      	b.n	8009d4a <_printf_float+0x192>
 8009d66:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009d6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	db05      	blt.n	8009d7e <_printf_float+0x1c6>
 8009d72:	6822      	ldr	r2, [r4, #0]
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	07d1      	lsls	r1, r2, #31
 8009d78:	d5e8      	bpl.n	8009d4c <_printf_float+0x194>
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	e7e5      	b.n	8009d4a <_printf_float+0x192>
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bfd4      	ite	le
 8009d82:	f1c3 0302 	rsble	r3, r3, #2
 8009d86:	2301      	movgt	r3, #1
 8009d88:	4413      	add	r3, r2
 8009d8a:	e7de      	b.n	8009d4a <_printf_float+0x192>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	055a      	lsls	r2, r3, #21
 8009d90:	d407      	bmi.n	8009da2 <_printf_float+0x1ea>
 8009d92:	6923      	ldr	r3, [r4, #16]
 8009d94:	4642      	mov	r2, r8
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d12b      	bne.n	8009df8 <_printf_float+0x240>
 8009da0:	e767      	b.n	8009c72 <_printf_float+0xba>
 8009da2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009da6:	f240 80dc 	bls.w	8009f62 <_printf_float+0x3aa>
 8009daa:	2200      	movs	r2, #0
 8009dac:	2300      	movs	r3, #0
 8009dae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009db2:	f7f6 fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d033      	beq.n	8009e22 <_printf_float+0x26a>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4a41      	ldr	r2, [pc, #260]	; (8009ec4 <_printf_float+0x30c>)
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b8      	blx	r7
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	f43f af54 	beq.w	8009c72 <_printf_float+0xba>
 8009dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	db02      	blt.n	8009dd8 <_printf_float+0x220>
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	07d8      	lsls	r0, r3, #31
 8009dd6:	d50f      	bpl.n	8009df8 <_printf_float+0x240>
 8009dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4628      	mov	r0, r5
 8009de0:	47b8      	blx	r7
 8009de2:	3001      	adds	r0, #1
 8009de4:	f43f af45 	beq.w	8009c72 <_printf_float+0xba>
 8009de8:	f04f 0800 	mov.w	r8, #0
 8009dec:	f104 091a 	add.w	r9, r4, #26
 8009df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df2:	3b01      	subs	r3, #1
 8009df4:	4543      	cmp	r3, r8
 8009df6:	dc09      	bgt.n	8009e0c <_printf_float+0x254>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	079b      	lsls	r3, r3, #30
 8009dfc:	f100 8103 	bmi.w	800a006 <_printf_float+0x44e>
 8009e00:	68e0      	ldr	r0, [r4, #12]
 8009e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e04:	4298      	cmp	r0, r3
 8009e06:	bfb8      	it	lt
 8009e08:	4618      	movlt	r0, r3
 8009e0a:	e734      	b.n	8009c76 <_printf_float+0xbe>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	464a      	mov	r2, r9
 8009e10:	4631      	mov	r1, r6
 8009e12:	4628      	mov	r0, r5
 8009e14:	47b8      	blx	r7
 8009e16:	3001      	adds	r0, #1
 8009e18:	f43f af2b 	beq.w	8009c72 <_printf_float+0xba>
 8009e1c:	f108 0801 	add.w	r8, r8, #1
 8009e20:	e7e6      	b.n	8009df0 <_printf_float+0x238>
 8009e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	dc2b      	bgt.n	8009e80 <_printf_float+0x2c8>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4a26      	ldr	r2, [pc, #152]	; (8009ec4 <_printf_float+0x30c>)
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	f43f af1d 	beq.w	8009c72 <_printf_float+0xba>
 8009e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3a:	b923      	cbnz	r3, 8009e46 <_printf_float+0x28e>
 8009e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3e:	b913      	cbnz	r3, 8009e46 <_printf_float+0x28e>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	07d9      	lsls	r1, r3, #31
 8009e44:	d5d8      	bpl.n	8009df8 <_printf_float+0x240>
 8009e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b8      	blx	r7
 8009e50:	3001      	adds	r0, #1
 8009e52:	f43f af0e 	beq.w	8009c72 <_printf_float+0xba>
 8009e56:	f04f 0900 	mov.w	r9, #0
 8009e5a:	f104 0a1a 	add.w	sl, r4, #26
 8009e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e60:	425b      	negs	r3, r3
 8009e62:	454b      	cmp	r3, r9
 8009e64:	dc01      	bgt.n	8009e6a <_printf_float+0x2b2>
 8009e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e68:	e794      	b.n	8009d94 <_printf_float+0x1dc>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	4652      	mov	r2, sl
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b8      	blx	r7
 8009e74:	3001      	adds	r0, #1
 8009e76:	f43f aefc 	beq.w	8009c72 <_printf_float+0xba>
 8009e7a:	f109 0901 	add.w	r9, r9, #1
 8009e7e:	e7ee      	b.n	8009e5e <_printf_float+0x2a6>
 8009e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e84:	429a      	cmp	r2, r3
 8009e86:	bfa8      	it	ge
 8009e88:	461a      	movge	r2, r3
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	4691      	mov	r9, r2
 8009e8e:	dd07      	ble.n	8009ea0 <_printf_float+0x2e8>
 8009e90:	4613      	mov	r3, r2
 8009e92:	4631      	mov	r1, r6
 8009e94:	4642      	mov	r2, r8
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f43f aee9 	beq.w	8009c72 <_printf_float+0xba>
 8009ea0:	f104 031a 	add.w	r3, r4, #26
 8009ea4:	f04f 0b00 	mov.w	fp, #0
 8009ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eac:	9306      	str	r3, [sp, #24]
 8009eae:	e015      	b.n	8009edc <_printf_float+0x324>
 8009eb0:	7fefffff 	.word	0x7fefffff
 8009eb4:	0800dd10 	.word	0x0800dd10
 8009eb8:	0800dd0c 	.word	0x0800dd0c
 8009ebc:	0800dd18 	.word	0x0800dd18
 8009ec0:	0800dd14 	.word	0x0800dd14
 8009ec4:	0800dd1c 	.word	0x0800dd1c
 8009ec8:	2301      	movs	r3, #1
 8009eca:	9a06      	ldr	r2, [sp, #24]
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4628      	mov	r0, r5
 8009ed0:	47b8      	blx	r7
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	f43f aecd 	beq.w	8009c72 <_printf_float+0xba>
 8009ed8:	f10b 0b01 	add.w	fp, fp, #1
 8009edc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009ee0:	ebaa 0309 	sub.w	r3, sl, r9
 8009ee4:	455b      	cmp	r3, fp
 8009ee6:	dcef      	bgt.n	8009ec8 <_printf_float+0x310>
 8009ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eec:	429a      	cmp	r2, r3
 8009eee:	44d0      	add	r8, sl
 8009ef0:	db15      	blt.n	8009f1e <_printf_float+0x366>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	07da      	lsls	r2, r3, #31
 8009ef6:	d412      	bmi.n	8009f1e <_printf_float+0x366>
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009efc:	eba3 020a 	sub.w	r2, r3, sl
 8009f00:	eba3 0a01 	sub.w	sl, r3, r1
 8009f04:	4592      	cmp	sl, r2
 8009f06:	bfa8      	it	ge
 8009f08:	4692      	movge	sl, r2
 8009f0a:	f1ba 0f00 	cmp.w	sl, #0
 8009f0e:	dc0e      	bgt.n	8009f2e <_printf_float+0x376>
 8009f10:	f04f 0800 	mov.w	r8, #0
 8009f14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f18:	f104 091a 	add.w	r9, r4, #26
 8009f1c:	e019      	b.n	8009f52 <_printf_float+0x39a>
 8009f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	d1e5      	bne.n	8009ef8 <_printf_float+0x340>
 8009f2c:	e6a1      	b.n	8009c72 <_printf_float+0xba>
 8009f2e:	4653      	mov	r3, sl
 8009f30:	4642      	mov	r2, r8
 8009f32:	4631      	mov	r1, r6
 8009f34:	4628      	mov	r0, r5
 8009f36:	47b8      	blx	r7
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d1e9      	bne.n	8009f10 <_printf_float+0x358>
 8009f3c:	e699      	b.n	8009c72 <_printf_float+0xba>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	464a      	mov	r2, r9
 8009f42:	4631      	mov	r1, r6
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b8      	blx	r7
 8009f48:	3001      	adds	r0, #1
 8009f4a:	f43f ae92 	beq.w	8009c72 <_printf_float+0xba>
 8009f4e:	f108 0801 	add.w	r8, r8, #1
 8009f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f56:	1a9b      	subs	r3, r3, r2
 8009f58:	eba3 030a 	sub.w	r3, r3, sl
 8009f5c:	4543      	cmp	r3, r8
 8009f5e:	dcee      	bgt.n	8009f3e <_printf_float+0x386>
 8009f60:	e74a      	b.n	8009df8 <_printf_float+0x240>
 8009f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f64:	2a01      	cmp	r2, #1
 8009f66:	dc01      	bgt.n	8009f6c <_printf_float+0x3b4>
 8009f68:	07db      	lsls	r3, r3, #31
 8009f6a:	d53a      	bpl.n	8009fe2 <_printf_float+0x42a>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	4642      	mov	r2, r8
 8009f70:	4631      	mov	r1, r6
 8009f72:	4628      	mov	r0, r5
 8009f74:	47b8      	blx	r7
 8009f76:	3001      	adds	r0, #1
 8009f78:	f43f ae7b 	beq.w	8009c72 <_printf_float+0xba>
 8009f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f80:	4631      	mov	r1, r6
 8009f82:	4628      	mov	r0, r5
 8009f84:	47b8      	blx	r7
 8009f86:	3001      	adds	r0, #1
 8009f88:	f108 0801 	add.w	r8, r8, #1
 8009f8c:	f43f ae71 	beq.w	8009c72 <_printf_float+0xba>
 8009f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f92:	2200      	movs	r2, #0
 8009f94:	f103 3aff 	add.w	sl, r3, #4294967295
 8009f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f7f6 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa2:	b9c8      	cbnz	r0, 8009fd8 <_printf_float+0x420>
 8009fa4:	4653      	mov	r3, sl
 8009fa6:	4642      	mov	r2, r8
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4628      	mov	r0, r5
 8009fac:	47b8      	blx	r7
 8009fae:	3001      	adds	r0, #1
 8009fb0:	d10e      	bne.n	8009fd0 <_printf_float+0x418>
 8009fb2:	e65e      	b.n	8009c72 <_printf_float+0xba>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4652      	mov	r2, sl
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f ae57 	beq.w	8009c72 <_printf_float+0xba>
 8009fc4:	f108 0801 	add.w	r8, r8, #1
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	4543      	cmp	r3, r8
 8009fce:	dcf1      	bgt.n	8009fb4 <_printf_float+0x3fc>
 8009fd0:	464b      	mov	r3, r9
 8009fd2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fd6:	e6de      	b.n	8009d96 <_printf_float+0x1de>
 8009fd8:	f04f 0800 	mov.w	r8, #0
 8009fdc:	f104 0a1a 	add.w	sl, r4, #26
 8009fe0:	e7f2      	b.n	8009fc8 <_printf_float+0x410>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e7df      	b.n	8009fa6 <_printf_float+0x3ee>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	464a      	mov	r2, r9
 8009fea:	4631      	mov	r1, r6
 8009fec:	4628      	mov	r0, r5
 8009fee:	47b8      	blx	r7
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	f43f ae3e 	beq.w	8009c72 <_printf_float+0xba>
 8009ff6:	f108 0801 	add.w	r8, r8, #1
 8009ffa:	68e3      	ldr	r3, [r4, #12]
 8009ffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	4543      	cmp	r3, r8
 800a002:	dcf0      	bgt.n	8009fe6 <_printf_float+0x42e>
 800a004:	e6fc      	b.n	8009e00 <_printf_float+0x248>
 800a006:	f04f 0800 	mov.w	r8, #0
 800a00a:	f104 0919 	add.w	r9, r4, #25
 800a00e:	e7f4      	b.n	8009ffa <_printf_float+0x442>
 800a010:	2900      	cmp	r1, #0
 800a012:	f43f ae8b 	beq.w	8009d2c <_printf_float+0x174>
 800a016:	2300      	movs	r3, #0
 800a018:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a01c:	ab09      	add	r3, sp, #36	; 0x24
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	ec49 8b10 	vmov	d0, r8, r9
 800a024:	6022      	str	r2, [r4, #0]
 800a026:	f8cd a004 	str.w	sl, [sp, #4]
 800a02a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a02e:	4628      	mov	r0, r5
 800a030:	f7ff fd2e 	bl	8009a90 <__cvt>
 800a034:	4680      	mov	r8, r0
 800a036:	e648      	b.n	8009cca <_printf_float+0x112>

0800a038 <_printf_common>:
 800a038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a03c:	4691      	mov	r9, r2
 800a03e:	461f      	mov	r7, r3
 800a040:	688a      	ldr	r2, [r1, #8]
 800a042:	690b      	ldr	r3, [r1, #16]
 800a044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a048:	4293      	cmp	r3, r2
 800a04a:	bfb8      	it	lt
 800a04c:	4613      	movlt	r3, r2
 800a04e:	f8c9 3000 	str.w	r3, [r9]
 800a052:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a056:	4606      	mov	r6, r0
 800a058:	460c      	mov	r4, r1
 800a05a:	b112      	cbz	r2, 800a062 <_printf_common+0x2a>
 800a05c:	3301      	adds	r3, #1
 800a05e:	f8c9 3000 	str.w	r3, [r9]
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	0699      	lsls	r1, r3, #26
 800a066:	bf42      	ittt	mi
 800a068:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a06c:	3302      	addmi	r3, #2
 800a06e:	f8c9 3000 	strmi.w	r3, [r9]
 800a072:	6825      	ldr	r5, [r4, #0]
 800a074:	f015 0506 	ands.w	r5, r5, #6
 800a078:	d107      	bne.n	800a08a <_printf_common+0x52>
 800a07a:	f104 0a19 	add.w	sl, r4, #25
 800a07e:	68e3      	ldr	r3, [r4, #12]
 800a080:	f8d9 2000 	ldr.w	r2, [r9]
 800a084:	1a9b      	subs	r3, r3, r2
 800a086:	42ab      	cmp	r3, r5
 800a088:	dc28      	bgt.n	800a0dc <_printf_common+0xa4>
 800a08a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a08e:	6822      	ldr	r2, [r4, #0]
 800a090:	3300      	adds	r3, #0
 800a092:	bf18      	it	ne
 800a094:	2301      	movne	r3, #1
 800a096:	0692      	lsls	r2, r2, #26
 800a098:	d42d      	bmi.n	800a0f6 <_printf_common+0xbe>
 800a09a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a09e:	4639      	mov	r1, r7
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	47c0      	blx	r8
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d020      	beq.n	800a0ea <_printf_common+0xb2>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	68e5      	ldr	r5, [r4, #12]
 800a0ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a0b0:	f003 0306 	and.w	r3, r3, #6
 800a0b4:	2b04      	cmp	r3, #4
 800a0b6:	bf08      	it	eq
 800a0b8:	1aad      	subeq	r5, r5, r2
 800a0ba:	68a3      	ldr	r3, [r4, #8]
 800a0bc:	6922      	ldr	r2, [r4, #16]
 800a0be:	bf0c      	ite	eq
 800a0c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0c4:	2500      	movne	r5, #0
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	bfc4      	itt	gt
 800a0ca:	1a9b      	subgt	r3, r3, r2
 800a0cc:	18ed      	addgt	r5, r5, r3
 800a0ce:	f04f 0900 	mov.w	r9, #0
 800a0d2:	341a      	adds	r4, #26
 800a0d4:	454d      	cmp	r5, r9
 800a0d6:	d11a      	bne.n	800a10e <_printf_common+0xd6>
 800a0d8:	2000      	movs	r0, #0
 800a0da:	e008      	b.n	800a0ee <_printf_common+0xb6>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4652      	mov	r2, sl
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	47c0      	blx	r8
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d103      	bne.n	800a0f2 <_printf_common+0xba>
 800a0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f2:	3501      	adds	r5, #1
 800a0f4:	e7c3      	b.n	800a07e <_printf_common+0x46>
 800a0f6:	18e1      	adds	r1, r4, r3
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	2030      	movs	r0, #48	; 0x30
 800a0fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a100:	4422      	add	r2, r4
 800a102:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a106:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a10a:	3302      	adds	r3, #2
 800a10c:	e7c5      	b.n	800a09a <_printf_common+0x62>
 800a10e:	2301      	movs	r3, #1
 800a110:	4622      	mov	r2, r4
 800a112:	4639      	mov	r1, r7
 800a114:	4630      	mov	r0, r6
 800a116:	47c0      	blx	r8
 800a118:	3001      	adds	r0, #1
 800a11a:	d0e6      	beq.n	800a0ea <_printf_common+0xb2>
 800a11c:	f109 0901 	add.w	r9, r9, #1
 800a120:	e7d8      	b.n	800a0d4 <_printf_common+0x9c>
	...

0800a124 <_printf_i>:
 800a124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a128:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a12c:	460c      	mov	r4, r1
 800a12e:	7e09      	ldrb	r1, [r1, #24]
 800a130:	b085      	sub	sp, #20
 800a132:	296e      	cmp	r1, #110	; 0x6e
 800a134:	4617      	mov	r7, r2
 800a136:	4606      	mov	r6, r0
 800a138:	4698      	mov	r8, r3
 800a13a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a13c:	f000 80b3 	beq.w	800a2a6 <_printf_i+0x182>
 800a140:	d822      	bhi.n	800a188 <_printf_i+0x64>
 800a142:	2963      	cmp	r1, #99	; 0x63
 800a144:	d036      	beq.n	800a1b4 <_printf_i+0x90>
 800a146:	d80a      	bhi.n	800a15e <_printf_i+0x3a>
 800a148:	2900      	cmp	r1, #0
 800a14a:	f000 80b9 	beq.w	800a2c0 <_printf_i+0x19c>
 800a14e:	2958      	cmp	r1, #88	; 0x58
 800a150:	f000 8083 	beq.w	800a25a <_printf_i+0x136>
 800a154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a158:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a15c:	e032      	b.n	800a1c4 <_printf_i+0xa0>
 800a15e:	2964      	cmp	r1, #100	; 0x64
 800a160:	d001      	beq.n	800a166 <_printf_i+0x42>
 800a162:	2969      	cmp	r1, #105	; 0x69
 800a164:	d1f6      	bne.n	800a154 <_printf_i+0x30>
 800a166:	6820      	ldr	r0, [r4, #0]
 800a168:	6813      	ldr	r3, [r2, #0]
 800a16a:	0605      	lsls	r5, r0, #24
 800a16c:	f103 0104 	add.w	r1, r3, #4
 800a170:	d52a      	bpl.n	800a1c8 <_printf_i+0xa4>
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6011      	str	r1, [r2, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	da03      	bge.n	800a182 <_printf_i+0x5e>
 800a17a:	222d      	movs	r2, #45	; 0x2d
 800a17c:	425b      	negs	r3, r3
 800a17e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a182:	486f      	ldr	r0, [pc, #444]	; (800a340 <_printf_i+0x21c>)
 800a184:	220a      	movs	r2, #10
 800a186:	e039      	b.n	800a1fc <_printf_i+0xd8>
 800a188:	2973      	cmp	r1, #115	; 0x73
 800a18a:	f000 809d 	beq.w	800a2c8 <_printf_i+0x1a4>
 800a18e:	d808      	bhi.n	800a1a2 <_printf_i+0x7e>
 800a190:	296f      	cmp	r1, #111	; 0x6f
 800a192:	d020      	beq.n	800a1d6 <_printf_i+0xb2>
 800a194:	2970      	cmp	r1, #112	; 0x70
 800a196:	d1dd      	bne.n	800a154 <_printf_i+0x30>
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	f043 0320 	orr.w	r3, r3, #32
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	e003      	b.n	800a1aa <_printf_i+0x86>
 800a1a2:	2975      	cmp	r1, #117	; 0x75
 800a1a4:	d017      	beq.n	800a1d6 <_printf_i+0xb2>
 800a1a6:	2978      	cmp	r1, #120	; 0x78
 800a1a8:	d1d4      	bne.n	800a154 <_printf_i+0x30>
 800a1aa:	2378      	movs	r3, #120	; 0x78
 800a1ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1b0:	4864      	ldr	r0, [pc, #400]	; (800a344 <_printf_i+0x220>)
 800a1b2:	e055      	b.n	800a260 <_printf_i+0x13c>
 800a1b4:	6813      	ldr	r3, [r2, #0]
 800a1b6:	1d19      	adds	r1, r3, #4
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6011      	str	r1, [r2, #0]
 800a1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e08c      	b.n	800a2e2 <_printf_i+0x1be>
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6011      	str	r1, [r2, #0]
 800a1cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1d0:	bf18      	it	ne
 800a1d2:	b21b      	sxthne	r3, r3
 800a1d4:	e7cf      	b.n	800a176 <_printf_i+0x52>
 800a1d6:	6813      	ldr	r3, [r2, #0]
 800a1d8:	6825      	ldr	r5, [r4, #0]
 800a1da:	1d18      	adds	r0, r3, #4
 800a1dc:	6010      	str	r0, [r2, #0]
 800a1de:	0628      	lsls	r0, r5, #24
 800a1e0:	d501      	bpl.n	800a1e6 <_printf_i+0xc2>
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	e002      	b.n	800a1ec <_printf_i+0xc8>
 800a1e6:	0668      	lsls	r0, r5, #25
 800a1e8:	d5fb      	bpl.n	800a1e2 <_printf_i+0xbe>
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	4854      	ldr	r0, [pc, #336]	; (800a340 <_printf_i+0x21c>)
 800a1ee:	296f      	cmp	r1, #111	; 0x6f
 800a1f0:	bf14      	ite	ne
 800a1f2:	220a      	movne	r2, #10
 800a1f4:	2208      	moveq	r2, #8
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1fc:	6865      	ldr	r5, [r4, #4]
 800a1fe:	60a5      	str	r5, [r4, #8]
 800a200:	2d00      	cmp	r5, #0
 800a202:	f2c0 8095 	blt.w	800a330 <_printf_i+0x20c>
 800a206:	6821      	ldr	r1, [r4, #0]
 800a208:	f021 0104 	bic.w	r1, r1, #4
 800a20c:	6021      	str	r1, [r4, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d13d      	bne.n	800a28e <_printf_i+0x16a>
 800a212:	2d00      	cmp	r5, #0
 800a214:	f040 808e 	bne.w	800a334 <_printf_i+0x210>
 800a218:	4665      	mov	r5, ip
 800a21a:	2a08      	cmp	r2, #8
 800a21c:	d10b      	bne.n	800a236 <_printf_i+0x112>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	07db      	lsls	r3, r3, #31
 800a222:	d508      	bpl.n	800a236 <_printf_i+0x112>
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	6862      	ldr	r2, [r4, #4]
 800a228:	429a      	cmp	r2, r3
 800a22a:	bfde      	ittt	le
 800a22c:	2330      	movle	r3, #48	; 0x30
 800a22e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a232:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a236:	ebac 0305 	sub.w	r3, ip, r5
 800a23a:	6123      	str	r3, [r4, #16]
 800a23c:	f8cd 8000 	str.w	r8, [sp]
 800a240:	463b      	mov	r3, r7
 800a242:	aa03      	add	r2, sp, #12
 800a244:	4621      	mov	r1, r4
 800a246:	4630      	mov	r0, r6
 800a248:	f7ff fef6 	bl	800a038 <_printf_common>
 800a24c:	3001      	adds	r0, #1
 800a24e:	d14d      	bne.n	800a2ec <_printf_i+0x1c8>
 800a250:	f04f 30ff 	mov.w	r0, #4294967295
 800a254:	b005      	add	sp, #20
 800a256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a25a:	4839      	ldr	r0, [pc, #228]	; (800a340 <_printf_i+0x21c>)
 800a25c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a260:	6813      	ldr	r3, [r2, #0]
 800a262:	6821      	ldr	r1, [r4, #0]
 800a264:	1d1d      	adds	r5, r3, #4
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6015      	str	r5, [r2, #0]
 800a26a:	060a      	lsls	r2, r1, #24
 800a26c:	d50b      	bpl.n	800a286 <_printf_i+0x162>
 800a26e:	07ca      	lsls	r2, r1, #31
 800a270:	bf44      	itt	mi
 800a272:	f041 0120 	orrmi.w	r1, r1, #32
 800a276:	6021      	strmi	r1, [r4, #0]
 800a278:	b91b      	cbnz	r3, 800a282 <_printf_i+0x15e>
 800a27a:	6822      	ldr	r2, [r4, #0]
 800a27c:	f022 0220 	bic.w	r2, r2, #32
 800a280:	6022      	str	r2, [r4, #0]
 800a282:	2210      	movs	r2, #16
 800a284:	e7b7      	b.n	800a1f6 <_printf_i+0xd2>
 800a286:	064d      	lsls	r5, r1, #25
 800a288:	bf48      	it	mi
 800a28a:	b29b      	uxthmi	r3, r3
 800a28c:	e7ef      	b.n	800a26e <_printf_i+0x14a>
 800a28e:	4665      	mov	r5, ip
 800a290:	fbb3 f1f2 	udiv	r1, r3, r2
 800a294:	fb02 3311 	mls	r3, r2, r1, r3
 800a298:	5cc3      	ldrb	r3, [r0, r3]
 800a29a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a29e:	460b      	mov	r3, r1
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	d1f5      	bne.n	800a290 <_printf_i+0x16c>
 800a2a4:	e7b9      	b.n	800a21a <_printf_i+0xf6>
 800a2a6:	6813      	ldr	r3, [r2, #0]
 800a2a8:	6825      	ldr	r5, [r4, #0]
 800a2aa:	6961      	ldr	r1, [r4, #20]
 800a2ac:	1d18      	adds	r0, r3, #4
 800a2ae:	6010      	str	r0, [r2, #0]
 800a2b0:	0628      	lsls	r0, r5, #24
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	d501      	bpl.n	800a2ba <_printf_i+0x196>
 800a2b6:	6019      	str	r1, [r3, #0]
 800a2b8:	e002      	b.n	800a2c0 <_printf_i+0x19c>
 800a2ba:	066a      	lsls	r2, r5, #25
 800a2bc:	d5fb      	bpl.n	800a2b6 <_printf_i+0x192>
 800a2be:	8019      	strh	r1, [r3, #0]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	6123      	str	r3, [r4, #16]
 800a2c4:	4665      	mov	r5, ip
 800a2c6:	e7b9      	b.n	800a23c <_printf_i+0x118>
 800a2c8:	6813      	ldr	r3, [r2, #0]
 800a2ca:	1d19      	adds	r1, r3, #4
 800a2cc:	6011      	str	r1, [r2, #0]
 800a2ce:	681d      	ldr	r5, [r3, #0]
 800a2d0:	6862      	ldr	r2, [r4, #4]
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f7f5 ff83 	bl	80001e0 <memchr>
 800a2da:	b108      	cbz	r0, 800a2e0 <_printf_i+0x1bc>
 800a2dc:	1b40      	subs	r0, r0, r5
 800a2de:	6060      	str	r0, [r4, #4]
 800a2e0:	6863      	ldr	r3, [r4, #4]
 800a2e2:	6123      	str	r3, [r4, #16]
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ea:	e7a7      	b.n	800a23c <_printf_i+0x118>
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	462a      	mov	r2, r5
 800a2f0:	4639      	mov	r1, r7
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	47c0      	blx	r8
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	d0aa      	beq.n	800a250 <_printf_i+0x12c>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	079b      	lsls	r3, r3, #30
 800a2fe:	d413      	bmi.n	800a328 <_printf_i+0x204>
 800a300:	68e0      	ldr	r0, [r4, #12]
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	4298      	cmp	r0, r3
 800a306:	bfb8      	it	lt
 800a308:	4618      	movlt	r0, r3
 800a30a:	e7a3      	b.n	800a254 <_printf_i+0x130>
 800a30c:	2301      	movs	r3, #1
 800a30e:	464a      	mov	r2, r9
 800a310:	4639      	mov	r1, r7
 800a312:	4630      	mov	r0, r6
 800a314:	47c0      	blx	r8
 800a316:	3001      	adds	r0, #1
 800a318:	d09a      	beq.n	800a250 <_printf_i+0x12c>
 800a31a:	3501      	adds	r5, #1
 800a31c:	68e3      	ldr	r3, [r4, #12]
 800a31e:	9a03      	ldr	r2, [sp, #12]
 800a320:	1a9b      	subs	r3, r3, r2
 800a322:	42ab      	cmp	r3, r5
 800a324:	dcf2      	bgt.n	800a30c <_printf_i+0x1e8>
 800a326:	e7eb      	b.n	800a300 <_printf_i+0x1dc>
 800a328:	2500      	movs	r5, #0
 800a32a:	f104 0919 	add.w	r9, r4, #25
 800a32e:	e7f5      	b.n	800a31c <_printf_i+0x1f8>
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1ac      	bne.n	800a28e <_printf_i+0x16a>
 800a334:	7803      	ldrb	r3, [r0, #0]
 800a336:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a33a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a33e:	e76c      	b.n	800a21a <_printf_i+0xf6>
 800a340:	0800dd1e 	.word	0x0800dd1e
 800a344:	0800dd2f 	.word	0x0800dd2f

0800a348 <_scanf_float>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	469a      	mov	sl, r3
 800a34e:	688b      	ldr	r3, [r1, #8]
 800a350:	4616      	mov	r6, r2
 800a352:	1e5a      	subs	r2, r3, #1
 800a354:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a358:	b087      	sub	sp, #28
 800a35a:	bf83      	ittte	hi
 800a35c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800a360:	189b      	addhi	r3, r3, r2
 800a362:	9301      	strhi	r3, [sp, #4]
 800a364:	2300      	movls	r3, #0
 800a366:	bf86      	itte	hi
 800a368:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a36c:	608b      	strhi	r3, [r1, #8]
 800a36e:	9301      	strls	r3, [sp, #4]
 800a370:	680b      	ldr	r3, [r1, #0]
 800a372:	4688      	mov	r8, r1
 800a374:	f04f 0b00 	mov.w	fp, #0
 800a378:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a37c:	f848 3b1c 	str.w	r3, [r8], #28
 800a380:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800a384:	4607      	mov	r7, r0
 800a386:	460c      	mov	r4, r1
 800a388:	4645      	mov	r5, r8
 800a38a:	465a      	mov	r2, fp
 800a38c:	46d9      	mov	r9, fp
 800a38e:	f8cd b008 	str.w	fp, [sp, #8]
 800a392:	68a1      	ldr	r1, [r4, #8]
 800a394:	b181      	cbz	r1, 800a3b8 <_scanf_float+0x70>
 800a396:	6833      	ldr	r3, [r6, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b49      	cmp	r3, #73	; 0x49
 800a39c:	d071      	beq.n	800a482 <_scanf_float+0x13a>
 800a39e:	d84d      	bhi.n	800a43c <_scanf_float+0xf4>
 800a3a0:	2b39      	cmp	r3, #57	; 0x39
 800a3a2:	d840      	bhi.n	800a426 <_scanf_float+0xde>
 800a3a4:	2b31      	cmp	r3, #49	; 0x31
 800a3a6:	f080 8088 	bcs.w	800a4ba <_scanf_float+0x172>
 800a3aa:	2b2d      	cmp	r3, #45	; 0x2d
 800a3ac:	f000 8090 	beq.w	800a4d0 <_scanf_float+0x188>
 800a3b0:	d815      	bhi.n	800a3de <_scanf_float+0x96>
 800a3b2:	2b2b      	cmp	r3, #43	; 0x2b
 800a3b4:	f000 808c 	beq.w	800a4d0 <_scanf_float+0x188>
 800a3b8:	f1b9 0f00 	cmp.w	r9, #0
 800a3bc:	d003      	beq.n	800a3c6 <_scanf_float+0x7e>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	3a01      	subs	r2, #1
 800a3c8:	2a01      	cmp	r2, #1
 800a3ca:	f200 80ea 	bhi.w	800a5a2 <_scanf_float+0x25a>
 800a3ce:	4545      	cmp	r5, r8
 800a3d0:	f200 80dc 	bhi.w	800a58c <_scanf_float+0x244>
 800a3d4:	2601      	movs	r6, #1
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	b007      	add	sp, #28
 800a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3de:	2b2e      	cmp	r3, #46	; 0x2e
 800a3e0:	f000 809f 	beq.w	800a522 <_scanf_float+0x1da>
 800a3e4:	2b30      	cmp	r3, #48	; 0x30
 800a3e6:	d1e7      	bne.n	800a3b8 <_scanf_float+0x70>
 800a3e8:	6820      	ldr	r0, [r4, #0]
 800a3ea:	f410 7f80 	tst.w	r0, #256	; 0x100
 800a3ee:	d064      	beq.n	800a4ba <_scanf_float+0x172>
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800a3f6:	6020      	str	r0, [r4, #0]
 800a3f8:	f109 0901 	add.w	r9, r9, #1
 800a3fc:	b11b      	cbz	r3, 800a406 <_scanf_float+0xbe>
 800a3fe:	3b01      	subs	r3, #1
 800a400:	3101      	adds	r1, #1
 800a402:	9301      	str	r3, [sp, #4]
 800a404:	60a1      	str	r1, [r4, #8]
 800a406:	68a3      	ldr	r3, [r4, #8]
 800a408:	3b01      	subs	r3, #1
 800a40a:	60a3      	str	r3, [r4, #8]
 800a40c:	6923      	ldr	r3, [r4, #16]
 800a40e:	3301      	adds	r3, #1
 800a410:	6123      	str	r3, [r4, #16]
 800a412:	6873      	ldr	r3, [r6, #4]
 800a414:	3b01      	subs	r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	6073      	str	r3, [r6, #4]
 800a41a:	f340 80ac 	ble.w	800a576 <_scanf_float+0x22e>
 800a41e:	6833      	ldr	r3, [r6, #0]
 800a420:	3301      	adds	r3, #1
 800a422:	6033      	str	r3, [r6, #0]
 800a424:	e7b5      	b.n	800a392 <_scanf_float+0x4a>
 800a426:	2b45      	cmp	r3, #69	; 0x45
 800a428:	f000 8085 	beq.w	800a536 <_scanf_float+0x1ee>
 800a42c:	2b46      	cmp	r3, #70	; 0x46
 800a42e:	d06a      	beq.n	800a506 <_scanf_float+0x1be>
 800a430:	2b41      	cmp	r3, #65	; 0x41
 800a432:	d1c1      	bne.n	800a3b8 <_scanf_float+0x70>
 800a434:	2a01      	cmp	r2, #1
 800a436:	d1bf      	bne.n	800a3b8 <_scanf_float+0x70>
 800a438:	2202      	movs	r2, #2
 800a43a:	e046      	b.n	800a4ca <_scanf_float+0x182>
 800a43c:	2b65      	cmp	r3, #101	; 0x65
 800a43e:	d07a      	beq.n	800a536 <_scanf_float+0x1ee>
 800a440:	d818      	bhi.n	800a474 <_scanf_float+0x12c>
 800a442:	2b54      	cmp	r3, #84	; 0x54
 800a444:	d066      	beq.n	800a514 <_scanf_float+0x1cc>
 800a446:	d811      	bhi.n	800a46c <_scanf_float+0x124>
 800a448:	2b4e      	cmp	r3, #78	; 0x4e
 800a44a:	d1b5      	bne.n	800a3b8 <_scanf_float+0x70>
 800a44c:	2a00      	cmp	r2, #0
 800a44e:	d146      	bne.n	800a4de <_scanf_float+0x196>
 800a450:	f1b9 0f00 	cmp.w	r9, #0
 800a454:	d145      	bne.n	800a4e2 <_scanf_float+0x19a>
 800a456:	6821      	ldr	r1, [r4, #0]
 800a458:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a45c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a460:	d13f      	bne.n	800a4e2 <_scanf_float+0x19a>
 800a462:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a466:	6021      	str	r1, [r4, #0]
 800a468:	2201      	movs	r2, #1
 800a46a:	e02e      	b.n	800a4ca <_scanf_float+0x182>
 800a46c:	2b59      	cmp	r3, #89	; 0x59
 800a46e:	d01e      	beq.n	800a4ae <_scanf_float+0x166>
 800a470:	2b61      	cmp	r3, #97	; 0x61
 800a472:	e7de      	b.n	800a432 <_scanf_float+0xea>
 800a474:	2b6e      	cmp	r3, #110	; 0x6e
 800a476:	d0e9      	beq.n	800a44c <_scanf_float+0x104>
 800a478:	d815      	bhi.n	800a4a6 <_scanf_float+0x15e>
 800a47a:	2b66      	cmp	r3, #102	; 0x66
 800a47c:	d043      	beq.n	800a506 <_scanf_float+0x1be>
 800a47e:	2b69      	cmp	r3, #105	; 0x69
 800a480:	d19a      	bne.n	800a3b8 <_scanf_float+0x70>
 800a482:	f1bb 0f00 	cmp.w	fp, #0
 800a486:	d138      	bne.n	800a4fa <_scanf_float+0x1b2>
 800a488:	f1b9 0f00 	cmp.w	r9, #0
 800a48c:	d197      	bne.n	800a3be <_scanf_float+0x76>
 800a48e:	6821      	ldr	r1, [r4, #0]
 800a490:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a494:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a498:	d195      	bne.n	800a3c6 <_scanf_float+0x7e>
 800a49a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a49e:	6021      	str	r1, [r4, #0]
 800a4a0:	f04f 0b01 	mov.w	fp, #1
 800a4a4:	e011      	b.n	800a4ca <_scanf_float+0x182>
 800a4a6:	2b74      	cmp	r3, #116	; 0x74
 800a4a8:	d034      	beq.n	800a514 <_scanf_float+0x1cc>
 800a4aa:	2b79      	cmp	r3, #121	; 0x79
 800a4ac:	d184      	bne.n	800a3b8 <_scanf_float+0x70>
 800a4ae:	f1bb 0f07 	cmp.w	fp, #7
 800a4b2:	d181      	bne.n	800a3b8 <_scanf_float+0x70>
 800a4b4:	f04f 0b08 	mov.w	fp, #8
 800a4b8:	e007      	b.n	800a4ca <_scanf_float+0x182>
 800a4ba:	eb12 0f0b 	cmn.w	r2, fp
 800a4be:	f47f af7b 	bne.w	800a3b8 <_scanf_float+0x70>
 800a4c2:	6821      	ldr	r1, [r4, #0]
 800a4c4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a4c8:	6021      	str	r1, [r4, #0]
 800a4ca:	702b      	strb	r3, [r5, #0]
 800a4cc:	3501      	adds	r5, #1
 800a4ce:	e79a      	b.n	800a406 <_scanf_float+0xbe>
 800a4d0:	6821      	ldr	r1, [r4, #0]
 800a4d2:	0608      	lsls	r0, r1, #24
 800a4d4:	f57f af70 	bpl.w	800a3b8 <_scanf_float+0x70>
 800a4d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a4dc:	e7f4      	b.n	800a4c8 <_scanf_float+0x180>
 800a4de:	2a02      	cmp	r2, #2
 800a4e0:	d047      	beq.n	800a572 <_scanf_float+0x22a>
 800a4e2:	f1bb 0f01 	cmp.w	fp, #1
 800a4e6:	d003      	beq.n	800a4f0 <_scanf_float+0x1a8>
 800a4e8:	f1bb 0f04 	cmp.w	fp, #4
 800a4ec:	f47f af64 	bne.w	800a3b8 <_scanf_float+0x70>
 800a4f0:	f10b 0b01 	add.w	fp, fp, #1
 800a4f4:	fa5f fb8b 	uxtb.w	fp, fp
 800a4f8:	e7e7      	b.n	800a4ca <_scanf_float+0x182>
 800a4fa:	f1bb 0f03 	cmp.w	fp, #3
 800a4fe:	d0f7      	beq.n	800a4f0 <_scanf_float+0x1a8>
 800a500:	f1bb 0f05 	cmp.w	fp, #5
 800a504:	e7f2      	b.n	800a4ec <_scanf_float+0x1a4>
 800a506:	f1bb 0f02 	cmp.w	fp, #2
 800a50a:	f47f af55 	bne.w	800a3b8 <_scanf_float+0x70>
 800a50e:	f04f 0b03 	mov.w	fp, #3
 800a512:	e7da      	b.n	800a4ca <_scanf_float+0x182>
 800a514:	f1bb 0f06 	cmp.w	fp, #6
 800a518:	f47f af4e 	bne.w	800a3b8 <_scanf_float+0x70>
 800a51c:	f04f 0b07 	mov.w	fp, #7
 800a520:	e7d3      	b.n	800a4ca <_scanf_float+0x182>
 800a522:	6821      	ldr	r1, [r4, #0]
 800a524:	0588      	lsls	r0, r1, #22
 800a526:	f57f af47 	bpl.w	800a3b8 <_scanf_float+0x70>
 800a52a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a52e:	6021      	str	r1, [r4, #0]
 800a530:	f8cd 9008 	str.w	r9, [sp, #8]
 800a534:	e7c9      	b.n	800a4ca <_scanf_float+0x182>
 800a536:	6821      	ldr	r1, [r4, #0]
 800a538:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a53c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a540:	d006      	beq.n	800a550 <_scanf_float+0x208>
 800a542:	0548      	lsls	r0, r1, #21
 800a544:	f57f af38 	bpl.w	800a3b8 <_scanf_float+0x70>
 800a548:	f1b9 0f00 	cmp.w	r9, #0
 800a54c:	f43f af3b 	beq.w	800a3c6 <_scanf_float+0x7e>
 800a550:	0588      	lsls	r0, r1, #22
 800a552:	bf58      	it	pl
 800a554:	9802      	ldrpl	r0, [sp, #8]
 800a556:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a55a:	bf58      	it	pl
 800a55c:	eba9 0000 	subpl.w	r0, r9, r0
 800a560:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a564:	bf58      	it	pl
 800a566:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a56a:	6021      	str	r1, [r4, #0]
 800a56c:	f04f 0900 	mov.w	r9, #0
 800a570:	e7ab      	b.n	800a4ca <_scanf_float+0x182>
 800a572:	2203      	movs	r2, #3
 800a574:	e7a9      	b.n	800a4ca <_scanf_float+0x182>
 800a576:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a57a:	9205      	str	r2, [sp, #20]
 800a57c:	4631      	mov	r1, r6
 800a57e:	4638      	mov	r0, r7
 800a580:	4798      	blx	r3
 800a582:	9a05      	ldr	r2, [sp, #20]
 800a584:	2800      	cmp	r0, #0
 800a586:	f43f af04 	beq.w	800a392 <_scanf_float+0x4a>
 800a58a:	e715      	b.n	800a3b8 <_scanf_float+0x70>
 800a58c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a590:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a594:	4632      	mov	r2, r6
 800a596:	4638      	mov	r0, r7
 800a598:	4798      	blx	r3
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	3b01      	subs	r3, #1
 800a59e:	6123      	str	r3, [r4, #16]
 800a5a0:	e715      	b.n	800a3ce <_scanf_float+0x86>
 800a5a2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a5a6:	2b06      	cmp	r3, #6
 800a5a8:	d80a      	bhi.n	800a5c0 <_scanf_float+0x278>
 800a5aa:	f1bb 0f02 	cmp.w	fp, #2
 800a5ae:	d968      	bls.n	800a682 <_scanf_float+0x33a>
 800a5b0:	f1ab 0b03 	sub.w	fp, fp, #3
 800a5b4:	fa5f fb8b 	uxtb.w	fp, fp
 800a5b8:	eba5 0b0b 	sub.w	fp, r5, fp
 800a5bc:	455d      	cmp	r5, fp
 800a5be:	d14b      	bne.n	800a658 <_scanf_float+0x310>
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	05da      	lsls	r2, r3, #23
 800a5c4:	d51f      	bpl.n	800a606 <_scanf_float+0x2be>
 800a5c6:	055b      	lsls	r3, r3, #21
 800a5c8:	d468      	bmi.n	800a69c <_scanf_float+0x354>
 800a5ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a5ce:	6923      	ldr	r3, [r4, #16]
 800a5d0:	2965      	cmp	r1, #101	; 0x65
 800a5d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5d6:	f105 3bff 	add.w	fp, r5, #4294967295
 800a5da:	6123      	str	r3, [r4, #16]
 800a5dc:	d00d      	beq.n	800a5fa <_scanf_float+0x2b2>
 800a5de:	2945      	cmp	r1, #69	; 0x45
 800a5e0:	d00b      	beq.n	800a5fa <_scanf_float+0x2b2>
 800a5e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5e6:	4632      	mov	r2, r6
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	4798      	blx	r3
 800a5ec:	6923      	ldr	r3, [r4, #16]
 800a5ee:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	f1a5 0b02 	sub.w	fp, r5, #2
 800a5f8:	6123      	str	r3, [r4, #16]
 800a5fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5fe:	4632      	mov	r2, r6
 800a600:	4638      	mov	r0, r7
 800a602:	4798      	blx	r3
 800a604:	465d      	mov	r5, fp
 800a606:	6826      	ldr	r6, [r4, #0]
 800a608:	f016 0610 	ands.w	r6, r6, #16
 800a60c:	d17a      	bne.n	800a704 <_scanf_float+0x3bc>
 800a60e:	702e      	strb	r6, [r5, #0]
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a61a:	d142      	bne.n	800a6a2 <_scanf_float+0x35a>
 800a61c:	9b02      	ldr	r3, [sp, #8]
 800a61e:	eba9 0303 	sub.w	r3, r9, r3
 800a622:	425a      	negs	r2, r3
 800a624:	2b00      	cmp	r3, #0
 800a626:	d149      	bne.n	800a6bc <_scanf_float+0x374>
 800a628:	2200      	movs	r2, #0
 800a62a:	4641      	mov	r1, r8
 800a62c:	4638      	mov	r0, r7
 800a62e:	f000 ff5b 	bl	800b4e8 <_strtod_r>
 800a632:	6825      	ldr	r5, [r4, #0]
 800a634:	f8da 3000 	ldr.w	r3, [sl]
 800a638:	f015 0f02 	tst.w	r5, #2
 800a63c:	f103 0204 	add.w	r2, r3, #4
 800a640:	ec59 8b10 	vmov	r8, r9, d0
 800a644:	f8ca 2000 	str.w	r2, [sl]
 800a648:	d043      	beq.n	800a6d2 <_scanf_float+0x38a>
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	e9c3 8900 	strd	r8, r9, [r3]
 800a650:	68e3      	ldr	r3, [r4, #12]
 800a652:	3301      	adds	r3, #1
 800a654:	60e3      	str	r3, [r4, #12]
 800a656:	e6be      	b.n	800a3d6 <_scanf_float+0x8e>
 800a658:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a65c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a660:	4632      	mov	r2, r6
 800a662:	4638      	mov	r0, r7
 800a664:	4798      	blx	r3
 800a666:	6923      	ldr	r3, [r4, #16]
 800a668:	3b01      	subs	r3, #1
 800a66a:	6123      	str	r3, [r4, #16]
 800a66c:	e7a6      	b.n	800a5bc <_scanf_float+0x274>
 800a66e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a672:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a676:	4632      	mov	r2, r6
 800a678:	4638      	mov	r0, r7
 800a67a:	4798      	blx	r3
 800a67c:	6923      	ldr	r3, [r4, #16]
 800a67e:	3b01      	subs	r3, #1
 800a680:	6123      	str	r3, [r4, #16]
 800a682:	4545      	cmp	r5, r8
 800a684:	d8f3      	bhi.n	800a66e <_scanf_float+0x326>
 800a686:	e6a5      	b.n	800a3d4 <_scanf_float+0x8c>
 800a688:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a68c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a690:	4632      	mov	r2, r6
 800a692:	4638      	mov	r0, r7
 800a694:	4798      	blx	r3
 800a696:	6923      	ldr	r3, [r4, #16]
 800a698:	3b01      	subs	r3, #1
 800a69a:	6123      	str	r3, [r4, #16]
 800a69c:	4545      	cmp	r5, r8
 800a69e:	d8f3      	bhi.n	800a688 <_scanf_float+0x340>
 800a6a0:	e698      	b.n	800a3d4 <_scanf_float+0x8c>
 800a6a2:	9b03      	ldr	r3, [sp, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d0bf      	beq.n	800a628 <_scanf_float+0x2e0>
 800a6a8:	9904      	ldr	r1, [sp, #16]
 800a6aa:	230a      	movs	r3, #10
 800a6ac:	4632      	mov	r2, r6
 800a6ae:	3101      	adds	r1, #1
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	f000 ffa5 	bl	800b600 <_strtol_r>
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	9d04      	ldr	r5, [sp, #16]
 800a6ba:	1ac2      	subs	r2, r0, r3
 800a6bc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a6c0:	429d      	cmp	r5, r3
 800a6c2:	bf28      	it	cs
 800a6c4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a6c8:	490f      	ldr	r1, [pc, #60]	; (800a708 <_scanf_float+0x3c0>)
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f000 f8da 	bl	800a884 <siprintf>
 800a6d0:	e7aa      	b.n	800a628 <_scanf_float+0x2e0>
 800a6d2:	f015 0504 	ands.w	r5, r5, #4
 800a6d6:	d1b8      	bne.n	800a64a <_scanf_float+0x302>
 800a6d8:	681f      	ldr	r7, [r3, #0]
 800a6da:	ee10 2a10 	vmov	r2, s0
 800a6de:	464b      	mov	r3, r9
 800a6e0:	ee10 0a10 	vmov	r0, s0
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	f7f6 fa21 	bl	8000b2c <__aeabi_dcmpun>
 800a6ea:	b128      	cbz	r0, 800a6f8 <_scanf_float+0x3b0>
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f000 f8c3 	bl	800a878 <nanf>
 800a6f2:	ed87 0a00 	vstr	s0, [r7]
 800a6f6:	e7ab      	b.n	800a650 <_scanf_float+0x308>
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	f7f6 fa74 	bl	8000be8 <__aeabi_d2f>
 800a700:	6038      	str	r0, [r7, #0]
 800a702:	e7a5      	b.n	800a650 <_scanf_float+0x308>
 800a704:	2600      	movs	r6, #0
 800a706:	e666      	b.n	800a3d6 <_scanf_float+0x8e>
 800a708:	0800dd40 	.word	0x0800dd40

0800a70c <setbuf>:
 800a70c:	2900      	cmp	r1, #0
 800a70e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a712:	bf0c      	ite	eq
 800a714:	2202      	moveq	r2, #2
 800a716:	2200      	movne	r2, #0
 800a718:	f000 b800 	b.w	800a71c <setvbuf>

0800a71c <setvbuf>:
 800a71c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a720:	461d      	mov	r5, r3
 800a722:	4b51      	ldr	r3, [pc, #324]	; (800a868 <setvbuf+0x14c>)
 800a724:	681e      	ldr	r6, [r3, #0]
 800a726:	4604      	mov	r4, r0
 800a728:	460f      	mov	r7, r1
 800a72a:	4690      	mov	r8, r2
 800a72c:	b126      	cbz	r6, 800a738 <setvbuf+0x1c>
 800a72e:	69b3      	ldr	r3, [r6, #24]
 800a730:	b913      	cbnz	r3, 800a738 <setvbuf+0x1c>
 800a732:	4630      	mov	r0, r6
 800a734:	f001 feac 	bl	800c490 <__sinit>
 800a738:	4b4c      	ldr	r3, [pc, #304]	; (800a86c <setvbuf+0x150>)
 800a73a:	429c      	cmp	r4, r3
 800a73c:	d152      	bne.n	800a7e4 <setvbuf+0xc8>
 800a73e:	6874      	ldr	r4, [r6, #4]
 800a740:	f1b8 0f02 	cmp.w	r8, #2
 800a744:	d006      	beq.n	800a754 <setvbuf+0x38>
 800a746:	f1b8 0f01 	cmp.w	r8, #1
 800a74a:	f200 8089 	bhi.w	800a860 <setvbuf+0x144>
 800a74e:	2d00      	cmp	r5, #0
 800a750:	f2c0 8086 	blt.w	800a860 <setvbuf+0x144>
 800a754:	4621      	mov	r1, r4
 800a756:	4630      	mov	r0, r6
 800a758:	f001 fe30 	bl	800c3bc <_fflush_r>
 800a75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a75e:	b141      	cbz	r1, 800a772 <setvbuf+0x56>
 800a760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a764:	4299      	cmp	r1, r3
 800a766:	d002      	beq.n	800a76e <setvbuf+0x52>
 800a768:	4630      	mov	r0, r6
 800a76a:	f002 feab 	bl	800d4c4 <_free_r>
 800a76e:	2300      	movs	r3, #0
 800a770:	6363      	str	r3, [r4, #52]	; 0x34
 800a772:	2300      	movs	r3, #0
 800a774:	61a3      	str	r3, [r4, #24]
 800a776:	6063      	str	r3, [r4, #4]
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	061b      	lsls	r3, r3, #24
 800a77c:	d503      	bpl.n	800a786 <setvbuf+0x6a>
 800a77e:	6921      	ldr	r1, [r4, #16]
 800a780:	4630      	mov	r0, r6
 800a782:	f002 fe9f 	bl	800d4c4 <_free_r>
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a78c:	f023 0303 	bic.w	r3, r3, #3
 800a790:	f1b8 0f02 	cmp.w	r8, #2
 800a794:	81a3      	strh	r3, [r4, #12]
 800a796:	d05d      	beq.n	800a854 <setvbuf+0x138>
 800a798:	ab01      	add	r3, sp, #4
 800a79a:	466a      	mov	r2, sp
 800a79c:	4621      	mov	r1, r4
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f002 fa3a 	bl	800cc18 <__swhatbuf_r>
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	4318      	orrs	r0, r3
 800a7a8:	81a0      	strh	r0, [r4, #12]
 800a7aa:	bb2d      	cbnz	r5, 800a7f8 <setvbuf+0xdc>
 800a7ac:	9d00      	ldr	r5, [sp, #0]
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f002 fa56 	bl	800cc60 <malloc>
 800a7b4:	4607      	mov	r7, r0
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d14e      	bne.n	800a858 <setvbuf+0x13c>
 800a7ba:	f8dd 9000 	ldr.w	r9, [sp]
 800a7be:	45a9      	cmp	r9, r5
 800a7c0:	d13c      	bne.n	800a83c <setvbuf+0x120>
 800a7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	f043 0302 	orr.w	r3, r3, #2
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	60a3      	str	r3, [r4, #8]
 800a7d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7d6:	6023      	str	r3, [r4, #0]
 800a7d8:	6123      	str	r3, [r4, #16]
 800a7da:	2301      	movs	r3, #1
 800a7dc:	6163      	str	r3, [r4, #20]
 800a7de:	b003      	add	sp, #12
 800a7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7e4:	4b22      	ldr	r3, [pc, #136]	; (800a870 <setvbuf+0x154>)
 800a7e6:	429c      	cmp	r4, r3
 800a7e8:	d101      	bne.n	800a7ee <setvbuf+0xd2>
 800a7ea:	68b4      	ldr	r4, [r6, #8]
 800a7ec:	e7a8      	b.n	800a740 <setvbuf+0x24>
 800a7ee:	4b21      	ldr	r3, [pc, #132]	; (800a874 <setvbuf+0x158>)
 800a7f0:	429c      	cmp	r4, r3
 800a7f2:	bf08      	it	eq
 800a7f4:	68f4      	ldreq	r4, [r6, #12]
 800a7f6:	e7a3      	b.n	800a740 <setvbuf+0x24>
 800a7f8:	2f00      	cmp	r7, #0
 800a7fa:	d0d8      	beq.n	800a7ae <setvbuf+0x92>
 800a7fc:	69b3      	ldr	r3, [r6, #24]
 800a7fe:	b913      	cbnz	r3, 800a806 <setvbuf+0xea>
 800a800:	4630      	mov	r0, r6
 800a802:	f001 fe45 	bl	800c490 <__sinit>
 800a806:	f1b8 0f01 	cmp.w	r8, #1
 800a80a:	bf08      	it	eq
 800a80c:	89a3      	ldrheq	r3, [r4, #12]
 800a80e:	6027      	str	r7, [r4, #0]
 800a810:	bf04      	itt	eq
 800a812:	f043 0301 	orreq.w	r3, r3, #1
 800a816:	81a3      	strheq	r3, [r4, #12]
 800a818:	89a3      	ldrh	r3, [r4, #12]
 800a81a:	f013 0008 	ands.w	r0, r3, #8
 800a81e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800a822:	d01b      	beq.n	800a85c <setvbuf+0x140>
 800a824:	f013 0001 	ands.w	r0, r3, #1
 800a828:	bf18      	it	ne
 800a82a:	426d      	negne	r5, r5
 800a82c:	f04f 0300 	mov.w	r3, #0
 800a830:	bf1d      	ittte	ne
 800a832:	60a3      	strne	r3, [r4, #8]
 800a834:	61a5      	strne	r5, [r4, #24]
 800a836:	4618      	movne	r0, r3
 800a838:	60a5      	streq	r5, [r4, #8]
 800a83a:	e7d0      	b.n	800a7de <setvbuf+0xc2>
 800a83c:	4648      	mov	r0, r9
 800a83e:	f002 fa0f 	bl	800cc60 <malloc>
 800a842:	4607      	mov	r7, r0
 800a844:	2800      	cmp	r0, #0
 800a846:	d0bc      	beq.n	800a7c2 <setvbuf+0xa6>
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a84e:	81a3      	strh	r3, [r4, #12]
 800a850:	464d      	mov	r5, r9
 800a852:	e7d3      	b.n	800a7fc <setvbuf+0xe0>
 800a854:	2000      	movs	r0, #0
 800a856:	e7b6      	b.n	800a7c6 <setvbuf+0xaa>
 800a858:	46a9      	mov	r9, r5
 800a85a:	e7f5      	b.n	800a848 <setvbuf+0x12c>
 800a85c:	60a0      	str	r0, [r4, #8]
 800a85e:	e7be      	b.n	800a7de <setvbuf+0xc2>
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	e7bb      	b.n	800a7de <setvbuf+0xc2>
 800a866:	bf00      	nop
 800a868:	2000001c 	.word	0x2000001c
 800a86c:	0800ddc8 	.word	0x0800ddc8
 800a870:	0800dde8 	.word	0x0800dde8
 800a874:	0800dda8 	.word	0x0800dda8

0800a878 <nanf>:
 800a878:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a880 <nanf+0x8>
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	7fc00000 	.word	0x7fc00000

0800a884 <siprintf>:
 800a884:	b40e      	push	{r1, r2, r3}
 800a886:	b500      	push	{lr}
 800a888:	b09c      	sub	sp, #112	; 0x70
 800a88a:	ab1d      	add	r3, sp, #116	; 0x74
 800a88c:	9002      	str	r0, [sp, #8]
 800a88e:	9006      	str	r0, [sp, #24]
 800a890:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a894:	4809      	ldr	r0, [pc, #36]	; (800a8bc <siprintf+0x38>)
 800a896:	9107      	str	r1, [sp, #28]
 800a898:	9104      	str	r1, [sp, #16]
 800a89a:	4909      	ldr	r1, [pc, #36]	; (800a8c0 <siprintf+0x3c>)
 800a89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8a0:	9105      	str	r1, [sp, #20]
 800a8a2:	6800      	ldr	r0, [r0, #0]
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	a902      	add	r1, sp, #8
 800a8a8:	f002 ff0e 	bl	800d6c8 <_svfiprintf_r>
 800a8ac:	9b02      	ldr	r3, [sp, #8]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	b01c      	add	sp, #112	; 0x70
 800a8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8b8:	b003      	add	sp, #12
 800a8ba:	4770      	bx	lr
 800a8bc:	2000001c 	.word	0x2000001c
 800a8c0:	ffff0208 	.word	0xffff0208

0800a8c4 <sulp>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	460d      	mov	r5, r1
 800a8ca:	ec45 4b10 	vmov	d0, r4, r5
 800a8ce:	4616      	mov	r6, r2
 800a8d0:	f002 fcb6 	bl	800d240 <__ulp>
 800a8d4:	ec51 0b10 	vmov	r0, r1, d0
 800a8d8:	b17e      	cbz	r6, 800a8fa <sulp+0x36>
 800a8da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a8de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	dd09      	ble.n	800a8fa <sulp+0x36>
 800a8e6:	051b      	lsls	r3, r3, #20
 800a8e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a8ec:	2400      	movs	r4, #0
 800a8ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	462b      	mov	r3, r5
 800a8f6:	f7f5 fe7f 	bl	80005f8 <__aeabi_dmul>
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}
 800a8fc:	0000      	movs	r0, r0
	...

0800a900 <_strtod_l>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	461f      	mov	r7, r3
 800a906:	b0a1      	sub	sp, #132	; 0x84
 800a908:	2300      	movs	r3, #0
 800a90a:	4681      	mov	r9, r0
 800a90c:	4638      	mov	r0, r7
 800a90e:	460e      	mov	r6, r1
 800a910:	9217      	str	r2, [sp, #92]	; 0x5c
 800a912:	931c      	str	r3, [sp, #112]	; 0x70
 800a914:	f002 f96f 	bl	800cbf6 <__localeconv_l>
 800a918:	4680      	mov	r8, r0
 800a91a:	6800      	ldr	r0, [r0, #0]
 800a91c:	f7f5 fc58 	bl	80001d0 <strlen>
 800a920:	f04f 0a00 	mov.w	sl, #0
 800a924:	4604      	mov	r4, r0
 800a926:	f04f 0b00 	mov.w	fp, #0
 800a92a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a92c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a92e:	781a      	ldrb	r2, [r3, #0]
 800a930:	2a0d      	cmp	r2, #13
 800a932:	d832      	bhi.n	800a99a <_strtod_l+0x9a>
 800a934:	2a09      	cmp	r2, #9
 800a936:	d236      	bcs.n	800a9a6 <_strtod_l+0xa6>
 800a938:	2a00      	cmp	r2, #0
 800a93a:	d03e      	beq.n	800a9ba <_strtod_l+0xba>
 800a93c:	2300      	movs	r3, #0
 800a93e:	930d      	str	r3, [sp, #52]	; 0x34
 800a940:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a942:	782b      	ldrb	r3, [r5, #0]
 800a944:	2b30      	cmp	r3, #48	; 0x30
 800a946:	f040 80ac 	bne.w	800aaa2 <_strtod_l+0x1a2>
 800a94a:	786b      	ldrb	r3, [r5, #1]
 800a94c:	2b58      	cmp	r3, #88	; 0x58
 800a94e:	d001      	beq.n	800a954 <_strtod_l+0x54>
 800a950:	2b78      	cmp	r3, #120	; 0x78
 800a952:	d167      	bne.n	800aa24 <_strtod_l+0x124>
 800a954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a956:	9301      	str	r3, [sp, #4]
 800a958:	ab1c      	add	r3, sp, #112	; 0x70
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	9702      	str	r7, [sp, #8]
 800a95e:	ab1d      	add	r3, sp, #116	; 0x74
 800a960:	4a88      	ldr	r2, [pc, #544]	; (800ab84 <_strtod_l+0x284>)
 800a962:	a91b      	add	r1, sp, #108	; 0x6c
 800a964:	4648      	mov	r0, r9
 800a966:	f001 fe6c 	bl	800c642 <__gethex>
 800a96a:	f010 0407 	ands.w	r4, r0, #7
 800a96e:	4606      	mov	r6, r0
 800a970:	d005      	beq.n	800a97e <_strtod_l+0x7e>
 800a972:	2c06      	cmp	r4, #6
 800a974:	d12b      	bne.n	800a9ce <_strtod_l+0xce>
 800a976:	3501      	adds	r5, #1
 800a978:	2300      	movs	r3, #0
 800a97a:	951b      	str	r5, [sp, #108]	; 0x6c
 800a97c:	930d      	str	r3, [sp, #52]	; 0x34
 800a97e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a980:	2b00      	cmp	r3, #0
 800a982:	f040 859a 	bne.w	800b4ba <_strtod_l+0xbba>
 800a986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a988:	b1e3      	cbz	r3, 800a9c4 <_strtod_l+0xc4>
 800a98a:	4652      	mov	r2, sl
 800a98c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a990:	ec43 2b10 	vmov	d0, r2, r3
 800a994:	b021      	add	sp, #132	; 0x84
 800a996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99a:	2a2b      	cmp	r2, #43	; 0x2b
 800a99c:	d015      	beq.n	800a9ca <_strtod_l+0xca>
 800a99e:	2a2d      	cmp	r2, #45	; 0x2d
 800a9a0:	d004      	beq.n	800a9ac <_strtod_l+0xac>
 800a9a2:	2a20      	cmp	r2, #32
 800a9a4:	d1ca      	bne.n	800a93c <_strtod_l+0x3c>
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a9aa:	e7bf      	b.n	800a92c <_strtod_l+0x2c>
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	920d      	str	r2, [sp, #52]	; 0x34
 800a9b0:	1c5a      	adds	r2, r3, #1
 800a9b2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a9b4:	785b      	ldrb	r3, [r3, #1]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1c2      	bne.n	800a940 <_strtod_l+0x40>
 800a9ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9bc:	961b      	str	r6, [sp, #108]	; 0x6c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f040 8579 	bne.w	800b4b6 <_strtod_l+0xbb6>
 800a9c4:	4652      	mov	r2, sl
 800a9c6:	465b      	mov	r3, fp
 800a9c8:	e7e2      	b.n	800a990 <_strtod_l+0x90>
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	e7ef      	b.n	800a9ae <_strtod_l+0xae>
 800a9ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a9d0:	b13a      	cbz	r2, 800a9e2 <_strtod_l+0xe2>
 800a9d2:	2135      	movs	r1, #53	; 0x35
 800a9d4:	a81e      	add	r0, sp, #120	; 0x78
 800a9d6:	f002 fd2b 	bl	800d430 <__copybits>
 800a9da:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a9dc:	4648      	mov	r0, r9
 800a9de:	f002 f998 	bl	800cd12 <_Bfree>
 800a9e2:	3c01      	subs	r4, #1
 800a9e4:	2c04      	cmp	r4, #4
 800a9e6:	d806      	bhi.n	800a9f6 <_strtod_l+0xf6>
 800a9e8:	e8df f004 	tbb	[pc, r4]
 800a9ec:	1714030a 	.word	0x1714030a
 800a9f0:	0a          	.byte	0x0a
 800a9f1:	00          	.byte	0x00
 800a9f2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a9f6:	0730      	lsls	r0, r6, #28
 800a9f8:	d5c1      	bpl.n	800a97e <_strtod_l+0x7e>
 800a9fa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a9fe:	e7be      	b.n	800a97e <_strtod_l+0x7e>
 800aa00:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800aa04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aa06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aa0a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa0e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa12:	e7f0      	b.n	800a9f6 <_strtod_l+0xf6>
 800aa14:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ab88 <_strtod_l+0x288>
 800aa18:	e7ed      	b.n	800a9f6 <_strtod_l+0xf6>
 800aa1a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aa1e:	f04f 3aff 	mov.w	sl, #4294967295
 800aa22:	e7e8      	b.n	800a9f6 <_strtod_l+0xf6>
 800aa24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	2b30      	cmp	r3, #48	; 0x30
 800aa2e:	d0f9      	beq.n	800aa24 <_strtod_l+0x124>
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0a4      	beq.n	800a97e <_strtod_l+0x7e>
 800aa34:	2301      	movs	r3, #1
 800aa36:	2500      	movs	r5, #0
 800aa38:	9306      	str	r3, [sp, #24]
 800aa3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa3c:	9308      	str	r3, [sp, #32]
 800aa3e:	9507      	str	r5, [sp, #28]
 800aa40:	9505      	str	r5, [sp, #20]
 800aa42:	220a      	movs	r2, #10
 800aa44:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800aa46:	7807      	ldrb	r7, [r0, #0]
 800aa48:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800aa4c:	b2d9      	uxtb	r1, r3
 800aa4e:	2909      	cmp	r1, #9
 800aa50:	d929      	bls.n	800aaa6 <_strtod_l+0x1a6>
 800aa52:	4622      	mov	r2, r4
 800aa54:	f8d8 1000 	ldr.w	r1, [r8]
 800aa58:	f002 ff81 	bl	800d95e <strncmp>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d031      	beq.n	800aac4 <_strtod_l+0x1c4>
 800aa60:	2000      	movs	r0, #0
 800aa62:	9c05      	ldr	r4, [sp, #20]
 800aa64:	9004      	str	r0, [sp, #16]
 800aa66:	463b      	mov	r3, r7
 800aa68:	4602      	mov	r2, r0
 800aa6a:	2b65      	cmp	r3, #101	; 0x65
 800aa6c:	d001      	beq.n	800aa72 <_strtod_l+0x172>
 800aa6e:	2b45      	cmp	r3, #69	; 0x45
 800aa70:	d114      	bne.n	800aa9c <_strtod_l+0x19c>
 800aa72:	b924      	cbnz	r4, 800aa7e <_strtod_l+0x17e>
 800aa74:	b910      	cbnz	r0, 800aa7c <_strtod_l+0x17c>
 800aa76:	9b06      	ldr	r3, [sp, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d09e      	beq.n	800a9ba <_strtod_l+0xba>
 800aa7c:	2400      	movs	r4, #0
 800aa7e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800aa80:	1c73      	adds	r3, r6, #1
 800aa82:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa84:	7873      	ldrb	r3, [r6, #1]
 800aa86:	2b2b      	cmp	r3, #43	; 0x2b
 800aa88:	d078      	beq.n	800ab7c <_strtod_l+0x27c>
 800aa8a:	2b2d      	cmp	r3, #45	; 0x2d
 800aa8c:	d070      	beq.n	800ab70 <_strtod_l+0x270>
 800aa8e:	f04f 0c00 	mov.w	ip, #0
 800aa92:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800aa96:	2f09      	cmp	r7, #9
 800aa98:	d97c      	bls.n	800ab94 <_strtod_l+0x294>
 800aa9a:	961b      	str	r6, [sp, #108]	; 0x6c
 800aa9c:	f04f 0e00 	mov.w	lr, #0
 800aaa0:	e09a      	b.n	800abd8 <_strtod_l+0x2d8>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e7c7      	b.n	800aa36 <_strtod_l+0x136>
 800aaa6:	9905      	ldr	r1, [sp, #20]
 800aaa8:	2908      	cmp	r1, #8
 800aaaa:	bfdd      	ittte	le
 800aaac:	9907      	ldrle	r1, [sp, #28]
 800aaae:	fb02 3301 	mlale	r3, r2, r1, r3
 800aab2:	9307      	strle	r3, [sp, #28]
 800aab4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800aab8:	9b05      	ldr	r3, [sp, #20]
 800aaba:	3001      	adds	r0, #1
 800aabc:	3301      	adds	r3, #1
 800aabe:	9305      	str	r3, [sp, #20]
 800aac0:	901b      	str	r0, [sp, #108]	; 0x6c
 800aac2:	e7bf      	b.n	800aa44 <_strtod_l+0x144>
 800aac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aac6:	191a      	adds	r2, r3, r4
 800aac8:	921b      	str	r2, [sp, #108]	; 0x6c
 800aaca:	9a05      	ldr	r2, [sp, #20]
 800aacc:	5d1b      	ldrb	r3, [r3, r4]
 800aace:	2a00      	cmp	r2, #0
 800aad0:	d037      	beq.n	800ab42 <_strtod_l+0x242>
 800aad2:	9c05      	ldr	r4, [sp, #20]
 800aad4:	4602      	mov	r2, r0
 800aad6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aada:	2909      	cmp	r1, #9
 800aadc:	d913      	bls.n	800ab06 <_strtod_l+0x206>
 800aade:	2101      	movs	r1, #1
 800aae0:	9104      	str	r1, [sp, #16]
 800aae2:	e7c2      	b.n	800aa6a <_strtod_l+0x16a>
 800aae4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	921b      	str	r2, [sp, #108]	; 0x6c
 800aaea:	785b      	ldrb	r3, [r3, #1]
 800aaec:	3001      	adds	r0, #1
 800aaee:	2b30      	cmp	r3, #48	; 0x30
 800aaf0:	d0f8      	beq.n	800aae4 <_strtod_l+0x1e4>
 800aaf2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800aaf6:	2a08      	cmp	r2, #8
 800aaf8:	f200 84e4 	bhi.w	800b4c4 <_strtod_l+0xbc4>
 800aafc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aafe:	9208      	str	r2, [sp, #32]
 800ab00:	4602      	mov	r2, r0
 800ab02:	2000      	movs	r0, #0
 800ab04:	4604      	mov	r4, r0
 800ab06:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800ab0a:	f100 0101 	add.w	r1, r0, #1
 800ab0e:	d012      	beq.n	800ab36 <_strtod_l+0x236>
 800ab10:	440a      	add	r2, r1
 800ab12:	eb00 0c04 	add.w	ip, r0, r4
 800ab16:	4621      	mov	r1, r4
 800ab18:	270a      	movs	r7, #10
 800ab1a:	458c      	cmp	ip, r1
 800ab1c:	d113      	bne.n	800ab46 <_strtod_l+0x246>
 800ab1e:	1821      	adds	r1, r4, r0
 800ab20:	2908      	cmp	r1, #8
 800ab22:	f104 0401 	add.w	r4, r4, #1
 800ab26:	4404      	add	r4, r0
 800ab28:	dc19      	bgt.n	800ab5e <_strtod_l+0x25e>
 800ab2a:	9b07      	ldr	r3, [sp, #28]
 800ab2c:	210a      	movs	r1, #10
 800ab2e:	fb01 e303 	mla	r3, r1, r3, lr
 800ab32:	9307      	str	r3, [sp, #28]
 800ab34:	2100      	movs	r1, #0
 800ab36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab38:	1c58      	adds	r0, r3, #1
 800ab3a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ab3c:	785b      	ldrb	r3, [r3, #1]
 800ab3e:	4608      	mov	r0, r1
 800ab40:	e7c9      	b.n	800aad6 <_strtod_l+0x1d6>
 800ab42:	9805      	ldr	r0, [sp, #20]
 800ab44:	e7d3      	b.n	800aaee <_strtod_l+0x1ee>
 800ab46:	2908      	cmp	r1, #8
 800ab48:	f101 0101 	add.w	r1, r1, #1
 800ab4c:	dc03      	bgt.n	800ab56 <_strtod_l+0x256>
 800ab4e:	9b07      	ldr	r3, [sp, #28]
 800ab50:	437b      	muls	r3, r7
 800ab52:	9307      	str	r3, [sp, #28]
 800ab54:	e7e1      	b.n	800ab1a <_strtod_l+0x21a>
 800ab56:	2910      	cmp	r1, #16
 800ab58:	bfd8      	it	le
 800ab5a:	437d      	mulle	r5, r7
 800ab5c:	e7dd      	b.n	800ab1a <_strtod_l+0x21a>
 800ab5e:	2c10      	cmp	r4, #16
 800ab60:	bfdc      	itt	le
 800ab62:	210a      	movle	r1, #10
 800ab64:	fb01 e505 	mlale	r5, r1, r5, lr
 800ab68:	e7e4      	b.n	800ab34 <_strtod_l+0x234>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	9304      	str	r3, [sp, #16]
 800ab6e:	e781      	b.n	800aa74 <_strtod_l+0x174>
 800ab70:	f04f 0c01 	mov.w	ip, #1
 800ab74:	1cb3      	adds	r3, r6, #2
 800ab76:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab78:	78b3      	ldrb	r3, [r6, #2]
 800ab7a:	e78a      	b.n	800aa92 <_strtod_l+0x192>
 800ab7c:	f04f 0c00 	mov.w	ip, #0
 800ab80:	e7f8      	b.n	800ab74 <_strtod_l+0x274>
 800ab82:	bf00      	nop
 800ab84:	0800dd48 	.word	0x0800dd48
 800ab88:	7ff00000 	.word	0x7ff00000
 800ab8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab8e:	1c5f      	adds	r7, r3, #1
 800ab90:	971b      	str	r7, [sp, #108]	; 0x6c
 800ab92:	785b      	ldrb	r3, [r3, #1]
 800ab94:	2b30      	cmp	r3, #48	; 0x30
 800ab96:	d0f9      	beq.n	800ab8c <_strtod_l+0x28c>
 800ab98:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800ab9c:	2f08      	cmp	r7, #8
 800ab9e:	f63f af7d 	bhi.w	800aa9c <_strtod_l+0x19c>
 800aba2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800aba6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aba8:	930a      	str	r3, [sp, #40]	; 0x28
 800abaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abac:	1c5f      	adds	r7, r3, #1
 800abae:	971b      	str	r7, [sp, #108]	; 0x6c
 800abb0:	785b      	ldrb	r3, [r3, #1]
 800abb2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800abb6:	f1b8 0f09 	cmp.w	r8, #9
 800abba:	d937      	bls.n	800ac2c <_strtod_l+0x32c>
 800abbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800abbe:	1a7f      	subs	r7, r7, r1
 800abc0:	2f08      	cmp	r7, #8
 800abc2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800abc6:	dc37      	bgt.n	800ac38 <_strtod_l+0x338>
 800abc8:	45be      	cmp	lr, r7
 800abca:	bfa8      	it	ge
 800abcc:	46be      	movge	lr, r7
 800abce:	f1bc 0f00 	cmp.w	ip, #0
 800abd2:	d001      	beq.n	800abd8 <_strtod_l+0x2d8>
 800abd4:	f1ce 0e00 	rsb	lr, lr, #0
 800abd8:	2c00      	cmp	r4, #0
 800abda:	d151      	bne.n	800ac80 <_strtod_l+0x380>
 800abdc:	2800      	cmp	r0, #0
 800abde:	f47f aece 	bne.w	800a97e <_strtod_l+0x7e>
 800abe2:	9a06      	ldr	r2, [sp, #24]
 800abe4:	2a00      	cmp	r2, #0
 800abe6:	f47f aeca 	bne.w	800a97e <_strtod_l+0x7e>
 800abea:	9a04      	ldr	r2, [sp, #16]
 800abec:	2a00      	cmp	r2, #0
 800abee:	f47f aee4 	bne.w	800a9ba <_strtod_l+0xba>
 800abf2:	2b4e      	cmp	r3, #78	; 0x4e
 800abf4:	d027      	beq.n	800ac46 <_strtod_l+0x346>
 800abf6:	dc21      	bgt.n	800ac3c <_strtod_l+0x33c>
 800abf8:	2b49      	cmp	r3, #73	; 0x49
 800abfa:	f47f aede 	bne.w	800a9ba <_strtod_l+0xba>
 800abfe:	49a0      	ldr	r1, [pc, #640]	; (800ae80 <_strtod_l+0x580>)
 800ac00:	a81b      	add	r0, sp, #108	; 0x6c
 800ac02:	f001 ff51 	bl	800caa8 <__match>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f43f aed7 	beq.w	800a9ba <_strtod_l+0xba>
 800ac0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac0e:	499d      	ldr	r1, [pc, #628]	; (800ae84 <_strtod_l+0x584>)
 800ac10:	3b01      	subs	r3, #1
 800ac12:	a81b      	add	r0, sp, #108	; 0x6c
 800ac14:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac16:	f001 ff47 	bl	800caa8 <__match>
 800ac1a:	b910      	cbnz	r0, 800ac22 <_strtod_l+0x322>
 800ac1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac1e:	3301      	adds	r3, #1
 800ac20:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac22:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ae98 <_strtod_l+0x598>
 800ac26:	f04f 0a00 	mov.w	sl, #0
 800ac2a:	e6a8      	b.n	800a97e <_strtod_l+0x7e>
 800ac2c:	210a      	movs	r1, #10
 800ac2e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ac32:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ac36:	e7b8      	b.n	800abaa <_strtod_l+0x2aa>
 800ac38:	46be      	mov	lr, r7
 800ac3a:	e7c8      	b.n	800abce <_strtod_l+0x2ce>
 800ac3c:	2b69      	cmp	r3, #105	; 0x69
 800ac3e:	d0de      	beq.n	800abfe <_strtod_l+0x2fe>
 800ac40:	2b6e      	cmp	r3, #110	; 0x6e
 800ac42:	f47f aeba 	bne.w	800a9ba <_strtod_l+0xba>
 800ac46:	4990      	ldr	r1, [pc, #576]	; (800ae88 <_strtod_l+0x588>)
 800ac48:	a81b      	add	r0, sp, #108	; 0x6c
 800ac4a:	f001 ff2d 	bl	800caa8 <__match>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	f43f aeb3 	beq.w	800a9ba <_strtod_l+0xba>
 800ac54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	2b28      	cmp	r3, #40	; 0x28
 800ac5a:	d10e      	bne.n	800ac7a <_strtod_l+0x37a>
 800ac5c:	aa1e      	add	r2, sp, #120	; 0x78
 800ac5e:	498b      	ldr	r1, [pc, #556]	; (800ae8c <_strtod_l+0x58c>)
 800ac60:	a81b      	add	r0, sp, #108	; 0x6c
 800ac62:	f001 ff35 	bl	800cad0 <__hexnan>
 800ac66:	2805      	cmp	r0, #5
 800ac68:	d107      	bne.n	800ac7a <_strtod_l+0x37a>
 800ac6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac6c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800ac70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ac74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ac78:	e681      	b.n	800a97e <_strtod_l+0x7e>
 800ac7a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800aea0 <_strtod_l+0x5a0>
 800ac7e:	e7d2      	b.n	800ac26 <_strtod_l+0x326>
 800ac80:	ebae 0302 	sub.w	r3, lr, r2
 800ac84:	9306      	str	r3, [sp, #24]
 800ac86:	9b05      	ldr	r3, [sp, #20]
 800ac88:	9807      	ldr	r0, [sp, #28]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	bf08      	it	eq
 800ac8e:	4623      	moveq	r3, r4
 800ac90:	2c10      	cmp	r4, #16
 800ac92:	9305      	str	r3, [sp, #20]
 800ac94:	46a0      	mov	r8, r4
 800ac96:	bfa8      	it	ge
 800ac98:	f04f 0810 	movge.w	r8, #16
 800ac9c:	f7f5 fc32 	bl	8000504 <__aeabi_ui2d>
 800aca0:	2c09      	cmp	r4, #9
 800aca2:	4682      	mov	sl, r0
 800aca4:	468b      	mov	fp, r1
 800aca6:	dc13      	bgt.n	800acd0 <_strtod_l+0x3d0>
 800aca8:	9b06      	ldr	r3, [sp, #24]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f43f ae67 	beq.w	800a97e <_strtod_l+0x7e>
 800acb0:	9b06      	ldr	r3, [sp, #24]
 800acb2:	dd7a      	ble.n	800adaa <_strtod_l+0x4aa>
 800acb4:	2b16      	cmp	r3, #22
 800acb6:	dc61      	bgt.n	800ad7c <_strtod_l+0x47c>
 800acb8:	4a75      	ldr	r2, [pc, #468]	; (800ae90 <_strtod_l+0x590>)
 800acba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800acbe:	e9de 0100 	ldrd	r0, r1, [lr]
 800acc2:	4652      	mov	r2, sl
 800acc4:	465b      	mov	r3, fp
 800acc6:	f7f5 fc97 	bl	80005f8 <__aeabi_dmul>
 800acca:	4682      	mov	sl, r0
 800accc:	468b      	mov	fp, r1
 800acce:	e656      	b.n	800a97e <_strtod_l+0x7e>
 800acd0:	4b6f      	ldr	r3, [pc, #444]	; (800ae90 <_strtod_l+0x590>)
 800acd2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800acd6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800acda:	f7f5 fc8d 	bl	80005f8 <__aeabi_dmul>
 800acde:	4606      	mov	r6, r0
 800ace0:	4628      	mov	r0, r5
 800ace2:	460f      	mov	r7, r1
 800ace4:	f7f5 fc0e 	bl	8000504 <__aeabi_ui2d>
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	4630      	mov	r0, r6
 800acee:	4639      	mov	r1, r7
 800acf0:	f7f5 facc 	bl	800028c <__adddf3>
 800acf4:	2c0f      	cmp	r4, #15
 800acf6:	4682      	mov	sl, r0
 800acf8:	468b      	mov	fp, r1
 800acfa:	ddd5      	ble.n	800aca8 <_strtod_l+0x3a8>
 800acfc:	9b06      	ldr	r3, [sp, #24]
 800acfe:	eba4 0808 	sub.w	r8, r4, r8
 800ad02:	4498      	add	r8, r3
 800ad04:	f1b8 0f00 	cmp.w	r8, #0
 800ad08:	f340 8096 	ble.w	800ae38 <_strtod_l+0x538>
 800ad0c:	f018 030f 	ands.w	r3, r8, #15
 800ad10:	d00a      	beq.n	800ad28 <_strtod_l+0x428>
 800ad12:	495f      	ldr	r1, [pc, #380]	; (800ae90 <_strtod_l+0x590>)
 800ad14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad18:	4652      	mov	r2, sl
 800ad1a:	465b      	mov	r3, fp
 800ad1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad20:	f7f5 fc6a 	bl	80005f8 <__aeabi_dmul>
 800ad24:	4682      	mov	sl, r0
 800ad26:	468b      	mov	fp, r1
 800ad28:	f038 080f 	bics.w	r8, r8, #15
 800ad2c:	d073      	beq.n	800ae16 <_strtod_l+0x516>
 800ad2e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ad32:	dd47      	ble.n	800adc4 <_strtod_l+0x4c4>
 800ad34:	2400      	movs	r4, #0
 800ad36:	46a0      	mov	r8, r4
 800ad38:	9407      	str	r4, [sp, #28]
 800ad3a:	9405      	str	r4, [sp, #20]
 800ad3c:	2322      	movs	r3, #34	; 0x22
 800ad3e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ae98 <_strtod_l+0x598>
 800ad42:	f8c9 3000 	str.w	r3, [r9]
 800ad46:	f04f 0a00 	mov.w	sl, #0
 800ad4a:	9b07      	ldr	r3, [sp, #28]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f43f ae16 	beq.w	800a97e <_strtod_l+0x7e>
 800ad52:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad54:	4648      	mov	r0, r9
 800ad56:	f001 ffdc 	bl	800cd12 <_Bfree>
 800ad5a:	9905      	ldr	r1, [sp, #20]
 800ad5c:	4648      	mov	r0, r9
 800ad5e:	f001 ffd8 	bl	800cd12 <_Bfree>
 800ad62:	4641      	mov	r1, r8
 800ad64:	4648      	mov	r0, r9
 800ad66:	f001 ffd4 	bl	800cd12 <_Bfree>
 800ad6a:	9907      	ldr	r1, [sp, #28]
 800ad6c:	4648      	mov	r0, r9
 800ad6e:	f001 ffd0 	bl	800cd12 <_Bfree>
 800ad72:	4621      	mov	r1, r4
 800ad74:	4648      	mov	r0, r9
 800ad76:	f001 ffcc 	bl	800cd12 <_Bfree>
 800ad7a:	e600      	b.n	800a97e <_strtod_l+0x7e>
 800ad7c:	9a06      	ldr	r2, [sp, #24]
 800ad7e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ad82:	4293      	cmp	r3, r2
 800ad84:	dbba      	blt.n	800acfc <_strtod_l+0x3fc>
 800ad86:	4d42      	ldr	r5, [pc, #264]	; (800ae90 <_strtod_l+0x590>)
 800ad88:	f1c4 040f 	rsb	r4, r4, #15
 800ad8c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ad90:	4652      	mov	r2, sl
 800ad92:	465b      	mov	r3, fp
 800ad94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad98:	f7f5 fc2e 	bl	80005f8 <__aeabi_dmul>
 800ad9c:	9b06      	ldr	r3, [sp, #24]
 800ad9e:	1b1c      	subs	r4, r3, r4
 800ada0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ada4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ada8:	e78d      	b.n	800acc6 <_strtod_l+0x3c6>
 800adaa:	f113 0f16 	cmn.w	r3, #22
 800adae:	dba5      	blt.n	800acfc <_strtod_l+0x3fc>
 800adb0:	4a37      	ldr	r2, [pc, #220]	; (800ae90 <_strtod_l+0x590>)
 800adb2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800adb6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800adba:	4650      	mov	r0, sl
 800adbc:	4659      	mov	r1, fp
 800adbe:	f7f5 fd45 	bl	800084c <__aeabi_ddiv>
 800adc2:	e782      	b.n	800acca <_strtod_l+0x3ca>
 800adc4:	2300      	movs	r3, #0
 800adc6:	4e33      	ldr	r6, [pc, #204]	; (800ae94 <_strtod_l+0x594>)
 800adc8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800adcc:	4650      	mov	r0, sl
 800adce:	4659      	mov	r1, fp
 800add0:	461d      	mov	r5, r3
 800add2:	f1b8 0f01 	cmp.w	r8, #1
 800add6:	dc21      	bgt.n	800ae1c <_strtod_l+0x51c>
 800add8:	b10b      	cbz	r3, 800adde <_strtod_l+0x4de>
 800adda:	4682      	mov	sl, r0
 800addc:	468b      	mov	fp, r1
 800adde:	4b2d      	ldr	r3, [pc, #180]	; (800ae94 <_strtod_l+0x594>)
 800ade0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ade4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ade8:	4652      	mov	r2, sl
 800adea:	465b      	mov	r3, fp
 800adec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800adf0:	f7f5 fc02 	bl	80005f8 <__aeabi_dmul>
 800adf4:	4b28      	ldr	r3, [pc, #160]	; (800ae98 <_strtod_l+0x598>)
 800adf6:	460a      	mov	r2, r1
 800adf8:	400b      	ands	r3, r1
 800adfa:	4928      	ldr	r1, [pc, #160]	; (800ae9c <_strtod_l+0x59c>)
 800adfc:	428b      	cmp	r3, r1
 800adfe:	4682      	mov	sl, r0
 800ae00:	d898      	bhi.n	800ad34 <_strtod_l+0x434>
 800ae02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ae06:	428b      	cmp	r3, r1
 800ae08:	bf86      	itte	hi
 800ae0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800aea4 <_strtod_l+0x5a4>
 800ae0e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ae16:	2300      	movs	r3, #0
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	e077      	b.n	800af0c <_strtod_l+0x60c>
 800ae1c:	f018 0f01 	tst.w	r8, #1
 800ae20:	d006      	beq.n	800ae30 <_strtod_l+0x530>
 800ae22:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	f7f5 fbe5 	bl	80005f8 <__aeabi_dmul>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	3501      	adds	r5, #1
 800ae32:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae36:	e7cc      	b.n	800add2 <_strtod_l+0x4d2>
 800ae38:	d0ed      	beq.n	800ae16 <_strtod_l+0x516>
 800ae3a:	f1c8 0800 	rsb	r8, r8, #0
 800ae3e:	f018 020f 	ands.w	r2, r8, #15
 800ae42:	d00a      	beq.n	800ae5a <_strtod_l+0x55a>
 800ae44:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <_strtod_l+0x590>)
 800ae46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae4a:	4650      	mov	r0, sl
 800ae4c:	4659      	mov	r1, fp
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	f7f5 fcfb 	bl	800084c <__aeabi_ddiv>
 800ae56:	4682      	mov	sl, r0
 800ae58:	468b      	mov	fp, r1
 800ae5a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ae5e:	d0da      	beq.n	800ae16 <_strtod_l+0x516>
 800ae60:	f1b8 0f1f 	cmp.w	r8, #31
 800ae64:	dd20      	ble.n	800aea8 <_strtod_l+0x5a8>
 800ae66:	2400      	movs	r4, #0
 800ae68:	46a0      	mov	r8, r4
 800ae6a:	9407      	str	r4, [sp, #28]
 800ae6c:	9405      	str	r4, [sp, #20]
 800ae6e:	2322      	movs	r3, #34	; 0x22
 800ae70:	f04f 0a00 	mov.w	sl, #0
 800ae74:	f04f 0b00 	mov.w	fp, #0
 800ae78:	f8c9 3000 	str.w	r3, [r9]
 800ae7c:	e765      	b.n	800ad4a <_strtod_l+0x44a>
 800ae7e:	bf00      	nop
 800ae80:	0800dd11 	.word	0x0800dd11
 800ae84:	0800dd9b 	.word	0x0800dd9b
 800ae88:	0800dd19 	.word	0x0800dd19
 800ae8c:	0800dd5c 	.word	0x0800dd5c
 800ae90:	0800de40 	.word	0x0800de40
 800ae94:	0800de18 	.word	0x0800de18
 800ae98:	7ff00000 	.word	0x7ff00000
 800ae9c:	7ca00000 	.word	0x7ca00000
 800aea0:	fff80000 	.word	0xfff80000
 800aea4:	7fefffff 	.word	0x7fefffff
 800aea8:	f018 0310 	ands.w	r3, r8, #16
 800aeac:	bf18      	it	ne
 800aeae:	236a      	movne	r3, #106	; 0x6a
 800aeb0:	4da0      	ldr	r5, [pc, #640]	; (800b134 <_strtod_l+0x834>)
 800aeb2:	9304      	str	r3, [sp, #16]
 800aeb4:	4650      	mov	r0, sl
 800aeb6:	4659      	mov	r1, fp
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f1b8 0f00 	cmp.w	r8, #0
 800aebe:	f300 810a 	bgt.w	800b0d6 <_strtod_l+0x7d6>
 800aec2:	b10b      	cbz	r3, 800aec8 <_strtod_l+0x5c8>
 800aec4:	4682      	mov	sl, r0
 800aec6:	468b      	mov	fp, r1
 800aec8:	9b04      	ldr	r3, [sp, #16]
 800aeca:	b1bb      	cbz	r3, 800aefc <_strtod_l+0x5fc>
 800aecc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800aed0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	4659      	mov	r1, fp
 800aed8:	dd10      	ble.n	800aefc <_strtod_l+0x5fc>
 800aeda:	2b1f      	cmp	r3, #31
 800aedc:	f340 8107 	ble.w	800b0ee <_strtod_l+0x7ee>
 800aee0:	2b34      	cmp	r3, #52	; 0x34
 800aee2:	bfde      	ittt	le
 800aee4:	3b20      	suble	r3, #32
 800aee6:	f04f 32ff 	movle.w	r2, #4294967295
 800aeea:	fa02 f303 	lslle.w	r3, r2, r3
 800aeee:	f04f 0a00 	mov.w	sl, #0
 800aef2:	bfcc      	ite	gt
 800aef4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aef8:	ea03 0b01 	andle.w	fp, r3, r1
 800aefc:	2200      	movs	r2, #0
 800aefe:	2300      	movs	r3, #0
 800af00:	4650      	mov	r0, sl
 800af02:	4659      	mov	r1, fp
 800af04:	f7f5 fde0 	bl	8000ac8 <__aeabi_dcmpeq>
 800af08:	2800      	cmp	r0, #0
 800af0a:	d1ac      	bne.n	800ae66 <_strtod_l+0x566>
 800af0c:	9b07      	ldr	r3, [sp, #28]
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	9a05      	ldr	r2, [sp, #20]
 800af12:	9908      	ldr	r1, [sp, #32]
 800af14:	4623      	mov	r3, r4
 800af16:	4648      	mov	r0, r9
 800af18:	f001 ff4d 	bl	800cdb6 <__s2b>
 800af1c:	9007      	str	r0, [sp, #28]
 800af1e:	2800      	cmp	r0, #0
 800af20:	f43f af08 	beq.w	800ad34 <_strtod_l+0x434>
 800af24:	9a06      	ldr	r2, [sp, #24]
 800af26:	9b06      	ldr	r3, [sp, #24]
 800af28:	2a00      	cmp	r2, #0
 800af2a:	f1c3 0300 	rsb	r3, r3, #0
 800af2e:	bfa8      	it	ge
 800af30:	2300      	movge	r3, #0
 800af32:	930e      	str	r3, [sp, #56]	; 0x38
 800af34:	2400      	movs	r4, #0
 800af36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af3a:	9316      	str	r3, [sp, #88]	; 0x58
 800af3c:	46a0      	mov	r8, r4
 800af3e:	9b07      	ldr	r3, [sp, #28]
 800af40:	4648      	mov	r0, r9
 800af42:	6859      	ldr	r1, [r3, #4]
 800af44:	f001 feb1 	bl	800ccaa <_Balloc>
 800af48:	9005      	str	r0, [sp, #20]
 800af4a:	2800      	cmp	r0, #0
 800af4c:	f43f aef6 	beq.w	800ad3c <_strtod_l+0x43c>
 800af50:	9b07      	ldr	r3, [sp, #28]
 800af52:	691a      	ldr	r2, [r3, #16]
 800af54:	3202      	adds	r2, #2
 800af56:	f103 010c 	add.w	r1, r3, #12
 800af5a:	0092      	lsls	r2, r2, #2
 800af5c:	300c      	adds	r0, #12
 800af5e:	f001 fe99 	bl	800cc94 <memcpy>
 800af62:	aa1e      	add	r2, sp, #120	; 0x78
 800af64:	a91d      	add	r1, sp, #116	; 0x74
 800af66:	ec4b ab10 	vmov	d0, sl, fp
 800af6a:	4648      	mov	r0, r9
 800af6c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800af70:	f002 f9dc 	bl	800d32c <__d2b>
 800af74:	901c      	str	r0, [sp, #112]	; 0x70
 800af76:	2800      	cmp	r0, #0
 800af78:	f43f aee0 	beq.w	800ad3c <_strtod_l+0x43c>
 800af7c:	2101      	movs	r1, #1
 800af7e:	4648      	mov	r0, r9
 800af80:	f001 ffa5 	bl	800cece <__i2b>
 800af84:	4680      	mov	r8, r0
 800af86:	2800      	cmp	r0, #0
 800af88:	f43f aed8 	beq.w	800ad3c <_strtod_l+0x43c>
 800af8c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800af8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af90:	2e00      	cmp	r6, #0
 800af92:	bfab      	itete	ge
 800af94:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800af96:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800af98:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800af9a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800af9c:	bfac      	ite	ge
 800af9e:	18f7      	addge	r7, r6, r3
 800afa0:	1b9d      	sublt	r5, r3, r6
 800afa2:	9b04      	ldr	r3, [sp, #16]
 800afa4:	1af6      	subs	r6, r6, r3
 800afa6:	4416      	add	r6, r2
 800afa8:	4b63      	ldr	r3, [pc, #396]	; (800b138 <_strtod_l+0x838>)
 800afaa:	3e01      	subs	r6, #1
 800afac:	429e      	cmp	r6, r3
 800afae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800afb2:	f280 80af 	bge.w	800b114 <_strtod_l+0x814>
 800afb6:	1b9b      	subs	r3, r3, r6
 800afb8:	2b1f      	cmp	r3, #31
 800afba:	eba2 0203 	sub.w	r2, r2, r3
 800afbe:	f04f 0101 	mov.w	r1, #1
 800afc2:	f300 809b 	bgt.w	800b0fc <_strtod_l+0x7fc>
 800afc6:	fa01 f303 	lsl.w	r3, r1, r3
 800afca:	930f      	str	r3, [sp, #60]	; 0x3c
 800afcc:	2300      	movs	r3, #0
 800afce:	930a      	str	r3, [sp, #40]	; 0x28
 800afd0:	18be      	adds	r6, r7, r2
 800afd2:	9b04      	ldr	r3, [sp, #16]
 800afd4:	42b7      	cmp	r7, r6
 800afd6:	4415      	add	r5, r2
 800afd8:	441d      	add	r5, r3
 800afda:	463b      	mov	r3, r7
 800afdc:	bfa8      	it	ge
 800afde:	4633      	movge	r3, r6
 800afe0:	42ab      	cmp	r3, r5
 800afe2:	bfa8      	it	ge
 800afe4:	462b      	movge	r3, r5
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	bfc2      	ittt	gt
 800afea:	1af6      	subgt	r6, r6, r3
 800afec:	1aed      	subgt	r5, r5, r3
 800afee:	1aff      	subgt	r7, r7, r3
 800aff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aff2:	b1bb      	cbz	r3, 800b024 <_strtod_l+0x724>
 800aff4:	4641      	mov	r1, r8
 800aff6:	461a      	mov	r2, r3
 800aff8:	4648      	mov	r0, r9
 800affa:	f002 f807 	bl	800d00c <__pow5mult>
 800affe:	4680      	mov	r8, r0
 800b000:	2800      	cmp	r0, #0
 800b002:	f43f ae9b 	beq.w	800ad3c <_strtod_l+0x43c>
 800b006:	4601      	mov	r1, r0
 800b008:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b00a:	4648      	mov	r0, r9
 800b00c:	f001 ff68 	bl	800cee0 <__multiply>
 800b010:	900c      	str	r0, [sp, #48]	; 0x30
 800b012:	2800      	cmp	r0, #0
 800b014:	f43f ae92 	beq.w	800ad3c <_strtod_l+0x43c>
 800b018:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b01a:	4648      	mov	r0, r9
 800b01c:	f001 fe79 	bl	800cd12 <_Bfree>
 800b020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b022:	931c      	str	r3, [sp, #112]	; 0x70
 800b024:	2e00      	cmp	r6, #0
 800b026:	dc7a      	bgt.n	800b11e <_strtod_l+0x81e>
 800b028:	9b06      	ldr	r3, [sp, #24]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	dd08      	ble.n	800b040 <_strtod_l+0x740>
 800b02e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b030:	9905      	ldr	r1, [sp, #20]
 800b032:	4648      	mov	r0, r9
 800b034:	f001 ffea 	bl	800d00c <__pow5mult>
 800b038:	9005      	str	r0, [sp, #20]
 800b03a:	2800      	cmp	r0, #0
 800b03c:	f43f ae7e 	beq.w	800ad3c <_strtod_l+0x43c>
 800b040:	2d00      	cmp	r5, #0
 800b042:	dd08      	ble.n	800b056 <_strtod_l+0x756>
 800b044:	462a      	mov	r2, r5
 800b046:	9905      	ldr	r1, [sp, #20]
 800b048:	4648      	mov	r0, r9
 800b04a:	f002 f82d 	bl	800d0a8 <__lshift>
 800b04e:	9005      	str	r0, [sp, #20]
 800b050:	2800      	cmp	r0, #0
 800b052:	f43f ae73 	beq.w	800ad3c <_strtod_l+0x43c>
 800b056:	2f00      	cmp	r7, #0
 800b058:	dd08      	ble.n	800b06c <_strtod_l+0x76c>
 800b05a:	4641      	mov	r1, r8
 800b05c:	463a      	mov	r2, r7
 800b05e:	4648      	mov	r0, r9
 800b060:	f002 f822 	bl	800d0a8 <__lshift>
 800b064:	4680      	mov	r8, r0
 800b066:	2800      	cmp	r0, #0
 800b068:	f43f ae68 	beq.w	800ad3c <_strtod_l+0x43c>
 800b06c:	9a05      	ldr	r2, [sp, #20]
 800b06e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b070:	4648      	mov	r0, r9
 800b072:	f002 f887 	bl	800d184 <__mdiff>
 800b076:	4604      	mov	r4, r0
 800b078:	2800      	cmp	r0, #0
 800b07a:	f43f ae5f 	beq.w	800ad3c <_strtod_l+0x43c>
 800b07e:	68c3      	ldr	r3, [r0, #12]
 800b080:	930c      	str	r3, [sp, #48]	; 0x30
 800b082:	2300      	movs	r3, #0
 800b084:	60c3      	str	r3, [r0, #12]
 800b086:	4641      	mov	r1, r8
 800b088:	f002 f862 	bl	800d150 <__mcmp>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	da55      	bge.n	800b13c <_strtod_l+0x83c>
 800b090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b092:	b9e3      	cbnz	r3, 800b0ce <_strtod_l+0x7ce>
 800b094:	f1ba 0f00 	cmp.w	sl, #0
 800b098:	d119      	bne.n	800b0ce <_strtod_l+0x7ce>
 800b09a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b09e:	b9b3      	cbnz	r3, 800b0ce <_strtod_l+0x7ce>
 800b0a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0a4:	0d1b      	lsrs	r3, r3, #20
 800b0a6:	051b      	lsls	r3, r3, #20
 800b0a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b0ac:	d90f      	bls.n	800b0ce <_strtod_l+0x7ce>
 800b0ae:	6963      	ldr	r3, [r4, #20]
 800b0b0:	b913      	cbnz	r3, 800b0b8 <_strtod_l+0x7b8>
 800b0b2:	6923      	ldr	r3, [r4, #16]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	dd0a      	ble.n	800b0ce <_strtod_l+0x7ce>
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	4648      	mov	r0, r9
 800b0be:	f001 fff3 	bl	800d0a8 <__lshift>
 800b0c2:	4641      	mov	r1, r8
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	f002 f843 	bl	800d150 <__mcmp>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	dc67      	bgt.n	800b19e <_strtod_l+0x89e>
 800b0ce:	9b04      	ldr	r3, [sp, #16]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d171      	bne.n	800b1b8 <_strtod_l+0x8b8>
 800b0d4:	e63d      	b.n	800ad52 <_strtod_l+0x452>
 800b0d6:	f018 0f01 	tst.w	r8, #1
 800b0da:	d004      	beq.n	800b0e6 <_strtod_l+0x7e6>
 800b0dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0e0:	f7f5 fa8a 	bl	80005f8 <__aeabi_dmul>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b0ea:	3508      	adds	r5, #8
 800b0ec:	e6e5      	b.n	800aeba <_strtod_l+0x5ba>
 800b0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f6:	ea03 0a0a 	and.w	sl, r3, sl
 800b0fa:	e6ff      	b.n	800aefc <_strtod_l+0x5fc>
 800b0fc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b100:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b104:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b108:	36e2      	adds	r6, #226	; 0xe2
 800b10a:	fa01 f306 	lsl.w	r3, r1, r6
 800b10e:	930a      	str	r3, [sp, #40]	; 0x28
 800b110:	910f      	str	r1, [sp, #60]	; 0x3c
 800b112:	e75d      	b.n	800afd0 <_strtod_l+0x6d0>
 800b114:	2300      	movs	r3, #0
 800b116:	930a      	str	r3, [sp, #40]	; 0x28
 800b118:	2301      	movs	r3, #1
 800b11a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b11c:	e758      	b.n	800afd0 <_strtod_l+0x6d0>
 800b11e:	4632      	mov	r2, r6
 800b120:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b122:	4648      	mov	r0, r9
 800b124:	f001 ffc0 	bl	800d0a8 <__lshift>
 800b128:	901c      	str	r0, [sp, #112]	; 0x70
 800b12a:	2800      	cmp	r0, #0
 800b12c:	f47f af7c 	bne.w	800b028 <_strtod_l+0x728>
 800b130:	e604      	b.n	800ad3c <_strtod_l+0x43c>
 800b132:	bf00      	nop
 800b134:	0800dd70 	.word	0x0800dd70
 800b138:	fffffc02 	.word	0xfffffc02
 800b13c:	465d      	mov	r5, fp
 800b13e:	f040 8086 	bne.w	800b24e <_strtod_l+0x94e>
 800b142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b144:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b148:	b32a      	cbz	r2, 800b196 <_strtod_l+0x896>
 800b14a:	4aaf      	ldr	r2, [pc, #700]	; (800b408 <_strtod_l+0xb08>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d153      	bne.n	800b1f8 <_strtod_l+0x8f8>
 800b150:	9b04      	ldr	r3, [sp, #16]
 800b152:	4650      	mov	r0, sl
 800b154:	b1d3      	cbz	r3, 800b18c <_strtod_l+0x88c>
 800b156:	4aad      	ldr	r2, [pc, #692]	; (800b40c <_strtod_l+0xb0c>)
 800b158:	402a      	ands	r2, r5
 800b15a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b15e:	f04f 31ff 	mov.w	r1, #4294967295
 800b162:	d816      	bhi.n	800b192 <_strtod_l+0x892>
 800b164:	0d12      	lsrs	r2, r2, #20
 800b166:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b16a:	fa01 f303 	lsl.w	r3, r1, r3
 800b16e:	4298      	cmp	r0, r3
 800b170:	d142      	bne.n	800b1f8 <_strtod_l+0x8f8>
 800b172:	4ba7      	ldr	r3, [pc, #668]	; (800b410 <_strtod_l+0xb10>)
 800b174:	429d      	cmp	r5, r3
 800b176:	d102      	bne.n	800b17e <_strtod_l+0x87e>
 800b178:	3001      	adds	r0, #1
 800b17a:	f43f addf 	beq.w	800ad3c <_strtod_l+0x43c>
 800b17e:	4ba3      	ldr	r3, [pc, #652]	; (800b40c <_strtod_l+0xb0c>)
 800b180:	402b      	ands	r3, r5
 800b182:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b186:	f04f 0a00 	mov.w	sl, #0
 800b18a:	e7a0      	b.n	800b0ce <_strtod_l+0x7ce>
 800b18c:	f04f 33ff 	mov.w	r3, #4294967295
 800b190:	e7ed      	b.n	800b16e <_strtod_l+0x86e>
 800b192:	460b      	mov	r3, r1
 800b194:	e7eb      	b.n	800b16e <_strtod_l+0x86e>
 800b196:	bb7b      	cbnz	r3, 800b1f8 <_strtod_l+0x8f8>
 800b198:	f1ba 0f00 	cmp.w	sl, #0
 800b19c:	d12c      	bne.n	800b1f8 <_strtod_l+0x8f8>
 800b19e:	9904      	ldr	r1, [sp, #16]
 800b1a0:	4a9a      	ldr	r2, [pc, #616]	; (800b40c <_strtod_l+0xb0c>)
 800b1a2:	465b      	mov	r3, fp
 800b1a4:	b1f1      	cbz	r1, 800b1e4 <_strtod_l+0x8e4>
 800b1a6:	ea02 010b 	and.w	r1, r2, fp
 800b1aa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b1ae:	dc19      	bgt.n	800b1e4 <_strtod_l+0x8e4>
 800b1b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b1b4:	f77f ae5b 	ble.w	800ae6e <_strtod_l+0x56e>
 800b1b8:	4a96      	ldr	r2, [pc, #600]	; (800b414 <_strtod_l+0xb14>)
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b1c0:	4650      	mov	r0, sl
 800b1c2:	4659      	mov	r1, fp
 800b1c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b1c8:	f7f5 fa16 	bl	80005f8 <__aeabi_dmul>
 800b1cc:	4682      	mov	sl, r0
 800b1ce:	468b      	mov	fp, r1
 800b1d0:	2900      	cmp	r1, #0
 800b1d2:	f47f adbe 	bne.w	800ad52 <_strtod_l+0x452>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f47f adbb 	bne.w	800ad52 <_strtod_l+0x452>
 800b1dc:	2322      	movs	r3, #34	; 0x22
 800b1de:	f8c9 3000 	str.w	r3, [r9]
 800b1e2:	e5b6      	b.n	800ad52 <_strtod_l+0x452>
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b1ea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b1ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b1f2:	f04f 3aff 	mov.w	sl, #4294967295
 800b1f6:	e76a      	b.n	800b0ce <_strtod_l+0x7ce>
 800b1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1fa:	b193      	cbz	r3, 800b222 <_strtod_l+0x922>
 800b1fc:	422b      	tst	r3, r5
 800b1fe:	f43f af66 	beq.w	800b0ce <_strtod_l+0x7ce>
 800b202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b204:	9a04      	ldr	r2, [sp, #16]
 800b206:	4650      	mov	r0, sl
 800b208:	4659      	mov	r1, fp
 800b20a:	b173      	cbz	r3, 800b22a <_strtod_l+0x92a>
 800b20c:	f7ff fb5a 	bl	800a8c4 <sulp>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b218:	f7f5 f838 	bl	800028c <__adddf3>
 800b21c:	4682      	mov	sl, r0
 800b21e:	468b      	mov	fp, r1
 800b220:	e755      	b.n	800b0ce <_strtod_l+0x7ce>
 800b222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b224:	ea13 0f0a 	tst.w	r3, sl
 800b228:	e7e9      	b.n	800b1fe <_strtod_l+0x8fe>
 800b22a:	f7ff fb4b 	bl	800a8c4 <sulp>
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b236:	f7f5 f827 	bl	8000288 <__aeabi_dsub>
 800b23a:	2200      	movs	r2, #0
 800b23c:	2300      	movs	r3, #0
 800b23e:	4682      	mov	sl, r0
 800b240:	468b      	mov	fp, r1
 800b242:	f7f5 fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 800b246:	2800      	cmp	r0, #0
 800b248:	f47f ae11 	bne.w	800ae6e <_strtod_l+0x56e>
 800b24c:	e73f      	b.n	800b0ce <_strtod_l+0x7ce>
 800b24e:	4641      	mov	r1, r8
 800b250:	4620      	mov	r0, r4
 800b252:	f002 f8ba 	bl	800d3ca <__ratio>
 800b256:	ec57 6b10 	vmov	r6, r7, d0
 800b25a:	2200      	movs	r2, #0
 800b25c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b260:	ee10 0a10 	vmov	r0, s0
 800b264:	4639      	mov	r1, r7
 800b266:	f7f5 fc43 	bl	8000af0 <__aeabi_dcmple>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d077      	beq.n	800b35e <_strtod_l+0xa5e>
 800b26e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b270:	2b00      	cmp	r3, #0
 800b272:	d04a      	beq.n	800b30a <_strtod_l+0xa0a>
 800b274:	4b68      	ldr	r3, [pc, #416]	; (800b418 <_strtod_l+0xb18>)
 800b276:	2200      	movs	r2, #0
 800b278:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b27c:	4f66      	ldr	r7, [pc, #408]	; (800b418 <_strtod_l+0xb18>)
 800b27e:	2600      	movs	r6, #0
 800b280:	4b62      	ldr	r3, [pc, #392]	; (800b40c <_strtod_l+0xb0c>)
 800b282:	402b      	ands	r3, r5
 800b284:	930f      	str	r3, [sp, #60]	; 0x3c
 800b286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b288:	4b64      	ldr	r3, [pc, #400]	; (800b41c <_strtod_l+0xb1c>)
 800b28a:	429a      	cmp	r2, r3
 800b28c:	f040 80ce 	bne.w	800b42c <_strtod_l+0xb2c>
 800b290:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b294:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b298:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b29c:	ec4b ab10 	vmov	d0, sl, fp
 800b2a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b2a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b2a8:	f001 ffca 	bl	800d240 <__ulp>
 800b2ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2b0:	ec53 2b10 	vmov	r2, r3, d0
 800b2b4:	f7f5 f9a0 	bl	80005f8 <__aeabi_dmul>
 800b2b8:	4652      	mov	r2, sl
 800b2ba:	465b      	mov	r3, fp
 800b2bc:	f7f4 ffe6 	bl	800028c <__adddf3>
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4952      	ldr	r1, [pc, #328]	; (800b40c <_strtod_l+0xb0c>)
 800b2c4:	4a56      	ldr	r2, [pc, #344]	; (800b420 <_strtod_l+0xb20>)
 800b2c6:	4019      	ands	r1, r3
 800b2c8:	4291      	cmp	r1, r2
 800b2ca:	4682      	mov	sl, r0
 800b2cc:	d95b      	bls.n	800b386 <_strtod_l+0xa86>
 800b2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d103      	bne.n	800b2e0 <_strtod_l+0x9e0>
 800b2d8:	9b08      	ldr	r3, [sp, #32]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	f43f ad2e 	beq.w	800ad3c <_strtod_l+0x43c>
 800b2e0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b410 <_strtod_l+0xb10>
 800b2e4:	f04f 3aff 	mov.w	sl, #4294967295
 800b2e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b2ea:	4648      	mov	r0, r9
 800b2ec:	f001 fd11 	bl	800cd12 <_Bfree>
 800b2f0:	9905      	ldr	r1, [sp, #20]
 800b2f2:	4648      	mov	r0, r9
 800b2f4:	f001 fd0d 	bl	800cd12 <_Bfree>
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	4648      	mov	r0, r9
 800b2fc:	f001 fd09 	bl	800cd12 <_Bfree>
 800b300:	4621      	mov	r1, r4
 800b302:	4648      	mov	r0, r9
 800b304:	f001 fd05 	bl	800cd12 <_Bfree>
 800b308:	e619      	b.n	800af3e <_strtod_l+0x63e>
 800b30a:	f1ba 0f00 	cmp.w	sl, #0
 800b30e:	d11a      	bne.n	800b346 <_strtod_l+0xa46>
 800b310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b314:	b9eb      	cbnz	r3, 800b352 <_strtod_l+0xa52>
 800b316:	2200      	movs	r2, #0
 800b318:	4b3f      	ldr	r3, [pc, #252]	; (800b418 <_strtod_l+0xb18>)
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f5 fbdd 	bl	8000adc <__aeabi_dcmplt>
 800b322:	b9c8      	cbnz	r0, 800b358 <_strtod_l+0xa58>
 800b324:	4630      	mov	r0, r6
 800b326:	4639      	mov	r1, r7
 800b328:	2200      	movs	r2, #0
 800b32a:	4b3e      	ldr	r3, [pc, #248]	; (800b424 <_strtod_l+0xb24>)
 800b32c:	f7f5 f964 	bl	80005f8 <__aeabi_dmul>
 800b330:	4606      	mov	r6, r0
 800b332:	460f      	mov	r7, r1
 800b334:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b338:	9618      	str	r6, [sp, #96]	; 0x60
 800b33a:	9319      	str	r3, [sp, #100]	; 0x64
 800b33c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b340:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b344:	e79c      	b.n	800b280 <_strtod_l+0x980>
 800b346:	f1ba 0f01 	cmp.w	sl, #1
 800b34a:	d102      	bne.n	800b352 <_strtod_l+0xa52>
 800b34c:	2d00      	cmp	r5, #0
 800b34e:	f43f ad8e 	beq.w	800ae6e <_strtod_l+0x56e>
 800b352:	2200      	movs	r2, #0
 800b354:	4b34      	ldr	r3, [pc, #208]	; (800b428 <_strtod_l+0xb28>)
 800b356:	e78f      	b.n	800b278 <_strtod_l+0x978>
 800b358:	2600      	movs	r6, #0
 800b35a:	4f32      	ldr	r7, [pc, #200]	; (800b424 <_strtod_l+0xb24>)
 800b35c:	e7ea      	b.n	800b334 <_strtod_l+0xa34>
 800b35e:	4b31      	ldr	r3, [pc, #196]	; (800b424 <_strtod_l+0xb24>)
 800b360:	4630      	mov	r0, r6
 800b362:	4639      	mov	r1, r7
 800b364:	2200      	movs	r2, #0
 800b366:	f7f5 f947 	bl	80005f8 <__aeabi_dmul>
 800b36a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b36c:	4606      	mov	r6, r0
 800b36e:	460f      	mov	r7, r1
 800b370:	b933      	cbnz	r3, 800b380 <_strtod_l+0xa80>
 800b372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b376:	9010      	str	r0, [sp, #64]	; 0x40
 800b378:	9311      	str	r3, [sp, #68]	; 0x44
 800b37a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b37e:	e7df      	b.n	800b340 <_strtod_l+0xa40>
 800b380:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b384:	e7f9      	b.n	800b37a <_strtod_l+0xa7a>
 800b386:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b38a:	9b04      	ldr	r3, [sp, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1ab      	bne.n	800b2e8 <_strtod_l+0x9e8>
 800b390:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b394:	0d1b      	lsrs	r3, r3, #20
 800b396:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b398:	051b      	lsls	r3, r3, #20
 800b39a:	429a      	cmp	r2, r3
 800b39c:	465d      	mov	r5, fp
 800b39e:	d1a3      	bne.n	800b2e8 <_strtod_l+0x9e8>
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f7f5 fbd8 	bl	8000b58 <__aeabi_d2iz>
 800b3a8:	f7f5 f8bc 	bl	8000524 <__aeabi_i2d>
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	4639      	mov	r1, r7
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f7f4 ff68 	bl	8000288 <__aeabi_dsub>
 800b3b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460f      	mov	r7, r1
 800b3be:	b933      	cbnz	r3, 800b3ce <_strtod_l+0xace>
 800b3c0:	f1ba 0f00 	cmp.w	sl, #0
 800b3c4:	d103      	bne.n	800b3ce <_strtod_l+0xace>
 800b3c6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b3ca:	2d00      	cmp	r5, #0
 800b3cc:	d06d      	beq.n	800b4aa <_strtod_l+0xbaa>
 800b3ce:	a30a      	add	r3, pc, #40	; (adr r3, 800b3f8 <_strtod_l+0xaf8>)
 800b3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	4639      	mov	r1, r7
 800b3d8:	f7f5 fb80 	bl	8000adc <__aeabi_dcmplt>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	f47f acb8 	bne.w	800ad52 <_strtod_l+0x452>
 800b3e2:	a307      	add	r3, pc, #28	; (adr r3, 800b400 <_strtod_l+0xb00>)
 800b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	f7f5 fb94 	bl	8000b18 <__aeabi_dcmpgt>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	f43f af79 	beq.w	800b2e8 <_strtod_l+0x9e8>
 800b3f6:	e4ac      	b.n	800ad52 <_strtod_l+0x452>
 800b3f8:	94a03595 	.word	0x94a03595
 800b3fc:	3fdfffff 	.word	0x3fdfffff
 800b400:	35afe535 	.word	0x35afe535
 800b404:	3fe00000 	.word	0x3fe00000
 800b408:	000fffff 	.word	0x000fffff
 800b40c:	7ff00000 	.word	0x7ff00000
 800b410:	7fefffff 	.word	0x7fefffff
 800b414:	39500000 	.word	0x39500000
 800b418:	3ff00000 	.word	0x3ff00000
 800b41c:	7fe00000 	.word	0x7fe00000
 800b420:	7c9fffff 	.word	0x7c9fffff
 800b424:	3fe00000 	.word	0x3fe00000
 800b428:	bff00000 	.word	0xbff00000
 800b42c:	9b04      	ldr	r3, [sp, #16]
 800b42e:	b333      	cbz	r3, 800b47e <_strtod_l+0xb7e>
 800b430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b432:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b436:	d822      	bhi.n	800b47e <_strtod_l+0xb7e>
 800b438:	a327      	add	r3, pc, #156	; (adr r3, 800b4d8 <_strtod_l+0xbd8>)
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	4630      	mov	r0, r6
 800b440:	4639      	mov	r1, r7
 800b442:	f7f5 fb55 	bl	8000af0 <__aeabi_dcmple>
 800b446:	b1a0      	cbz	r0, 800b472 <_strtod_l+0xb72>
 800b448:	4639      	mov	r1, r7
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7f5 fbac 	bl	8000ba8 <__aeabi_d2uiz>
 800b450:	2800      	cmp	r0, #0
 800b452:	bf08      	it	eq
 800b454:	2001      	moveq	r0, #1
 800b456:	f7f5 f855 	bl	8000504 <__aeabi_ui2d>
 800b45a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b45c:	4606      	mov	r6, r0
 800b45e:	460f      	mov	r7, r1
 800b460:	bb03      	cbnz	r3, 800b4a4 <_strtod_l+0xba4>
 800b462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b466:	9012      	str	r0, [sp, #72]	; 0x48
 800b468:	9313      	str	r3, [sp, #76]	; 0x4c
 800b46a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b46e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b474:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b476:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b47a:	1a9b      	subs	r3, r3, r2
 800b47c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b47e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b482:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b486:	f001 fedb 	bl	800d240 <__ulp>
 800b48a:	4650      	mov	r0, sl
 800b48c:	ec53 2b10 	vmov	r2, r3, d0
 800b490:	4659      	mov	r1, fp
 800b492:	f7f5 f8b1 	bl	80005f8 <__aeabi_dmul>
 800b496:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b49a:	f7f4 fef7 	bl	800028c <__adddf3>
 800b49e:	4682      	mov	sl, r0
 800b4a0:	468b      	mov	fp, r1
 800b4a2:	e772      	b.n	800b38a <_strtod_l+0xa8a>
 800b4a4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b4a8:	e7df      	b.n	800b46a <_strtod_l+0xb6a>
 800b4aa:	a30d      	add	r3, pc, #52	; (adr r3, 800b4e0 <_strtod_l+0xbe0>)
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f7f5 fb14 	bl	8000adc <__aeabi_dcmplt>
 800b4b4:	e79c      	b.n	800b3f0 <_strtod_l+0xaf0>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	930d      	str	r3, [sp, #52]	; 0x34
 800b4ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b4bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4be:	6013      	str	r3, [r2, #0]
 800b4c0:	f7ff ba61 	b.w	800a986 <_strtod_l+0x86>
 800b4c4:	2b65      	cmp	r3, #101	; 0x65
 800b4c6:	f04f 0200 	mov.w	r2, #0
 800b4ca:	f43f ab4e 	beq.w	800ab6a <_strtod_l+0x26a>
 800b4ce:	2101      	movs	r1, #1
 800b4d0:	4614      	mov	r4, r2
 800b4d2:	9104      	str	r1, [sp, #16]
 800b4d4:	f7ff bacb 	b.w	800aa6e <_strtod_l+0x16e>
 800b4d8:	ffc00000 	.word	0xffc00000
 800b4dc:	41dfffff 	.word	0x41dfffff
 800b4e0:	94a03595 	.word	0x94a03595
 800b4e4:	3fcfffff 	.word	0x3fcfffff

0800b4e8 <_strtod_r>:
 800b4e8:	4b05      	ldr	r3, [pc, #20]	; (800b500 <_strtod_r+0x18>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	b410      	push	{r4}
 800b4ee:	6a1b      	ldr	r3, [r3, #32]
 800b4f0:	4c04      	ldr	r4, [pc, #16]	; (800b504 <_strtod_r+0x1c>)
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	bf08      	it	eq
 800b4f6:	4623      	moveq	r3, r4
 800b4f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4fc:	f7ff ba00 	b.w	800a900 <_strtod_l>
 800b500:	2000001c 	.word	0x2000001c
 800b504:	20000080 	.word	0x20000080

0800b508 <_strtol_l.isra.0>:
 800b508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b50c:	4680      	mov	r8, r0
 800b50e:	4689      	mov	r9, r1
 800b510:	4692      	mov	sl, r2
 800b512:	461e      	mov	r6, r3
 800b514:	460f      	mov	r7, r1
 800b516:	463d      	mov	r5, r7
 800b518:	9808      	ldr	r0, [sp, #32]
 800b51a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b51e:	f001 fb67 	bl	800cbf0 <__locale_ctype_ptr_l>
 800b522:	4420      	add	r0, r4
 800b524:	7843      	ldrb	r3, [r0, #1]
 800b526:	f013 0308 	ands.w	r3, r3, #8
 800b52a:	d132      	bne.n	800b592 <_strtol_l.isra.0+0x8a>
 800b52c:	2c2d      	cmp	r4, #45	; 0x2d
 800b52e:	d132      	bne.n	800b596 <_strtol_l.isra.0+0x8e>
 800b530:	787c      	ldrb	r4, [r7, #1]
 800b532:	1cbd      	adds	r5, r7, #2
 800b534:	2201      	movs	r2, #1
 800b536:	2e00      	cmp	r6, #0
 800b538:	d05d      	beq.n	800b5f6 <_strtol_l.isra.0+0xee>
 800b53a:	2e10      	cmp	r6, #16
 800b53c:	d109      	bne.n	800b552 <_strtol_l.isra.0+0x4a>
 800b53e:	2c30      	cmp	r4, #48	; 0x30
 800b540:	d107      	bne.n	800b552 <_strtol_l.isra.0+0x4a>
 800b542:	782b      	ldrb	r3, [r5, #0]
 800b544:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b548:	2b58      	cmp	r3, #88	; 0x58
 800b54a:	d14f      	bne.n	800b5ec <_strtol_l.isra.0+0xe4>
 800b54c:	786c      	ldrb	r4, [r5, #1]
 800b54e:	2610      	movs	r6, #16
 800b550:	3502      	adds	r5, #2
 800b552:	2a00      	cmp	r2, #0
 800b554:	bf14      	ite	ne
 800b556:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b55a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b55e:	2700      	movs	r7, #0
 800b560:	fbb1 fcf6 	udiv	ip, r1, r6
 800b564:	4638      	mov	r0, r7
 800b566:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b56a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b56e:	2b09      	cmp	r3, #9
 800b570:	d817      	bhi.n	800b5a2 <_strtol_l.isra.0+0x9a>
 800b572:	461c      	mov	r4, r3
 800b574:	42a6      	cmp	r6, r4
 800b576:	dd23      	ble.n	800b5c0 <_strtol_l.isra.0+0xb8>
 800b578:	1c7b      	adds	r3, r7, #1
 800b57a:	d007      	beq.n	800b58c <_strtol_l.isra.0+0x84>
 800b57c:	4584      	cmp	ip, r0
 800b57e:	d31c      	bcc.n	800b5ba <_strtol_l.isra.0+0xb2>
 800b580:	d101      	bne.n	800b586 <_strtol_l.isra.0+0x7e>
 800b582:	45a6      	cmp	lr, r4
 800b584:	db19      	blt.n	800b5ba <_strtol_l.isra.0+0xb2>
 800b586:	fb00 4006 	mla	r0, r0, r6, r4
 800b58a:	2701      	movs	r7, #1
 800b58c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b590:	e7eb      	b.n	800b56a <_strtol_l.isra.0+0x62>
 800b592:	462f      	mov	r7, r5
 800b594:	e7bf      	b.n	800b516 <_strtol_l.isra.0+0xe>
 800b596:	2c2b      	cmp	r4, #43	; 0x2b
 800b598:	bf04      	itt	eq
 800b59a:	1cbd      	addeq	r5, r7, #2
 800b59c:	787c      	ldrbeq	r4, [r7, #1]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	e7c9      	b.n	800b536 <_strtol_l.isra.0+0x2e>
 800b5a2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b5a6:	2b19      	cmp	r3, #25
 800b5a8:	d801      	bhi.n	800b5ae <_strtol_l.isra.0+0xa6>
 800b5aa:	3c37      	subs	r4, #55	; 0x37
 800b5ac:	e7e2      	b.n	800b574 <_strtol_l.isra.0+0x6c>
 800b5ae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b5b2:	2b19      	cmp	r3, #25
 800b5b4:	d804      	bhi.n	800b5c0 <_strtol_l.isra.0+0xb8>
 800b5b6:	3c57      	subs	r4, #87	; 0x57
 800b5b8:	e7dc      	b.n	800b574 <_strtol_l.isra.0+0x6c>
 800b5ba:	f04f 37ff 	mov.w	r7, #4294967295
 800b5be:	e7e5      	b.n	800b58c <_strtol_l.isra.0+0x84>
 800b5c0:	1c7b      	adds	r3, r7, #1
 800b5c2:	d108      	bne.n	800b5d6 <_strtol_l.isra.0+0xce>
 800b5c4:	2322      	movs	r3, #34	; 0x22
 800b5c6:	f8c8 3000 	str.w	r3, [r8]
 800b5ca:	4608      	mov	r0, r1
 800b5cc:	f1ba 0f00 	cmp.w	sl, #0
 800b5d0:	d107      	bne.n	800b5e2 <_strtol_l.isra.0+0xda>
 800b5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d6:	b102      	cbz	r2, 800b5da <_strtol_l.isra.0+0xd2>
 800b5d8:	4240      	negs	r0, r0
 800b5da:	f1ba 0f00 	cmp.w	sl, #0
 800b5de:	d0f8      	beq.n	800b5d2 <_strtol_l.isra.0+0xca>
 800b5e0:	b10f      	cbz	r7, 800b5e6 <_strtol_l.isra.0+0xde>
 800b5e2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b5e6:	f8ca 9000 	str.w	r9, [sl]
 800b5ea:	e7f2      	b.n	800b5d2 <_strtol_l.isra.0+0xca>
 800b5ec:	2430      	movs	r4, #48	; 0x30
 800b5ee:	2e00      	cmp	r6, #0
 800b5f0:	d1af      	bne.n	800b552 <_strtol_l.isra.0+0x4a>
 800b5f2:	2608      	movs	r6, #8
 800b5f4:	e7ad      	b.n	800b552 <_strtol_l.isra.0+0x4a>
 800b5f6:	2c30      	cmp	r4, #48	; 0x30
 800b5f8:	d0a3      	beq.n	800b542 <_strtol_l.isra.0+0x3a>
 800b5fa:	260a      	movs	r6, #10
 800b5fc:	e7a9      	b.n	800b552 <_strtol_l.isra.0+0x4a>
	...

0800b600 <_strtol_r>:
 800b600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b602:	4c06      	ldr	r4, [pc, #24]	; (800b61c <_strtol_r+0x1c>)
 800b604:	4d06      	ldr	r5, [pc, #24]	; (800b620 <_strtol_r+0x20>)
 800b606:	6824      	ldr	r4, [r4, #0]
 800b608:	6a24      	ldr	r4, [r4, #32]
 800b60a:	2c00      	cmp	r4, #0
 800b60c:	bf08      	it	eq
 800b60e:	462c      	moveq	r4, r5
 800b610:	9400      	str	r4, [sp, #0]
 800b612:	f7ff ff79 	bl	800b508 <_strtol_l.isra.0>
 800b616:	b003      	add	sp, #12
 800b618:	bd30      	pop	{r4, r5, pc}
 800b61a:	bf00      	nop
 800b61c:	2000001c 	.word	0x2000001c
 800b620:	20000080 	.word	0x20000080

0800b624 <quorem>:
 800b624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b628:	6903      	ldr	r3, [r0, #16]
 800b62a:	690c      	ldr	r4, [r1, #16]
 800b62c:	42a3      	cmp	r3, r4
 800b62e:	4680      	mov	r8, r0
 800b630:	f2c0 8082 	blt.w	800b738 <quorem+0x114>
 800b634:	3c01      	subs	r4, #1
 800b636:	f101 0714 	add.w	r7, r1, #20
 800b63a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b63e:	f100 0614 	add.w	r6, r0, #20
 800b642:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b646:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b64a:	eb06 030c 	add.w	r3, r6, ip
 800b64e:	3501      	adds	r5, #1
 800b650:	eb07 090c 	add.w	r9, r7, ip
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	fbb0 f5f5 	udiv	r5, r0, r5
 800b65a:	b395      	cbz	r5, 800b6c2 <quorem+0x9e>
 800b65c:	f04f 0a00 	mov.w	sl, #0
 800b660:	4638      	mov	r0, r7
 800b662:	46b6      	mov	lr, r6
 800b664:	46d3      	mov	fp, sl
 800b666:	f850 2b04 	ldr.w	r2, [r0], #4
 800b66a:	b293      	uxth	r3, r2
 800b66c:	fb05 a303 	mla	r3, r5, r3, sl
 800b670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b674:	b29b      	uxth	r3, r3
 800b676:	ebab 0303 	sub.w	r3, fp, r3
 800b67a:	0c12      	lsrs	r2, r2, #16
 800b67c:	f8de b000 	ldr.w	fp, [lr]
 800b680:	fb05 a202 	mla	r2, r5, r2, sl
 800b684:	fa13 f38b 	uxtah	r3, r3, fp
 800b688:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b68c:	fa1f fb82 	uxth.w	fp, r2
 800b690:	f8de 2000 	ldr.w	r2, [lr]
 800b694:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6a2:	4581      	cmp	r9, r0
 800b6a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b6a8:	f84e 3b04 	str.w	r3, [lr], #4
 800b6ac:	d2db      	bcs.n	800b666 <quorem+0x42>
 800b6ae:	f856 300c 	ldr.w	r3, [r6, ip]
 800b6b2:	b933      	cbnz	r3, 800b6c2 <quorem+0x9e>
 800b6b4:	9b01      	ldr	r3, [sp, #4]
 800b6b6:	3b04      	subs	r3, #4
 800b6b8:	429e      	cmp	r6, r3
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	d330      	bcc.n	800b720 <quorem+0xfc>
 800b6be:	f8c8 4010 	str.w	r4, [r8, #16]
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	f001 fd44 	bl	800d150 <__mcmp>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	db25      	blt.n	800b718 <quorem+0xf4>
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f04f 0c00 	mov.w	ip, #0
 800b6d4:	f857 2b04 	ldr.w	r2, [r7], #4
 800b6d8:	f8d0 e000 	ldr.w	lr, [r0]
 800b6dc:	b293      	uxth	r3, r2
 800b6de:	ebac 0303 	sub.w	r3, ip, r3
 800b6e2:	0c12      	lsrs	r2, r2, #16
 800b6e4:	fa13 f38e 	uxtah	r3, r3, lr
 800b6e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b6ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6f6:	45b9      	cmp	r9, r7
 800b6f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b6fc:	f840 3b04 	str.w	r3, [r0], #4
 800b700:	d2e8      	bcs.n	800b6d4 <quorem+0xb0>
 800b702:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b706:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b70a:	b92a      	cbnz	r2, 800b718 <quorem+0xf4>
 800b70c:	3b04      	subs	r3, #4
 800b70e:	429e      	cmp	r6, r3
 800b710:	461a      	mov	r2, r3
 800b712:	d30b      	bcc.n	800b72c <quorem+0x108>
 800b714:	f8c8 4010 	str.w	r4, [r8, #16]
 800b718:	4628      	mov	r0, r5
 800b71a:	b003      	add	sp, #12
 800b71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b720:	6812      	ldr	r2, [r2, #0]
 800b722:	3b04      	subs	r3, #4
 800b724:	2a00      	cmp	r2, #0
 800b726:	d1ca      	bne.n	800b6be <quorem+0x9a>
 800b728:	3c01      	subs	r4, #1
 800b72a:	e7c5      	b.n	800b6b8 <quorem+0x94>
 800b72c:	6812      	ldr	r2, [r2, #0]
 800b72e:	3b04      	subs	r3, #4
 800b730:	2a00      	cmp	r2, #0
 800b732:	d1ef      	bne.n	800b714 <quorem+0xf0>
 800b734:	3c01      	subs	r4, #1
 800b736:	e7ea      	b.n	800b70e <quorem+0xea>
 800b738:	2000      	movs	r0, #0
 800b73a:	e7ee      	b.n	800b71a <quorem+0xf6>
 800b73c:	0000      	movs	r0, r0
	...

0800b740 <_dtoa_r>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	ec57 6b10 	vmov	r6, r7, d0
 800b748:	b097      	sub	sp, #92	; 0x5c
 800b74a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b74c:	9106      	str	r1, [sp, #24]
 800b74e:	4604      	mov	r4, r0
 800b750:	920b      	str	r2, [sp, #44]	; 0x2c
 800b752:	9312      	str	r3, [sp, #72]	; 0x48
 800b754:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b758:	e9cd 6700 	strd	r6, r7, [sp]
 800b75c:	b93d      	cbnz	r5, 800b76e <_dtoa_r+0x2e>
 800b75e:	2010      	movs	r0, #16
 800b760:	f001 fa7e 	bl	800cc60 <malloc>
 800b764:	6260      	str	r0, [r4, #36]	; 0x24
 800b766:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b76a:	6005      	str	r5, [r0, #0]
 800b76c:	60c5      	str	r5, [r0, #12]
 800b76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b770:	6819      	ldr	r1, [r3, #0]
 800b772:	b151      	cbz	r1, 800b78a <_dtoa_r+0x4a>
 800b774:	685a      	ldr	r2, [r3, #4]
 800b776:	604a      	str	r2, [r1, #4]
 800b778:	2301      	movs	r3, #1
 800b77a:	4093      	lsls	r3, r2
 800b77c:	608b      	str	r3, [r1, #8]
 800b77e:	4620      	mov	r0, r4
 800b780:	f001 fac7 	bl	800cd12 <_Bfree>
 800b784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b786:	2200      	movs	r2, #0
 800b788:	601a      	str	r2, [r3, #0]
 800b78a:	1e3b      	subs	r3, r7, #0
 800b78c:	bfbb      	ittet	lt
 800b78e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b792:	9301      	strlt	r3, [sp, #4]
 800b794:	2300      	movge	r3, #0
 800b796:	2201      	movlt	r2, #1
 800b798:	bfac      	ite	ge
 800b79a:	f8c8 3000 	strge.w	r3, [r8]
 800b79e:	f8c8 2000 	strlt.w	r2, [r8]
 800b7a2:	4baf      	ldr	r3, [pc, #700]	; (800ba60 <_dtoa_r+0x320>)
 800b7a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b7a8:	ea33 0308 	bics.w	r3, r3, r8
 800b7ac:	d114      	bne.n	800b7d8 <_dtoa_r+0x98>
 800b7ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7b0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7b4:	6013      	str	r3, [r2, #0]
 800b7b6:	9b00      	ldr	r3, [sp, #0]
 800b7b8:	b923      	cbnz	r3, 800b7c4 <_dtoa_r+0x84>
 800b7ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	f000 8542 	beq.w	800c248 <_dtoa_r+0xb08>
 800b7c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ba74 <_dtoa_r+0x334>
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 8544 	beq.w	800c258 <_dtoa_r+0xb18>
 800b7d0:	f10b 0303 	add.w	r3, fp, #3
 800b7d4:	f000 bd3e 	b.w	800c254 <_dtoa_r+0xb14>
 800b7d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2300      	movs	r3, #0
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	f7f5 f970 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7e8:	4681      	mov	r9, r0
 800b7ea:	b168      	cbz	r0, 800b808 <_dtoa_r+0xc8>
 800b7ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	6013      	str	r3, [r2, #0]
 800b7f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f000 8524 	beq.w	800c242 <_dtoa_r+0xb02>
 800b7fa:	4b9a      	ldr	r3, [pc, #616]	; (800ba64 <_dtoa_r+0x324>)
 800b7fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7fe:	f103 3bff 	add.w	fp, r3, #4294967295
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	f000 bd28 	b.w	800c258 <_dtoa_r+0xb18>
 800b808:	aa14      	add	r2, sp, #80	; 0x50
 800b80a:	a915      	add	r1, sp, #84	; 0x54
 800b80c:	ec47 6b10 	vmov	d0, r6, r7
 800b810:	4620      	mov	r0, r4
 800b812:	f001 fd8b 	bl	800d32c <__d2b>
 800b816:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b81a:	9004      	str	r0, [sp, #16]
 800b81c:	2d00      	cmp	r5, #0
 800b81e:	d07c      	beq.n	800b91a <_dtoa_r+0x1da>
 800b820:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b824:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b828:	46b2      	mov	sl, r6
 800b82a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b82e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b832:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b836:	2200      	movs	r2, #0
 800b838:	4b8b      	ldr	r3, [pc, #556]	; (800ba68 <_dtoa_r+0x328>)
 800b83a:	4650      	mov	r0, sl
 800b83c:	4659      	mov	r1, fp
 800b83e:	f7f4 fd23 	bl	8000288 <__aeabi_dsub>
 800b842:	a381      	add	r3, pc, #516	; (adr r3, 800ba48 <_dtoa_r+0x308>)
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	a380      	add	r3, pc, #512	; (adr r3, 800ba50 <_dtoa_r+0x310>)
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	f7f4 fd1b 	bl	800028c <__adddf3>
 800b856:	4606      	mov	r6, r0
 800b858:	4628      	mov	r0, r5
 800b85a:	460f      	mov	r7, r1
 800b85c:	f7f4 fe62 	bl	8000524 <__aeabi_i2d>
 800b860:	a37d      	add	r3, pc, #500	; (adr r3, 800ba58 <_dtoa_r+0x318>)
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	f7f4 fec7 	bl	80005f8 <__aeabi_dmul>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4630      	mov	r0, r6
 800b870:	4639      	mov	r1, r7
 800b872:	f7f4 fd0b 	bl	800028c <__adddf3>
 800b876:	4606      	mov	r6, r0
 800b878:	460f      	mov	r7, r1
 800b87a:	f7f5 f96d 	bl	8000b58 <__aeabi_d2iz>
 800b87e:	2200      	movs	r2, #0
 800b880:	4682      	mov	sl, r0
 800b882:	2300      	movs	r3, #0
 800b884:	4630      	mov	r0, r6
 800b886:	4639      	mov	r1, r7
 800b888:	f7f5 f928 	bl	8000adc <__aeabi_dcmplt>
 800b88c:	b148      	cbz	r0, 800b8a2 <_dtoa_r+0x162>
 800b88e:	4650      	mov	r0, sl
 800b890:	f7f4 fe48 	bl	8000524 <__aeabi_i2d>
 800b894:	4632      	mov	r2, r6
 800b896:	463b      	mov	r3, r7
 800b898:	f7f5 f916 	bl	8000ac8 <__aeabi_dcmpeq>
 800b89c:	b908      	cbnz	r0, 800b8a2 <_dtoa_r+0x162>
 800b89e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8a2:	f1ba 0f16 	cmp.w	sl, #22
 800b8a6:	d859      	bhi.n	800b95c <_dtoa_r+0x21c>
 800b8a8:	4970      	ldr	r1, [pc, #448]	; (800ba6c <_dtoa_r+0x32c>)
 800b8aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b8ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8b6:	f7f5 f92f 	bl	8000b18 <__aeabi_dcmpgt>
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	d050      	beq.n	800b960 <_dtoa_r+0x220>
 800b8be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8c8:	1b5d      	subs	r5, r3, r5
 800b8ca:	f1b5 0801 	subs.w	r8, r5, #1
 800b8ce:	bf49      	itett	mi
 800b8d0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b8d4:	2300      	movpl	r3, #0
 800b8d6:	9305      	strmi	r3, [sp, #20]
 800b8d8:	f04f 0800 	movmi.w	r8, #0
 800b8dc:	bf58      	it	pl
 800b8de:	9305      	strpl	r3, [sp, #20]
 800b8e0:	f1ba 0f00 	cmp.w	sl, #0
 800b8e4:	db3e      	blt.n	800b964 <_dtoa_r+0x224>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	44d0      	add	r8, sl
 800b8ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b8ee:	9307      	str	r3, [sp, #28]
 800b8f0:	9b06      	ldr	r3, [sp, #24]
 800b8f2:	2b09      	cmp	r3, #9
 800b8f4:	f200 8090 	bhi.w	800ba18 <_dtoa_r+0x2d8>
 800b8f8:	2b05      	cmp	r3, #5
 800b8fa:	bfc4      	itt	gt
 800b8fc:	3b04      	subgt	r3, #4
 800b8fe:	9306      	strgt	r3, [sp, #24]
 800b900:	9b06      	ldr	r3, [sp, #24]
 800b902:	f1a3 0302 	sub.w	r3, r3, #2
 800b906:	bfcc      	ite	gt
 800b908:	2500      	movgt	r5, #0
 800b90a:	2501      	movle	r5, #1
 800b90c:	2b03      	cmp	r3, #3
 800b90e:	f200 808f 	bhi.w	800ba30 <_dtoa_r+0x2f0>
 800b912:	e8df f003 	tbb	[pc, r3]
 800b916:	7f7d      	.short	0x7f7d
 800b918:	7131      	.short	0x7131
 800b91a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b91e:	441d      	add	r5, r3
 800b920:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b924:	2820      	cmp	r0, #32
 800b926:	dd13      	ble.n	800b950 <_dtoa_r+0x210>
 800b928:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b92c:	9b00      	ldr	r3, [sp, #0]
 800b92e:	fa08 f800 	lsl.w	r8, r8, r0
 800b932:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b936:	fa23 f000 	lsr.w	r0, r3, r0
 800b93a:	ea48 0000 	orr.w	r0, r8, r0
 800b93e:	f7f4 fde1 	bl	8000504 <__aeabi_ui2d>
 800b942:	2301      	movs	r3, #1
 800b944:	4682      	mov	sl, r0
 800b946:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b94a:	3d01      	subs	r5, #1
 800b94c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b94e:	e772      	b.n	800b836 <_dtoa_r+0xf6>
 800b950:	9b00      	ldr	r3, [sp, #0]
 800b952:	f1c0 0020 	rsb	r0, r0, #32
 800b956:	fa03 f000 	lsl.w	r0, r3, r0
 800b95a:	e7f0      	b.n	800b93e <_dtoa_r+0x1fe>
 800b95c:	2301      	movs	r3, #1
 800b95e:	e7b1      	b.n	800b8c4 <_dtoa_r+0x184>
 800b960:	900f      	str	r0, [sp, #60]	; 0x3c
 800b962:	e7b0      	b.n	800b8c6 <_dtoa_r+0x186>
 800b964:	9b05      	ldr	r3, [sp, #20]
 800b966:	eba3 030a 	sub.w	r3, r3, sl
 800b96a:	9305      	str	r3, [sp, #20]
 800b96c:	f1ca 0300 	rsb	r3, sl, #0
 800b970:	9307      	str	r3, [sp, #28]
 800b972:	2300      	movs	r3, #0
 800b974:	930e      	str	r3, [sp, #56]	; 0x38
 800b976:	e7bb      	b.n	800b8f0 <_dtoa_r+0x1b0>
 800b978:	2301      	movs	r3, #1
 800b97a:	930a      	str	r3, [sp, #40]	; 0x28
 800b97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b97e:	2b00      	cmp	r3, #0
 800b980:	dd59      	ble.n	800ba36 <_dtoa_r+0x2f6>
 800b982:	9302      	str	r3, [sp, #8]
 800b984:	4699      	mov	r9, r3
 800b986:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b988:	2200      	movs	r2, #0
 800b98a:	6072      	str	r2, [r6, #4]
 800b98c:	2204      	movs	r2, #4
 800b98e:	f102 0014 	add.w	r0, r2, #20
 800b992:	4298      	cmp	r0, r3
 800b994:	6871      	ldr	r1, [r6, #4]
 800b996:	d953      	bls.n	800ba40 <_dtoa_r+0x300>
 800b998:	4620      	mov	r0, r4
 800b99a:	f001 f986 	bl	800ccaa <_Balloc>
 800b99e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9a0:	6030      	str	r0, [r6, #0]
 800b9a2:	f1b9 0f0e 	cmp.w	r9, #14
 800b9a6:	f8d3 b000 	ldr.w	fp, [r3]
 800b9aa:	f200 80e6 	bhi.w	800bb7a <_dtoa_r+0x43a>
 800b9ae:	2d00      	cmp	r5, #0
 800b9b0:	f000 80e3 	beq.w	800bb7a <_dtoa_r+0x43a>
 800b9b4:	ed9d 7b00 	vldr	d7, [sp]
 800b9b8:	f1ba 0f00 	cmp.w	sl, #0
 800b9bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b9c0:	dd74      	ble.n	800baac <_dtoa_r+0x36c>
 800b9c2:	4a2a      	ldr	r2, [pc, #168]	; (800ba6c <_dtoa_r+0x32c>)
 800b9c4:	f00a 030f 	and.w	r3, sl, #15
 800b9c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9cc:	ed93 7b00 	vldr	d7, [r3]
 800b9d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b9d4:	06f0      	lsls	r0, r6, #27
 800b9d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b9da:	d565      	bpl.n	800baa8 <_dtoa_r+0x368>
 800b9dc:	4b24      	ldr	r3, [pc, #144]	; (800ba70 <_dtoa_r+0x330>)
 800b9de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9e6:	f7f4 ff31 	bl	800084c <__aeabi_ddiv>
 800b9ea:	e9cd 0100 	strd	r0, r1, [sp]
 800b9ee:	f006 060f 	and.w	r6, r6, #15
 800b9f2:	2503      	movs	r5, #3
 800b9f4:	4f1e      	ldr	r7, [pc, #120]	; (800ba70 <_dtoa_r+0x330>)
 800b9f6:	e04c      	b.n	800ba92 <_dtoa_r+0x352>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b9fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9fe:	4453      	add	r3, sl
 800ba00:	f103 0901 	add.w	r9, r3, #1
 800ba04:	9302      	str	r3, [sp, #8]
 800ba06:	464b      	mov	r3, r9
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	bfb8      	it	lt
 800ba0c:	2301      	movlt	r3, #1
 800ba0e:	e7ba      	b.n	800b986 <_dtoa_r+0x246>
 800ba10:	2300      	movs	r3, #0
 800ba12:	e7b2      	b.n	800b97a <_dtoa_r+0x23a>
 800ba14:	2300      	movs	r3, #0
 800ba16:	e7f0      	b.n	800b9fa <_dtoa_r+0x2ba>
 800ba18:	2501      	movs	r5, #1
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	9306      	str	r3, [sp, #24]
 800ba1e:	950a      	str	r5, [sp, #40]	; 0x28
 800ba20:	f04f 33ff 	mov.w	r3, #4294967295
 800ba24:	9302      	str	r3, [sp, #8]
 800ba26:	4699      	mov	r9, r3
 800ba28:	2200      	movs	r2, #0
 800ba2a:	2312      	movs	r3, #18
 800ba2c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba2e:	e7aa      	b.n	800b986 <_dtoa_r+0x246>
 800ba30:	2301      	movs	r3, #1
 800ba32:	930a      	str	r3, [sp, #40]	; 0x28
 800ba34:	e7f4      	b.n	800ba20 <_dtoa_r+0x2e0>
 800ba36:	2301      	movs	r3, #1
 800ba38:	9302      	str	r3, [sp, #8]
 800ba3a:	4699      	mov	r9, r3
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	e7f5      	b.n	800ba2c <_dtoa_r+0x2ec>
 800ba40:	3101      	adds	r1, #1
 800ba42:	6071      	str	r1, [r6, #4]
 800ba44:	0052      	lsls	r2, r2, #1
 800ba46:	e7a2      	b.n	800b98e <_dtoa_r+0x24e>
 800ba48:	636f4361 	.word	0x636f4361
 800ba4c:	3fd287a7 	.word	0x3fd287a7
 800ba50:	8b60c8b3 	.word	0x8b60c8b3
 800ba54:	3fc68a28 	.word	0x3fc68a28
 800ba58:	509f79fb 	.word	0x509f79fb
 800ba5c:	3fd34413 	.word	0x3fd34413
 800ba60:	7ff00000 	.word	0x7ff00000
 800ba64:	0800dd1d 	.word	0x0800dd1d
 800ba68:	3ff80000 	.word	0x3ff80000
 800ba6c:	0800de40 	.word	0x0800de40
 800ba70:	0800de18 	.word	0x0800de18
 800ba74:	0800dda1 	.word	0x0800dda1
 800ba78:	07f1      	lsls	r1, r6, #31
 800ba7a:	d508      	bpl.n	800ba8e <_dtoa_r+0x34e>
 800ba7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba84:	f7f4 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ba88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba8c:	3501      	adds	r5, #1
 800ba8e:	1076      	asrs	r6, r6, #1
 800ba90:	3708      	adds	r7, #8
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	d1f0      	bne.n	800ba78 <_dtoa_r+0x338>
 800ba96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba9e:	f7f4 fed5 	bl	800084c <__aeabi_ddiv>
 800baa2:	e9cd 0100 	strd	r0, r1, [sp]
 800baa6:	e01a      	b.n	800bade <_dtoa_r+0x39e>
 800baa8:	2502      	movs	r5, #2
 800baaa:	e7a3      	b.n	800b9f4 <_dtoa_r+0x2b4>
 800baac:	f000 80a0 	beq.w	800bbf0 <_dtoa_r+0x4b0>
 800bab0:	f1ca 0600 	rsb	r6, sl, #0
 800bab4:	4b9f      	ldr	r3, [pc, #636]	; (800bd34 <_dtoa_r+0x5f4>)
 800bab6:	4fa0      	ldr	r7, [pc, #640]	; (800bd38 <_dtoa_r+0x5f8>)
 800bab8:	f006 020f 	and.w	r2, r6, #15
 800babc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bac8:	f7f4 fd96 	bl	80005f8 <__aeabi_dmul>
 800bacc:	e9cd 0100 	strd	r0, r1, [sp]
 800bad0:	1136      	asrs	r6, r6, #4
 800bad2:	2300      	movs	r3, #0
 800bad4:	2502      	movs	r5, #2
 800bad6:	2e00      	cmp	r6, #0
 800bad8:	d17f      	bne.n	800bbda <_dtoa_r+0x49a>
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1e1      	bne.n	800baa2 <_dtoa_r+0x362>
 800bade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 8087 	beq.w	800bbf4 <_dtoa_r+0x4b4>
 800bae6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800baea:	2200      	movs	r2, #0
 800baec:	4b93      	ldr	r3, [pc, #588]	; (800bd3c <_dtoa_r+0x5fc>)
 800baee:	4630      	mov	r0, r6
 800baf0:	4639      	mov	r1, r7
 800baf2:	f7f4 fff3 	bl	8000adc <__aeabi_dcmplt>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d07c      	beq.n	800bbf4 <_dtoa_r+0x4b4>
 800bafa:	f1b9 0f00 	cmp.w	r9, #0
 800bafe:	d079      	beq.n	800bbf4 <_dtoa_r+0x4b4>
 800bb00:	9b02      	ldr	r3, [sp, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	dd35      	ble.n	800bb72 <_dtoa_r+0x432>
 800bb06:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bb0a:	9308      	str	r3, [sp, #32]
 800bb0c:	4639      	mov	r1, r7
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4b8b      	ldr	r3, [pc, #556]	; (800bd40 <_dtoa_r+0x600>)
 800bb12:	4630      	mov	r0, r6
 800bb14:	f7f4 fd70 	bl	80005f8 <__aeabi_dmul>
 800bb18:	e9cd 0100 	strd	r0, r1, [sp]
 800bb1c:	9f02      	ldr	r7, [sp, #8]
 800bb1e:	3501      	adds	r5, #1
 800bb20:	4628      	mov	r0, r5
 800bb22:	f7f4 fcff 	bl	8000524 <__aeabi_i2d>
 800bb26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb2a:	f7f4 fd65 	bl	80005f8 <__aeabi_dmul>
 800bb2e:	2200      	movs	r2, #0
 800bb30:	4b84      	ldr	r3, [pc, #528]	; (800bd44 <_dtoa_r+0x604>)
 800bb32:	f7f4 fbab 	bl	800028c <__adddf3>
 800bb36:	4605      	mov	r5, r0
 800bb38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bb3c:	2f00      	cmp	r7, #0
 800bb3e:	d15d      	bne.n	800bbfc <_dtoa_r+0x4bc>
 800bb40:	2200      	movs	r2, #0
 800bb42:	4b81      	ldr	r3, [pc, #516]	; (800bd48 <_dtoa_r+0x608>)
 800bb44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb48:	f7f4 fb9e 	bl	8000288 <__aeabi_dsub>
 800bb4c:	462a      	mov	r2, r5
 800bb4e:	4633      	mov	r3, r6
 800bb50:	e9cd 0100 	strd	r0, r1, [sp]
 800bb54:	f7f4 ffe0 	bl	8000b18 <__aeabi_dcmpgt>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	f040 8288 	bne.w	800c06e <_dtoa_r+0x92e>
 800bb5e:	462a      	mov	r2, r5
 800bb60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bb64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb68:	f7f4 ffb8 	bl	8000adc <__aeabi_dcmplt>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	f040 827c 	bne.w	800c06a <_dtoa_r+0x92a>
 800bb72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb76:	e9cd 2300 	strd	r2, r3, [sp]
 800bb7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f2c0 8150 	blt.w	800be22 <_dtoa_r+0x6e2>
 800bb82:	f1ba 0f0e 	cmp.w	sl, #14
 800bb86:	f300 814c 	bgt.w	800be22 <_dtoa_r+0x6e2>
 800bb8a:	4b6a      	ldr	r3, [pc, #424]	; (800bd34 <_dtoa_r+0x5f4>)
 800bb8c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb90:	ed93 7b00 	vldr	d7, [r3]
 800bb94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb9c:	f280 80d8 	bge.w	800bd50 <_dtoa_r+0x610>
 800bba0:	f1b9 0f00 	cmp.w	r9, #0
 800bba4:	f300 80d4 	bgt.w	800bd50 <_dtoa_r+0x610>
 800bba8:	f040 825e 	bne.w	800c068 <_dtoa_r+0x928>
 800bbac:	2200      	movs	r2, #0
 800bbae:	4b66      	ldr	r3, [pc, #408]	; (800bd48 <_dtoa_r+0x608>)
 800bbb0:	ec51 0b17 	vmov	r0, r1, d7
 800bbb4:	f7f4 fd20 	bl	80005f8 <__aeabi_dmul>
 800bbb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbbc:	f7f4 ffa2 	bl	8000b04 <__aeabi_dcmpge>
 800bbc0:	464f      	mov	r7, r9
 800bbc2:	464e      	mov	r6, r9
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	f040 8234 	bne.w	800c032 <_dtoa_r+0x8f2>
 800bbca:	2331      	movs	r3, #49	; 0x31
 800bbcc:	f10b 0501 	add.w	r5, fp, #1
 800bbd0:	f88b 3000 	strb.w	r3, [fp]
 800bbd4:	f10a 0a01 	add.w	sl, sl, #1
 800bbd8:	e22f      	b.n	800c03a <_dtoa_r+0x8fa>
 800bbda:	07f2      	lsls	r2, r6, #31
 800bbdc:	d505      	bpl.n	800bbea <_dtoa_r+0x4aa>
 800bbde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbe2:	f7f4 fd09 	bl	80005f8 <__aeabi_dmul>
 800bbe6:	3501      	adds	r5, #1
 800bbe8:	2301      	movs	r3, #1
 800bbea:	1076      	asrs	r6, r6, #1
 800bbec:	3708      	adds	r7, #8
 800bbee:	e772      	b.n	800bad6 <_dtoa_r+0x396>
 800bbf0:	2502      	movs	r5, #2
 800bbf2:	e774      	b.n	800bade <_dtoa_r+0x39e>
 800bbf4:	f8cd a020 	str.w	sl, [sp, #32]
 800bbf8:	464f      	mov	r7, r9
 800bbfa:	e791      	b.n	800bb20 <_dtoa_r+0x3e0>
 800bbfc:	4b4d      	ldr	r3, [pc, #308]	; (800bd34 <_dtoa_r+0x5f4>)
 800bbfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc02:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bc06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d047      	beq.n	800bc9c <_dtoa_r+0x55c>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	2000      	movs	r0, #0
 800bc12:	494e      	ldr	r1, [pc, #312]	; (800bd4c <_dtoa_r+0x60c>)
 800bc14:	f7f4 fe1a 	bl	800084c <__aeabi_ddiv>
 800bc18:	462a      	mov	r2, r5
 800bc1a:	4633      	mov	r3, r6
 800bc1c:	f7f4 fb34 	bl	8000288 <__aeabi_dsub>
 800bc20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc24:	465d      	mov	r5, fp
 800bc26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc2a:	f7f4 ff95 	bl	8000b58 <__aeabi_d2iz>
 800bc2e:	4606      	mov	r6, r0
 800bc30:	f7f4 fc78 	bl	8000524 <__aeabi_i2d>
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc3c:	f7f4 fb24 	bl	8000288 <__aeabi_dsub>
 800bc40:	3630      	adds	r6, #48	; 0x30
 800bc42:	f805 6b01 	strb.w	r6, [r5], #1
 800bc46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc4a:	e9cd 0100 	strd	r0, r1, [sp]
 800bc4e:	f7f4 ff45 	bl	8000adc <__aeabi_dcmplt>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d163      	bne.n	800bd1e <_dtoa_r+0x5de>
 800bc56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	4937      	ldr	r1, [pc, #220]	; (800bd3c <_dtoa_r+0x5fc>)
 800bc5e:	f7f4 fb13 	bl	8000288 <__aeabi_dsub>
 800bc62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc66:	f7f4 ff39 	bl	8000adc <__aeabi_dcmplt>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	f040 80b7 	bne.w	800bdde <_dtoa_r+0x69e>
 800bc70:	eba5 030b 	sub.w	r3, r5, fp
 800bc74:	429f      	cmp	r7, r3
 800bc76:	f77f af7c 	ble.w	800bb72 <_dtoa_r+0x432>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	4b30      	ldr	r3, [pc, #192]	; (800bd40 <_dtoa_r+0x600>)
 800bc7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc82:	f7f4 fcb9 	bl	80005f8 <__aeabi_dmul>
 800bc86:	2200      	movs	r2, #0
 800bc88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc8c:	4b2c      	ldr	r3, [pc, #176]	; (800bd40 <_dtoa_r+0x600>)
 800bc8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc92:	f7f4 fcb1 	bl	80005f8 <__aeabi_dmul>
 800bc96:	e9cd 0100 	strd	r0, r1, [sp]
 800bc9a:	e7c4      	b.n	800bc26 <_dtoa_r+0x4e6>
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	4633      	mov	r3, r6
 800bca0:	f7f4 fcaa 	bl	80005f8 <__aeabi_dmul>
 800bca4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bca8:	eb0b 0507 	add.w	r5, fp, r7
 800bcac:	465e      	mov	r6, fp
 800bcae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcb2:	f7f4 ff51 	bl	8000b58 <__aeabi_d2iz>
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	f7f4 fc34 	bl	8000524 <__aeabi_i2d>
 800bcbc:	3730      	adds	r7, #48	; 0x30
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcc6:	f7f4 fadf 	bl	8000288 <__aeabi_dsub>
 800bcca:	f806 7b01 	strb.w	r7, [r6], #1
 800bcce:	42ae      	cmp	r6, r5
 800bcd0:	e9cd 0100 	strd	r0, r1, [sp]
 800bcd4:	f04f 0200 	mov.w	r2, #0
 800bcd8:	d126      	bne.n	800bd28 <_dtoa_r+0x5e8>
 800bcda:	4b1c      	ldr	r3, [pc, #112]	; (800bd4c <_dtoa_r+0x60c>)
 800bcdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bce0:	f7f4 fad4 	bl	800028c <__adddf3>
 800bce4:	4602      	mov	r2, r0
 800bce6:	460b      	mov	r3, r1
 800bce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcec:	f7f4 ff14 	bl	8000b18 <__aeabi_dcmpgt>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d174      	bne.n	800bdde <_dtoa_r+0x69e>
 800bcf4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	4914      	ldr	r1, [pc, #80]	; (800bd4c <_dtoa_r+0x60c>)
 800bcfc:	f7f4 fac4 	bl	8000288 <__aeabi_dsub>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd08:	f7f4 fee8 	bl	8000adc <__aeabi_dcmplt>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	f43f af30 	beq.w	800bb72 <_dtoa_r+0x432>
 800bd12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd16:	2b30      	cmp	r3, #48	; 0x30
 800bd18:	f105 32ff 	add.w	r2, r5, #4294967295
 800bd1c:	d002      	beq.n	800bd24 <_dtoa_r+0x5e4>
 800bd1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bd22:	e04a      	b.n	800bdba <_dtoa_r+0x67a>
 800bd24:	4615      	mov	r5, r2
 800bd26:	e7f4      	b.n	800bd12 <_dtoa_r+0x5d2>
 800bd28:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <_dtoa_r+0x600>)
 800bd2a:	f7f4 fc65 	bl	80005f8 <__aeabi_dmul>
 800bd2e:	e9cd 0100 	strd	r0, r1, [sp]
 800bd32:	e7bc      	b.n	800bcae <_dtoa_r+0x56e>
 800bd34:	0800de40 	.word	0x0800de40
 800bd38:	0800de18 	.word	0x0800de18
 800bd3c:	3ff00000 	.word	0x3ff00000
 800bd40:	40240000 	.word	0x40240000
 800bd44:	401c0000 	.word	0x401c0000
 800bd48:	40140000 	.word	0x40140000
 800bd4c:	3fe00000 	.word	0x3fe00000
 800bd50:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd54:	465d      	mov	r5, fp
 800bd56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	f7f4 fd75 	bl	800084c <__aeabi_ddiv>
 800bd62:	f7f4 fef9 	bl	8000b58 <__aeabi_d2iz>
 800bd66:	4680      	mov	r8, r0
 800bd68:	f7f4 fbdc 	bl	8000524 <__aeabi_i2d>
 800bd6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd70:	f7f4 fc42 	bl	80005f8 <__aeabi_dmul>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	4630      	mov	r0, r6
 800bd7a:	4639      	mov	r1, r7
 800bd7c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bd80:	f7f4 fa82 	bl	8000288 <__aeabi_dsub>
 800bd84:	f805 6b01 	strb.w	r6, [r5], #1
 800bd88:	eba5 060b 	sub.w	r6, r5, fp
 800bd8c:	45b1      	cmp	r9, r6
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	d139      	bne.n	800be08 <_dtoa_r+0x6c8>
 800bd94:	f7f4 fa7a 	bl	800028c <__adddf3>
 800bd98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	460f      	mov	r7, r1
 800bda0:	f7f4 feba 	bl	8000b18 <__aeabi_dcmpgt>
 800bda4:	b9c8      	cbnz	r0, 800bdda <_dtoa_r+0x69a>
 800bda6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdaa:	4630      	mov	r0, r6
 800bdac:	4639      	mov	r1, r7
 800bdae:	f7f4 fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdb2:	b110      	cbz	r0, 800bdba <_dtoa_r+0x67a>
 800bdb4:	f018 0f01 	tst.w	r8, #1
 800bdb8:	d10f      	bne.n	800bdda <_dtoa_r+0x69a>
 800bdba:	9904      	ldr	r1, [sp, #16]
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f000 ffa8 	bl	800cd12 <_Bfree>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdc6:	702b      	strb	r3, [r5, #0]
 800bdc8:	f10a 0301 	add.w	r3, sl, #1
 800bdcc:	6013      	str	r3, [r2, #0]
 800bdce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 8241 	beq.w	800c258 <_dtoa_r+0xb18>
 800bdd6:	601d      	str	r5, [r3, #0]
 800bdd8:	e23e      	b.n	800c258 <_dtoa_r+0xb18>
 800bdda:	f8cd a020 	str.w	sl, [sp, #32]
 800bdde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bde2:	2a39      	cmp	r2, #57	; 0x39
 800bde4:	f105 33ff 	add.w	r3, r5, #4294967295
 800bde8:	d108      	bne.n	800bdfc <_dtoa_r+0x6bc>
 800bdea:	459b      	cmp	fp, r3
 800bdec:	d10a      	bne.n	800be04 <_dtoa_r+0x6c4>
 800bdee:	9b08      	ldr	r3, [sp, #32]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	9308      	str	r3, [sp, #32]
 800bdf4:	2330      	movs	r3, #48	; 0x30
 800bdf6:	f88b 3000 	strb.w	r3, [fp]
 800bdfa:	465b      	mov	r3, fp
 800bdfc:	781a      	ldrb	r2, [r3, #0]
 800bdfe:	3201      	adds	r2, #1
 800be00:	701a      	strb	r2, [r3, #0]
 800be02:	e78c      	b.n	800bd1e <_dtoa_r+0x5de>
 800be04:	461d      	mov	r5, r3
 800be06:	e7ea      	b.n	800bdde <_dtoa_r+0x69e>
 800be08:	2200      	movs	r2, #0
 800be0a:	4b9b      	ldr	r3, [pc, #620]	; (800c078 <_dtoa_r+0x938>)
 800be0c:	f7f4 fbf4 	bl	80005f8 <__aeabi_dmul>
 800be10:	2200      	movs	r2, #0
 800be12:	2300      	movs	r3, #0
 800be14:	4606      	mov	r6, r0
 800be16:	460f      	mov	r7, r1
 800be18:	f7f4 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d09a      	beq.n	800bd56 <_dtoa_r+0x616>
 800be20:	e7cb      	b.n	800bdba <_dtoa_r+0x67a>
 800be22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be24:	2a00      	cmp	r2, #0
 800be26:	f000 808b 	beq.w	800bf40 <_dtoa_r+0x800>
 800be2a:	9a06      	ldr	r2, [sp, #24]
 800be2c:	2a01      	cmp	r2, #1
 800be2e:	dc6e      	bgt.n	800bf0e <_dtoa_r+0x7ce>
 800be30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be32:	2a00      	cmp	r2, #0
 800be34:	d067      	beq.n	800bf06 <_dtoa_r+0x7c6>
 800be36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be3a:	9f07      	ldr	r7, [sp, #28]
 800be3c:	9d05      	ldr	r5, [sp, #20]
 800be3e:	9a05      	ldr	r2, [sp, #20]
 800be40:	2101      	movs	r1, #1
 800be42:	441a      	add	r2, r3
 800be44:	4620      	mov	r0, r4
 800be46:	9205      	str	r2, [sp, #20]
 800be48:	4498      	add	r8, r3
 800be4a:	f001 f840 	bl	800cece <__i2b>
 800be4e:	4606      	mov	r6, r0
 800be50:	2d00      	cmp	r5, #0
 800be52:	dd0c      	ble.n	800be6e <_dtoa_r+0x72e>
 800be54:	f1b8 0f00 	cmp.w	r8, #0
 800be58:	dd09      	ble.n	800be6e <_dtoa_r+0x72e>
 800be5a:	4545      	cmp	r5, r8
 800be5c:	9a05      	ldr	r2, [sp, #20]
 800be5e:	462b      	mov	r3, r5
 800be60:	bfa8      	it	ge
 800be62:	4643      	movge	r3, r8
 800be64:	1ad2      	subs	r2, r2, r3
 800be66:	9205      	str	r2, [sp, #20]
 800be68:	1aed      	subs	r5, r5, r3
 800be6a:	eba8 0803 	sub.w	r8, r8, r3
 800be6e:	9b07      	ldr	r3, [sp, #28]
 800be70:	b1eb      	cbz	r3, 800beae <_dtoa_r+0x76e>
 800be72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be74:	2b00      	cmp	r3, #0
 800be76:	d067      	beq.n	800bf48 <_dtoa_r+0x808>
 800be78:	b18f      	cbz	r7, 800be9e <_dtoa_r+0x75e>
 800be7a:	4631      	mov	r1, r6
 800be7c:	463a      	mov	r2, r7
 800be7e:	4620      	mov	r0, r4
 800be80:	f001 f8c4 	bl	800d00c <__pow5mult>
 800be84:	9a04      	ldr	r2, [sp, #16]
 800be86:	4601      	mov	r1, r0
 800be88:	4606      	mov	r6, r0
 800be8a:	4620      	mov	r0, r4
 800be8c:	f001 f828 	bl	800cee0 <__multiply>
 800be90:	9904      	ldr	r1, [sp, #16]
 800be92:	9008      	str	r0, [sp, #32]
 800be94:	4620      	mov	r0, r4
 800be96:	f000 ff3c 	bl	800cd12 <_Bfree>
 800be9a:	9b08      	ldr	r3, [sp, #32]
 800be9c:	9304      	str	r3, [sp, #16]
 800be9e:	9b07      	ldr	r3, [sp, #28]
 800bea0:	1bda      	subs	r2, r3, r7
 800bea2:	d004      	beq.n	800beae <_dtoa_r+0x76e>
 800bea4:	9904      	ldr	r1, [sp, #16]
 800bea6:	4620      	mov	r0, r4
 800bea8:	f001 f8b0 	bl	800d00c <__pow5mult>
 800beac:	9004      	str	r0, [sp, #16]
 800beae:	2101      	movs	r1, #1
 800beb0:	4620      	mov	r0, r4
 800beb2:	f001 f80c 	bl	800cece <__i2b>
 800beb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beb8:	4607      	mov	r7, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f000 81d0 	beq.w	800c260 <_dtoa_r+0xb20>
 800bec0:	461a      	mov	r2, r3
 800bec2:	4601      	mov	r1, r0
 800bec4:	4620      	mov	r0, r4
 800bec6:	f001 f8a1 	bl	800d00c <__pow5mult>
 800beca:	9b06      	ldr	r3, [sp, #24]
 800becc:	2b01      	cmp	r3, #1
 800bece:	4607      	mov	r7, r0
 800bed0:	dc40      	bgt.n	800bf54 <_dtoa_r+0x814>
 800bed2:	9b00      	ldr	r3, [sp, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d139      	bne.n	800bf4c <_dtoa_r+0x80c>
 800bed8:	9b01      	ldr	r3, [sp, #4]
 800beda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d136      	bne.n	800bf50 <_dtoa_r+0x810>
 800bee2:	9b01      	ldr	r3, [sp, #4]
 800bee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bee8:	0d1b      	lsrs	r3, r3, #20
 800beea:	051b      	lsls	r3, r3, #20
 800beec:	b12b      	cbz	r3, 800befa <_dtoa_r+0x7ba>
 800beee:	9b05      	ldr	r3, [sp, #20]
 800bef0:	3301      	adds	r3, #1
 800bef2:	9305      	str	r3, [sp, #20]
 800bef4:	f108 0801 	add.w	r8, r8, #1
 800bef8:	2301      	movs	r3, #1
 800befa:	9307      	str	r3, [sp, #28]
 800befc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d12a      	bne.n	800bf58 <_dtoa_r+0x818>
 800bf02:	2001      	movs	r0, #1
 800bf04:	e030      	b.n	800bf68 <_dtoa_r+0x828>
 800bf06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf0c:	e795      	b.n	800be3a <_dtoa_r+0x6fa>
 800bf0e:	9b07      	ldr	r3, [sp, #28]
 800bf10:	f109 37ff 	add.w	r7, r9, #4294967295
 800bf14:	42bb      	cmp	r3, r7
 800bf16:	bfbf      	itttt	lt
 800bf18:	9b07      	ldrlt	r3, [sp, #28]
 800bf1a:	9707      	strlt	r7, [sp, #28]
 800bf1c:	1afa      	sublt	r2, r7, r3
 800bf1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bf20:	bfbb      	ittet	lt
 800bf22:	189b      	addlt	r3, r3, r2
 800bf24:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bf26:	1bdf      	subge	r7, r3, r7
 800bf28:	2700      	movlt	r7, #0
 800bf2a:	f1b9 0f00 	cmp.w	r9, #0
 800bf2e:	bfb5      	itete	lt
 800bf30:	9b05      	ldrlt	r3, [sp, #20]
 800bf32:	9d05      	ldrge	r5, [sp, #20]
 800bf34:	eba3 0509 	sublt.w	r5, r3, r9
 800bf38:	464b      	movge	r3, r9
 800bf3a:	bfb8      	it	lt
 800bf3c:	2300      	movlt	r3, #0
 800bf3e:	e77e      	b.n	800be3e <_dtoa_r+0x6fe>
 800bf40:	9f07      	ldr	r7, [sp, #28]
 800bf42:	9d05      	ldr	r5, [sp, #20]
 800bf44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bf46:	e783      	b.n	800be50 <_dtoa_r+0x710>
 800bf48:	9a07      	ldr	r2, [sp, #28]
 800bf4a:	e7ab      	b.n	800bea4 <_dtoa_r+0x764>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	e7d4      	b.n	800befa <_dtoa_r+0x7ba>
 800bf50:	9b00      	ldr	r3, [sp, #0]
 800bf52:	e7d2      	b.n	800befa <_dtoa_r+0x7ba>
 800bf54:	2300      	movs	r3, #0
 800bf56:	9307      	str	r3, [sp, #28]
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bf5e:	6918      	ldr	r0, [r3, #16]
 800bf60:	f000 ff67 	bl	800ce32 <__hi0bits>
 800bf64:	f1c0 0020 	rsb	r0, r0, #32
 800bf68:	4440      	add	r0, r8
 800bf6a:	f010 001f 	ands.w	r0, r0, #31
 800bf6e:	d047      	beq.n	800c000 <_dtoa_r+0x8c0>
 800bf70:	f1c0 0320 	rsb	r3, r0, #32
 800bf74:	2b04      	cmp	r3, #4
 800bf76:	dd3b      	ble.n	800bff0 <_dtoa_r+0x8b0>
 800bf78:	9b05      	ldr	r3, [sp, #20]
 800bf7a:	f1c0 001c 	rsb	r0, r0, #28
 800bf7e:	4403      	add	r3, r0
 800bf80:	9305      	str	r3, [sp, #20]
 800bf82:	4405      	add	r5, r0
 800bf84:	4480      	add	r8, r0
 800bf86:	9b05      	ldr	r3, [sp, #20]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dd05      	ble.n	800bf98 <_dtoa_r+0x858>
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	9904      	ldr	r1, [sp, #16]
 800bf90:	4620      	mov	r0, r4
 800bf92:	f001 f889 	bl	800d0a8 <__lshift>
 800bf96:	9004      	str	r0, [sp, #16]
 800bf98:	f1b8 0f00 	cmp.w	r8, #0
 800bf9c:	dd05      	ble.n	800bfaa <_dtoa_r+0x86a>
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	4642      	mov	r2, r8
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f001 f880 	bl	800d0a8 <__lshift>
 800bfa8:	4607      	mov	r7, r0
 800bfaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfac:	b353      	cbz	r3, 800c004 <_dtoa_r+0x8c4>
 800bfae:	4639      	mov	r1, r7
 800bfb0:	9804      	ldr	r0, [sp, #16]
 800bfb2:	f001 f8cd 	bl	800d150 <__mcmp>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	da24      	bge.n	800c004 <_dtoa_r+0x8c4>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	220a      	movs	r2, #10
 800bfbe:	9904      	ldr	r1, [sp, #16]
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 febd 	bl	800cd40 <__multadd>
 800bfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc8:	9004      	str	r0, [sp, #16]
 800bfca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f000 814d 	beq.w	800c26e <_dtoa_r+0xb2e>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	220a      	movs	r2, #10
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f000 feb0 	bl	800cd40 <__multadd>
 800bfe0:	9b02      	ldr	r3, [sp, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	4606      	mov	r6, r0
 800bfe6:	dc4f      	bgt.n	800c088 <_dtoa_r+0x948>
 800bfe8:	9b06      	ldr	r3, [sp, #24]
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	dd4c      	ble.n	800c088 <_dtoa_r+0x948>
 800bfee:	e011      	b.n	800c014 <_dtoa_r+0x8d4>
 800bff0:	d0c9      	beq.n	800bf86 <_dtoa_r+0x846>
 800bff2:	9a05      	ldr	r2, [sp, #20]
 800bff4:	331c      	adds	r3, #28
 800bff6:	441a      	add	r2, r3
 800bff8:	9205      	str	r2, [sp, #20]
 800bffa:	441d      	add	r5, r3
 800bffc:	4498      	add	r8, r3
 800bffe:	e7c2      	b.n	800bf86 <_dtoa_r+0x846>
 800c000:	4603      	mov	r3, r0
 800c002:	e7f6      	b.n	800bff2 <_dtoa_r+0x8b2>
 800c004:	f1b9 0f00 	cmp.w	r9, #0
 800c008:	dc38      	bgt.n	800c07c <_dtoa_r+0x93c>
 800c00a:	9b06      	ldr	r3, [sp, #24]
 800c00c:	2b02      	cmp	r3, #2
 800c00e:	dd35      	ble.n	800c07c <_dtoa_r+0x93c>
 800c010:	f8cd 9008 	str.w	r9, [sp, #8]
 800c014:	9b02      	ldr	r3, [sp, #8]
 800c016:	b963      	cbnz	r3, 800c032 <_dtoa_r+0x8f2>
 800c018:	4639      	mov	r1, r7
 800c01a:	2205      	movs	r2, #5
 800c01c:	4620      	mov	r0, r4
 800c01e:	f000 fe8f 	bl	800cd40 <__multadd>
 800c022:	4601      	mov	r1, r0
 800c024:	4607      	mov	r7, r0
 800c026:	9804      	ldr	r0, [sp, #16]
 800c028:	f001 f892 	bl	800d150 <__mcmp>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	f73f adcc 	bgt.w	800bbca <_dtoa_r+0x48a>
 800c032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c034:	465d      	mov	r5, fp
 800c036:	ea6f 0a03 	mvn.w	sl, r3
 800c03a:	f04f 0900 	mov.w	r9, #0
 800c03e:	4639      	mov	r1, r7
 800c040:	4620      	mov	r0, r4
 800c042:	f000 fe66 	bl	800cd12 <_Bfree>
 800c046:	2e00      	cmp	r6, #0
 800c048:	f43f aeb7 	beq.w	800bdba <_dtoa_r+0x67a>
 800c04c:	f1b9 0f00 	cmp.w	r9, #0
 800c050:	d005      	beq.n	800c05e <_dtoa_r+0x91e>
 800c052:	45b1      	cmp	r9, r6
 800c054:	d003      	beq.n	800c05e <_dtoa_r+0x91e>
 800c056:	4649      	mov	r1, r9
 800c058:	4620      	mov	r0, r4
 800c05a:	f000 fe5a 	bl	800cd12 <_Bfree>
 800c05e:	4631      	mov	r1, r6
 800c060:	4620      	mov	r0, r4
 800c062:	f000 fe56 	bl	800cd12 <_Bfree>
 800c066:	e6a8      	b.n	800bdba <_dtoa_r+0x67a>
 800c068:	2700      	movs	r7, #0
 800c06a:	463e      	mov	r6, r7
 800c06c:	e7e1      	b.n	800c032 <_dtoa_r+0x8f2>
 800c06e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c072:	463e      	mov	r6, r7
 800c074:	e5a9      	b.n	800bbca <_dtoa_r+0x48a>
 800c076:	bf00      	nop
 800c078:	40240000 	.word	0x40240000
 800c07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c07e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 80fa 	beq.w	800c27c <_dtoa_r+0xb3c>
 800c088:	2d00      	cmp	r5, #0
 800c08a:	dd05      	ble.n	800c098 <_dtoa_r+0x958>
 800c08c:	4631      	mov	r1, r6
 800c08e:	462a      	mov	r2, r5
 800c090:	4620      	mov	r0, r4
 800c092:	f001 f809 	bl	800d0a8 <__lshift>
 800c096:	4606      	mov	r6, r0
 800c098:	9b07      	ldr	r3, [sp, #28]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d04c      	beq.n	800c138 <_dtoa_r+0x9f8>
 800c09e:	6871      	ldr	r1, [r6, #4]
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f000 fe02 	bl	800ccaa <_Balloc>
 800c0a6:	6932      	ldr	r2, [r6, #16]
 800c0a8:	3202      	adds	r2, #2
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	0092      	lsls	r2, r2, #2
 800c0ae:	f106 010c 	add.w	r1, r6, #12
 800c0b2:	300c      	adds	r0, #12
 800c0b4:	f000 fdee 	bl	800cc94 <memcpy>
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f000 fff3 	bl	800d0a8 <__lshift>
 800c0c2:	9b00      	ldr	r3, [sp, #0]
 800c0c4:	f8cd b014 	str.w	fp, [sp, #20]
 800c0c8:	f003 0301 	and.w	r3, r3, #1
 800c0cc:	46b1      	mov	r9, r6
 800c0ce:	9307      	str	r3, [sp, #28]
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	9804      	ldr	r0, [sp, #16]
 800c0d6:	f7ff faa5 	bl	800b624 <quorem>
 800c0da:	4649      	mov	r1, r9
 800c0dc:	4605      	mov	r5, r0
 800c0de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c0e2:	9804      	ldr	r0, [sp, #16]
 800c0e4:	f001 f834 	bl	800d150 <__mcmp>
 800c0e8:	4632      	mov	r2, r6
 800c0ea:	9000      	str	r0, [sp, #0]
 800c0ec:	4639      	mov	r1, r7
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f001 f848 	bl	800d184 <__mdiff>
 800c0f4:	68c3      	ldr	r3, [r0, #12]
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	bb03      	cbnz	r3, 800c13c <_dtoa_r+0x9fc>
 800c0fa:	4601      	mov	r1, r0
 800c0fc:	9008      	str	r0, [sp, #32]
 800c0fe:	9804      	ldr	r0, [sp, #16]
 800c100:	f001 f826 	bl	800d150 <__mcmp>
 800c104:	9a08      	ldr	r2, [sp, #32]
 800c106:	4603      	mov	r3, r0
 800c108:	4611      	mov	r1, r2
 800c10a:	4620      	mov	r0, r4
 800c10c:	9308      	str	r3, [sp, #32]
 800c10e:	f000 fe00 	bl	800cd12 <_Bfree>
 800c112:	9b08      	ldr	r3, [sp, #32]
 800c114:	b9a3      	cbnz	r3, 800c140 <_dtoa_r+0xa00>
 800c116:	9a06      	ldr	r2, [sp, #24]
 800c118:	b992      	cbnz	r2, 800c140 <_dtoa_r+0xa00>
 800c11a:	9a07      	ldr	r2, [sp, #28]
 800c11c:	b982      	cbnz	r2, 800c140 <_dtoa_r+0xa00>
 800c11e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c122:	d029      	beq.n	800c178 <_dtoa_r+0xa38>
 800c124:	9b00      	ldr	r3, [sp, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	dd01      	ble.n	800c12e <_dtoa_r+0x9ee>
 800c12a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c12e:	9b05      	ldr	r3, [sp, #20]
 800c130:	1c5d      	adds	r5, r3, #1
 800c132:	f883 8000 	strb.w	r8, [r3]
 800c136:	e782      	b.n	800c03e <_dtoa_r+0x8fe>
 800c138:	4630      	mov	r0, r6
 800c13a:	e7c2      	b.n	800c0c2 <_dtoa_r+0x982>
 800c13c:	2301      	movs	r3, #1
 800c13e:	e7e3      	b.n	800c108 <_dtoa_r+0x9c8>
 800c140:	9a00      	ldr	r2, [sp, #0]
 800c142:	2a00      	cmp	r2, #0
 800c144:	db04      	blt.n	800c150 <_dtoa_r+0xa10>
 800c146:	d125      	bne.n	800c194 <_dtoa_r+0xa54>
 800c148:	9a06      	ldr	r2, [sp, #24]
 800c14a:	bb1a      	cbnz	r2, 800c194 <_dtoa_r+0xa54>
 800c14c:	9a07      	ldr	r2, [sp, #28]
 800c14e:	bb0a      	cbnz	r2, 800c194 <_dtoa_r+0xa54>
 800c150:	2b00      	cmp	r3, #0
 800c152:	ddec      	ble.n	800c12e <_dtoa_r+0x9ee>
 800c154:	2201      	movs	r2, #1
 800c156:	9904      	ldr	r1, [sp, #16]
 800c158:	4620      	mov	r0, r4
 800c15a:	f000 ffa5 	bl	800d0a8 <__lshift>
 800c15e:	4639      	mov	r1, r7
 800c160:	9004      	str	r0, [sp, #16]
 800c162:	f000 fff5 	bl	800d150 <__mcmp>
 800c166:	2800      	cmp	r0, #0
 800c168:	dc03      	bgt.n	800c172 <_dtoa_r+0xa32>
 800c16a:	d1e0      	bne.n	800c12e <_dtoa_r+0x9ee>
 800c16c:	f018 0f01 	tst.w	r8, #1
 800c170:	d0dd      	beq.n	800c12e <_dtoa_r+0x9ee>
 800c172:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c176:	d1d8      	bne.n	800c12a <_dtoa_r+0x9ea>
 800c178:	9b05      	ldr	r3, [sp, #20]
 800c17a:	9a05      	ldr	r2, [sp, #20]
 800c17c:	1c5d      	adds	r5, r3, #1
 800c17e:	2339      	movs	r3, #57	; 0x39
 800c180:	7013      	strb	r3, [r2, #0]
 800c182:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c186:	2b39      	cmp	r3, #57	; 0x39
 800c188:	f105 32ff 	add.w	r2, r5, #4294967295
 800c18c:	d04f      	beq.n	800c22e <_dtoa_r+0xaee>
 800c18e:	3301      	adds	r3, #1
 800c190:	7013      	strb	r3, [r2, #0]
 800c192:	e754      	b.n	800c03e <_dtoa_r+0x8fe>
 800c194:	9a05      	ldr	r2, [sp, #20]
 800c196:	2b00      	cmp	r3, #0
 800c198:	f102 0501 	add.w	r5, r2, #1
 800c19c:	dd06      	ble.n	800c1ac <_dtoa_r+0xa6c>
 800c19e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c1a2:	d0e9      	beq.n	800c178 <_dtoa_r+0xa38>
 800c1a4:	f108 0801 	add.w	r8, r8, #1
 800c1a8:	9b05      	ldr	r3, [sp, #20]
 800c1aa:	e7c2      	b.n	800c132 <_dtoa_r+0x9f2>
 800c1ac:	9a02      	ldr	r2, [sp, #8]
 800c1ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c1b2:	eba5 030b 	sub.w	r3, r5, fp
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d021      	beq.n	800c1fe <_dtoa_r+0xabe>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	220a      	movs	r2, #10
 800c1be:	9904      	ldr	r1, [sp, #16]
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f000 fdbd 	bl	800cd40 <__multadd>
 800c1c6:	45b1      	cmp	r9, r6
 800c1c8:	9004      	str	r0, [sp, #16]
 800c1ca:	f04f 0300 	mov.w	r3, #0
 800c1ce:	f04f 020a 	mov.w	r2, #10
 800c1d2:	4649      	mov	r1, r9
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	d105      	bne.n	800c1e4 <_dtoa_r+0xaa4>
 800c1d8:	f000 fdb2 	bl	800cd40 <__multadd>
 800c1dc:	4681      	mov	r9, r0
 800c1de:	4606      	mov	r6, r0
 800c1e0:	9505      	str	r5, [sp, #20]
 800c1e2:	e776      	b.n	800c0d2 <_dtoa_r+0x992>
 800c1e4:	f000 fdac 	bl	800cd40 <__multadd>
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4681      	mov	r9, r0
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	220a      	movs	r2, #10
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f000 fda5 	bl	800cd40 <__multadd>
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	e7f2      	b.n	800c1e0 <_dtoa_r+0xaa0>
 800c1fa:	f04f 0900 	mov.w	r9, #0
 800c1fe:	2201      	movs	r2, #1
 800c200:	9904      	ldr	r1, [sp, #16]
 800c202:	4620      	mov	r0, r4
 800c204:	f000 ff50 	bl	800d0a8 <__lshift>
 800c208:	4639      	mov	r1, r7
 800c20a:	9004      	str	r0, [sp, #16]
 800c20c:	f000 ffa0 	bl	800d150 <__mcmp>
 800c210:	2800      	cmp	r0, #0
 800c212:	dcb6      	bgt.n	800c182 <_dtoa_r+0xa42>
 800c214:	d102      	bne.n	800c21c <_dtoa_r+0xadc>
 800c216:	f018 0f01 	tst.w	r8, #1
 800c21a:	d1b2      	bne.n	800c182 <_dtoa_r+0xa42>
 800c21c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c220:	2b30      	cmp	r3, #48	; 0x30
 800c222:	f105 32ff 	add.w	r2, r5, #4294967295
 800c226:	f47f af0a 	bne.w	800c03e <_dtoa_r+0x8fe>
 800c22a:	4615      	mov	r5, r2
 800c22c:	e7f6      	b.n	800c21c <_dtoa_r+0xadc>
 800c22e:	4593      	cmp	fp, r2
 800c230:	d105      	bne.n	800c23e <_dtoa_r+0xafe>
 800c232:	2331      	movs	r3, #49	; 0x31
 800c234:	f10a 0a01 	add.w	sl, sl, #1
 800c238:	f88b 3000 	strb.w	r3, [fp]
 800c23c:	e6ff      	b.n	800c03e <_dtoa_r+0x8fe>
 800c23e:	4615      	mov	r5, r2
 800c240:	e79f      	b.n	800c182 <_dtoa_r+0xa42>
 800c242:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c2a8 <_dtoa_r+0xb68>
 800c246:	e007      	b.n	800c258 <_dtoa_r+0xb18>
 800c248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c24a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c2ac <_dtoa_r+0xb6c>
 800c24e:	b11b      	cbz	r3, 800c258 <_dtoa_r+0xb18>
 800c250:	f10b 0308 	add.w	r3, fp, #8
 800c254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	4658      	mov	r0, fp
 800c25a:	b017      	add	sp, #92	; 0x5c
 800c25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c260:	9b06      	ldr	r3, [sp, #24]
 800c262:	2b01      	cmp	r3, #1
 800c264:	f77f ae35 	ble.w	800bed2 <_dtoa_r+0x792>
 800c268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c26a:	9307      	str	r3, [sp, #28]
 800c26c:	e649      	b.n	800bf02 <_dtoa_r+0x7c2>
 800c26e:	9b02      	ldr	r3, [sp, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	dc03      	bgt.n	800c27c <_dtoa_r+0xb3c>
 800c274:	9b06      	ldr	r3, [sp, #24]
 800c276:	2b02      	cmp	r3, #2
 800c278:	f73f aecc 	bgt.w	800c014 <_dtoa_r+0x8d4>
 800c27c:	465d      	mov	r5, fp
 800c27e:	4639      	mov	r1, r7
 800c280:	9804      	ldr	r0, [sp, #16]
 800c282:	f7ff f9cf 	bl	800b624 <quorem>
 800c286:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c28a:	f805 8b01 	strb.w	r8, [r5], #1
 800c28e:	9a02      	ldr	r2, [sp, #8]
 800c290:	eba5 030b 	sub.w	r3, r5, fp
 800c294:	429a      	cmp	r2, r3
 800c296:	ddb0      	ble.n	800c1fa <_dtoa_r+0xaba>
 800c298:	2300      	movs	r3, #0
 800c29a:	220a      	movs	r2, #10
 800c29c:	9904      	ldr	r1, [sp, #16]
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f000 fd4e 	bl	800cd40 <__multadd>
 800c2a4:	9004      	str	r0, [sp, #16]
 800c2a6:	e7ea      	b.n	800c27e <_dtoa_r+0xb3e>
 800c2a8:	0800dd1c 	.word	0x0800dd1c
 800c2ac:	0800dd98 	.word	0x0800dd98

0800c2b0 <__sflush_r>:
 800c2b0:	898a      	ldrh	r2, [r1, #12]
 800c2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	0710      	lsls	r0, r2, #28
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	d458      	bmi.n	800c370 <__sflush_r+0xc0>
 800c2be:	684b      	ldr	r3, [r1, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	dc05      	bgt.n	800c2d0 <__sflush_r+0x20>
 800c2c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	dc02      	bgt.n	800c2d0 <__sflush_r+0x20>
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2d2:	2e00      	cmp	r6, #0
 800c2d4:	d0f9      	beq.n	800c2ca <__sflush_r+0x1a>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2dc:	682f      	ldr	r7, [r5, #0]
 800c2de:	6a21      	ldr	r1, [r4, #32]
 800c2e0:	602b      	str	r3, [r5, #0]
 800c2e2:	d032      	beq.n	800c34a <__sflush_r+0x9a>
 800c2e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2e6:	89a3      	ldrh	r3, [r4, #12]
 800c2e8:	075a      	lsls	r2, r3, #29
 800c2ea:	d505      	bpl.n	800c2f8 <__sflush_r+0x48>
 800c2ec:	6863      	ldr	r3, [r4, #4]
 800c2ee:	1ac0      	subs	r0, r0, r3
 800c2f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2f2:	b10b      	cbz	r3, 800c2f8 <__sflush_r+0x48>
 800c2f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2f6:	1ac0      	subs	r0, r0, r3
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2fe:	6a21      	ldr	r1, [r4, #32]
 800c300:	4628      	mov	r0, r5
 800c302:	47b0      	blx	r6
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	d106      	bne.n	800c318 <__sflush_r+0x68>
 800c30a:	6829      	ldr	r1, [r5, #0]
 800c30c:	291d      	cmp	r1, #29
 800c30e:	d848      	bhi.n	800c3a2 <__sflush_r+0xf2>
 800c310:	4a29      	ldr	r2, [pc, #164]	; (800c3b8 <__sflush_r+0x108>)
 800c312:	40ca      	lsrs	r2, r1
 800c314:	07d6      	lsls	r6, r2, #31
 800c316:	d544      	bpl.n	800c3a2 <__sflush_r+0xf2>
 800c318:	2200      	movs	r2, #0
 800c31a:	6062      	str	r2, [r4, #4]
 800c31c:	04d9      	lsls	r1, r3, #19
 800c31e:	6922      	ldr	r2, [r4, #16]
 800c320:	6022      	str	r2, [r4, #0]
 800c322:	d504      	bpl.n	800c32e <__sflush_r+0x7e>
 800c324:	1c42      	adds	r2, r0, #1
 800c326:	d101      	bne.n	800c32c <__sflush_r+0x7c>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b903      	cbnz	r3, 800c32e <__sflush_r+0x7e>
 800c32c:	6560      	str	r0, [r4, #84]	; 0x54
 800c32e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c330:	602f      	str	r7, [r5, #0]
 800c332:	2900      	cmp	r1, #0
 800c334:	d0c9      	beq.n	800c2ca <__sflush_r+0x1a>
 800c336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c33a:	4299      	cmp	r1, r3
 800c33c:	d002      	beq.n	800c344 <__sflush_r+0x94>
 800c33e:	4628      	mov	r0, r5
 800c340:	f001 f8c0 	bl	800d4c4 <_free_r>
 800c344:	2000      	movs	r0, #0
 800c346:	6360      	str	r0, [r4, #52]	; 0x34
 800c348:	e7c0      	b.n	800c2cc <__sflush_r+0x1c>
 800c34a:	2301      	movs	r3, #1
 800c34c:	4628      	mov	r0, r5
 800c34e:	47b0      	blx	r6
 800c350:	1c41      	adds	r1, r0, #1
 800c352:	d1c8      	bne.n	800c2e6 <__sflush_r+0x36>
 800c354:	682b      	ldr	r3, [r5, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d0c5      	beq.n	800c2e6 <__sflush_r+0x36>
 800c35a:	2b1d      	cmp	r3, #29
 800c35c:	d001      	beq.n	800c362 <__sflush_r+0xb2>
 800c35e:	2b16      	cmp	r3, #22
 800c360:	d101      	bne.n	800c366 <__sflush_r+0xb6>
 800c362:	602f      	str	r7, [r5, #0]
 800c364:	e7b1      	b.n	800c2ca <__sflush_r+0x1a>
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c36c:	81a3      	strh	r3, [r4, #12]
 800c36e:	e7ad      	b.n	800c2cc <__sflush_r+0x1c>
 800c370:	690f      	ldr	r7, [r1, #16]
 800c372:	2f00      	cmp	r7, #0
 800c374:	d0a9      	beq.n	800c2ca <__sflush_r+0x1a>
 800c376:	0793      	lsls	r3, r2, #30
 800c378:	680e      	ldr	r6, [r1, #0]
 800c37a:	bf08      	it	eq
 800c37c:	694b      	ldreq	r3, [r1, #20]
 800c37e:	600f      	str	r7, [r1, #0]
 800c380:	bf18      	it	ne
 800c382:	2300      	movne	r3, #0
 800c384:	eba6 0807 	sub.w	r8, r6, r7
 800c388:	608b      	str	r3, [r1, #8]
 800c38a:	f1b8 0f00 	cmp.w	r8, #0
 800c38e:	dd9c      	ble.n	800c2ca <__sflush_r+0x1a>
 800c390:	4643      	mov	r3, r8
 800c392:	463a      	mov	r2, r7
 800c394:	6a21      	ldr	r1, [r4, #32]
 800c396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c398:	4628      	mov	r0, r5
 800c39a:	47b0      	blx	r6
 800c39c:	2800      	cmp	r0, #0
 800c39e:	dc06      	bgt.n	800c3ae <__sflush_r+0xfe>
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a6:	81a3      	strh	r3, [r4, #12]
 800c3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ac:	e78e      	b.n	800c2cc <__sflush_r+0x1c>
 800c3ae:	4407      	add	r7, r0
 800c3b0:	eba8 0800 	sub.w	r8, r8, r0
 800c3b4:	e7e9      	b.n	800c38a <__sflush_r+0xda>
 800c3b6:	bf00      	nop
 800c3b8:	20400001 	.word	0x20400001

0800c3bc <_fflush_r>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	690b      	ldr	r3, [r1, #16]
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	b1db      	cbz	r3, 800c3fe <_fflush_r+0x42>
 800c3c6:	b118      	cbz	r0, 800c3d0 <_fflush_r+0x14>
 800c3c8:	6983      	ldr	r3, [r0, #24]
 800c3ca:	b90b      	cbnz	r3, 800c3d0 <_fflush_r+0x14>
 800c3cc:	f000 f860 	bl	800c490 <__sinit>
 800c3d0:	4b0c      	ldr	r3, [pc, #48]	; (800c404 <_fflush_r+0x48>)
 800c3d2:	429c      	cmp	r4, r3
 800c3d4:	d109      	bne.n	800c3ea <_fflush_r+0x2e>
 800c3d6:	686c      	ldr	r4, [r5, #4]
 800c3d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3dc:	b17b      	cbz	r3, 800c3fe <_fflush_r+0x42>
 800c3de:	4621      	mov	r1, r4
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3e6:	f7ff bf63 	b.w	800c2b0 <__sflush_r>
 800c3ea:	4b07      	ldr	r3, [pc, #28]	; (800c408 <_fflush_r+0x4c>)
 800c3ec:	429c      	cmp	r4, r3
 800c3ee:	d101      	bne.n	800c3f4 <_fflush_r+0x38>
 800c3f0:	68ac      	ldr	r4, [r5, #8]
 800c3f2:	e7f1      	b.n	800c3d8 <_fflush_r+0x1c>
 800c3f4:	4b05      	ldr	r3, [pc, #20]	; (800c40c <_fflush_r+0x50>)
 800c3f6:	429c      	cmp	r4, r3
 800c3f8:	bf08      	it	eq
 800c3fa:	68ec      	ldreq	r4, [r5, #12]
 800c3fc:	e7ec      	b.n	800c3d8 <_fflush_r+0x1c>
 800c3fe:	2000      	movs	r0, #0
 800c400:	bd38      	pop	{r3, r4, r5, pc}
 800c402:	bf00      	nop
 800c404:	0800ddc8 	.word	0x0800ddc8
 800c408:	0800dde8 	.word	0x0800dde8
 800c40c:	0800dda8 	.word	0x0800dda8

0800c410 <std>:
 800c410:	2300      	movs	r3, #0
 800c412:	b510      	push	{r4, lr}
 800c414:	4604      	mov	r4, r0
 800c416:	e9c0 3300 	strd	r3, r3, [r0]
 800c41a:	6083      	str	r3, [r0, #8]
 800c41c:	8181      	strh	r1, [r0, #12]
 800c41e:	6643      	str	r3, [r0, #100]	; 0x64
 800c420:	81c2      	strh	r2, [r0, #14]
 800c422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c426:	6183      	str	r3, [r0, #24]
 800c428:	4619      	mov	r1, r3
 800c42a:	2208      	movs	r2, #8
 800c42c:	305c      	adds	r0, #92	; 0x5c
 800c42e:	f7fd fb27 	bl	8009a80 <memset>
 800c432:	4b05      	ldr	r3, [pc, #20]	; (800c448 <std+0x38>)
 800c434:	6263      	str	r3, [r4, #36]	; 0x24
 800c436:	4b05      	ldr	r3, [pc, #20]	; (800c44c <std+0x3c>)
 800c438:	62a3      	str	r3, [r4, #40]	; 0x28
 800c43a:	4b05      	ldr	r3, [pc, #20]	; (800c450 <std+0x40>)
 800c43c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c43e:	4b05      	ldr	r3, [pc, #20]	; (800c454 <std+0x44>)
 800c440:	6224      	str	r4, [r4, #32]
 800c442:	6323      	str	r3, [r4, #48]	; 0x30
 800c444:	bd10      	pop	{r4, pc}
 800c446:	bf00      	nop
 800c448:	0800d8d9 	.word	0x0800d8d9
 800c44c:	0800d8fb 	.word	0x0800d8fb
 800c450:	0800d933 	.word	0x0800d933
 800c454:	0800d957 	.word	0x0800d957

0800c458 <_cleanup_r>:
 800c458:	4901      	ldr	r1, [pc, #4]	; (800c460 <_cleanup_r+0x8>)
 800c45a:	f000 b885 	b.w	800c568 <_fwalk_reent>
 800c45e:	bf00      	nop
 800c460:	0800c3bd 	.word	0x0800c3bd

0800c464 <__sfmoreglue>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	1e4a      	subs	r2, r1, #1
 800c468:	2568      	movs	r5, #104	; 0x68
 800c46a:	4355      	muls	r5, r2
 800c46c:	460e      	mov	r6, r1
 800c46e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c472:	f001 f875 	bl	800d560 <_malloc_r>
 800c476:	4604      	mov	r4, r0
 800c478:	b140      	cbz	r0, 800c48c <__sfmoreglue+0x28>
 800c47a:	2100      	movs	r1, #0
 800c47c:	e9c0 1600 	strd	r1, r6, [r0]
 800c480:	300c      	adds	r0, #12
 800c482:	60a0      	str	r0, [r4, #8]
 800c484:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c488:	f7fd fafa 	bl	8009a80 <memset>
 800c48c:	4620      	mov	r0, r4
 800c48e:	bd70      	pop	{r4, r5, r6, pc}

0800c490 <__sinit>:
 800c490:	6983      	ldr	r3, [r0, #24]
 800c492:	b510      	push	{r4, lr}
 800c494:	4604      	mov	r4, r0
 800c496:	bb33      	cbnz	r3, 800c4e6 <__sinit+0x56>
 800c498:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c49c:	6503      	str	r3, [r0, #80]	; 0x50
 800c49e:	4b12      	ldr	r3, [pc, #72]	; (800c4e8 <__sinit+0x58>)
 800c4a0:	4a12      	ldr	r2, [pc, #72]	; (800c4ec <__sinit+0x5c>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6282      	str	r2, [r0, #40]	; 0x28
 800c4a6:	4298      	cmp	r0, r3
 800c4a8:	bf04      	itt	eq
 800c4aa:	2301      	moveq	r3, #1
 800c4ac:	6183      	streq	r3, [r0, #24]
 800c4ae:	f000 f81f 	bl	800c4f0 <__sfp>
 800c4b2:	6060      	str	r0, [r4, #4]
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f000 f81b 	bl	800c4f0 <__sfp>
 800c4ba:	60a0      	str	r0, [r4, #8]
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f000 f817 	bl	800c4f0 <__sfp>
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	60e0      	str	r0, [r4, #12]
 800c4c6:	2104      	movs	r1, #4
 800c4c8:	6860      	ldr	r0, [r4, #4]
 800c4ca:	f7ff ffa1 	bl	800c410 <std>
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	2109      	movs	r1, #9
 800c4d2:	68a0      	ldr	r0, [r4, #8]
 800c4d4:	f7ff ff9c 	bl	800c410 <std>
 800c4d8:	2202      	movs	r2, #2
 800c4da:	2112      	movs	r1, #18
 800c4dc:	68e0      	ldr	r0, [r4, #12]
 800c4de:	f7ff ff97 	bl	800c410 <std>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	61a3      	str	r3, [r4, #24]
 800c4e6:	bd10      	pop	{r4, pc}
 800c4e8:	0800dd08 	.word	0x0800dd08
 800c4ec:	0800c459 	.word	0x0800c459

0800c4f0 <__sfp>:
 800c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4f2:	4b1b      	ldr	r3, [pc, #108]	; (800c560 <__sfp+0x70>)
 800c4f4:	681e      	ldr	r6, [r3, #0]
 800c4f6:	69b3      	ldr	r3, [r6, #24]
 800c4f8:	4607      	mov	r7, r0
 800c4fa:	b913      	cbnz	r3, 800c502 <__sfp+0x12>
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	f7ff ffc7 	bl	800c490 <__sinit>
 800c502:	3648      	adds	r6, #72	; 0x48
 800c504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c508:	3b01      	subs	r3, #1
 800c50a:	d503      	bpl.n	800c514 <__sfp+0x24>
 800c50c:	6833      	ldr	r3, [r6, #0]
 800c50e:	b133      	cbz	r3, 800c51e <__sfp+0x2e>
 800c510:	6836      	ldr	r6, [r6, #0]
 800c512:	e7f7      	b.n	800c504 <__sfp+0x14>
 800c514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c518:	b16d      	cbz	r5, 800c536 <__sfp+0x46>
 800c51a:	3468      	adds	r4, #104	; 0x68
 800c51c:	e7f4      	b.n	800c508 <__sfp+0x18>
 800c51e:	2104      	movs	r1, #4
 800c520:	4638      	mov	r0, r7
 800c522:	f7ff ff9f 	bl	800c464 <__sfmoreglue>
 800c526:	6030      	str	r0, [r6, #0]
 800c528:	2800      	cmp	r0, #0
 800c52a:	d1f1      	bne.n	800c510 <__sfp+0x20>
 800c52c:	230c      	movs	r3, #12
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	4604      	mov	r4, r0
 800c532:	4620      	mov	r0, r4
 800c534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c536:	4b0b      	ldr	r3, [pc, #44]	; (800c564 <__sfp+0x74>)
 800c538:	6665      	str	r5, [r4, #100]	; 0x64
 800c53a:	e9c4 5500 	strd	r5, r5, [r4]
 800c53e:	60a5      	str	r5, [r4, #8]
 800c540:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c544:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c548:	2208      	movs	r2, #8
 800c54a:	4629      	mov	r1, r5
 800c54c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c550:	f7fd fa96 	bl	8009a80 <memset>
 800c554:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c558:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c55c:	e7e9      	b.n	800c532 <__sfp+0x42>
 800c55e:	bf00      	nop
 800c560:	0800dd08 	.word	0x0800dd08
 800c564:	ffff0001 	.word	0xffff0001

0800c568 <_fwalk_reent>:
 800c568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c56c:	4680      	mov	r8, r0
 800c56e:	4689      	mov	r9, r1
 800c570:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c574:	2600      	movs	r6, #0
 800c576:	b914      	cbnz	r4, 800c57e <_fwalk_reent+0x16>
 800c578:	4630      	mov	r0, r6
 800c57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c57e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c582:	3f01      	subs	r7, #1
 800c584:	d501      	bpl.n	800c58a <_fwalk_reent+0x22>
 800c586:	6824      	ldr	r4, [r4, #0]
 800c588:	e7f5      	b.n	800c576 <_fwalk_reent+0xe>
 800c58a:	89ab      	ldrh	r3, [r5, #12]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d907      	bls.n	800c5a0 <_fwalk_reent+0x38>
 800c590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c594:	3301      	adds	r3, #1
 800c596:	d003      	beq.n	800c5a0 <_fwalk_reent+0x38>
 800c598:	4629      	mov	r1, r5
 800c59a:	4640      	mov	r0, r8
 800c59c:	47c8      	blx	r9
 800c59e:	4306      	orrs	r6, r0
 800c5a0:	3568      	adds	r5, #104	; 0x68
 800c5a2:	e7ee      	b.n	800c582 <_fwalk_reent+0x1a>

0800c5a4 <rshift>:
 800c5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5a6:	6906      	ldr	r6, [r0, #16]
 800c5a8:	114b      	asrs	r3, r1, #5
 800c5aa:	429e      	cmp	r6, r3
 800c5ac:	f100 0414 	add.w	r4, r0, #20
 800c5b0:	dd30      	ble.n	800c614 <rshift+0x70>
 800c5b2:	f011 011f 	ands.w	r1, r1, #31
 800c5b6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c5ba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c5be:	d108      	bne.n	800c5d2 <rshift+0x2e>
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	42b2      	cmp	r2, r6
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	d211      	bcs.n	800c5ec <rshift+0x48>
 800c5c8:	f852 3b04 	ldr.w	r3, [r2], #4
 800c5cc:	f841 3b04 	str.w	r3, [r1], #4
 800c5d0:	e7f7      	b.n	800c5c2 <rshift+0x1e>
 800c5d2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c5d6:	f1c1 0c20 	rsb	ip, r1, #32
 800c5da:	40cd      	lsrs	r5, r1
 800c5dc:	3204      	adds	r2, #4
 800c5de:	4623      	mov	r3, r4
 800c5e0:	42b2      	cmp	r2, r6
 800c5e2:	4617      	mov	r7, r2
 800c5e4:	d30c      	bcc.n	800c600 <rshift+0x5c>
 800c5e6:	601d      	str	r5, [r3, #0]
 800c5e8:	b105      	cbz	r5, 800c5ec <rshift+0x48>
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	1b1a      	subs	r2, r3, r4
 800c5ee:	42a3      	cmp	r3, r4
 800c5f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c5f4:	bf08      	it	eq
 800c5f6:	2300      	moveq	r3, #0
 800c5f8:	6102      	str	r2, [r0, #16]
 800c5fa:	bf08      	it	eq
 800c5fc:	6143      	streq	r3, [r0, #20]
 800c5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c600:	683f      	ldr	r7, [r7, #0]
 800c602:	fa07 f70c 	lsl.w	r7, r7, ip
 800c606:	433d      	orrs	r5, r7
 800c608:	f843 5b04 	str.w	r5, [r3], #4
 800c60c:	f852 5b04 	ldr.w	r5, [r2], #4
 800c610:	40cd      	lsrs	r5, r1
 800c612:	e7e5      	b.n	800c5e0 <rshift+0x3c>
 800c614:	4623      	mov	r3, r4
 800c616:	e7e9      	b.n	800c5ec <rshift+0x48>

0800c618 <__hexdig_fun>:
 800c618:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c61c:	2b09      	cmp	r3, #9
 800c61e:	d802      	bhi.n	800c626 <__hexdig_fun+0xe>
 800c620:	3820      	subs	r0, #32
 800c622:	b2c0      	uxtb	r0, r0
 800c624:	4770      	bx	lr
 800c626:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c62a:	2b05      	cmp	r3, #5
 800c62c:	d801      	bhi.n	800c632 <__hexdig_fun+0x1a>
 800c62e:	3847      	subs	r0, #71	; 0x47
 800c630:	e7f7      	b.n	800c622 <__hexdig_fun+0xa>
 800c632:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c636:	2b05      	cmp	r3, #5
 800c638:	d801      	bhi.n	800c63e <__hexdig_fun+0x26>
 800c63a:	3827      	subs	r0, #39	; 0x27
 800c63c:	e7f1      	b.n	800c622 <__hexdig_fun+0xa>
 800c63e:	2000      	movs	r0, #0
 800c640:	4770      	bx	lr

0800c642 <__gethex>:
 800c642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c646:	b08b      	sub	sp, #44	; 0x2c
 800c648:	468a      	mov	sl, r1
 800c64a:	9002      	str	r0, [sp, #8]
 800c64c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c64e:	9306      	str	r3, [sp, #24]
 800c650:	4690      	mov	r8, r2
 800c652:	f000 fad0 	bl	800cbf6 <__localeconv_l>
 800c656:	6803      	ldr	r3, [r0, #0]
 800c658:	9303      	str	r3, [sp, #12]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7f3 fdb8 	bl	80001d0 <strlen>
 800c660:	9b03      	ldr	r3, [sp, #12]
 800c662:	9001      	str	r0, [sp, #4]
 800c664:	4403      	add	r3, r0
 800c666:	f04f 0b00 	mov.w	fp, #0
 800c66a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c66e:	9307      	str	r3, [sp, #28]
 800c670:	f8da 3000 	ldr.w	r3, [sl]
 800c674:	3302      	adds	r3, #2
 800c676:	461f      	mov	r7, r3
 800c678:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c67c:	2830      	cmp	r0, #48	; 0x30
 800c67e:	d06c      	beq.n	800c75a <__gethex+0x118>
 800c680:	f7ff ffca 	bl	800c618 <__hexdig_fun>
 800c684:	4604      	mov	r4, r0
 800c686:	2800      	cmp	r0, #0
 800c688:	d16a      	bne.n	800c760 <__gethex+0x11e>
 800c68a:	9a01      	ldr	r2, [sp, #4]
 800c68c:	9903      	ldr	r1, [sp, #12]
 800c68e:	4638      	mov	r0, r7
 800c690:	f001 f965 	bl	800d95e <strncmp>
 800c694:	2800      	cmp	r0, #0
 800c696:	d166      	bne.n	800c766 <__gethex+0x124>
 800c698:	9b01      	ldr	r3, [sp, #4]
 800c69a:	5cf8      	ldrb	r0, [r7, r3]
 800c69c:	18fe      	adds	r6, r7, r3
 800c69e:	f7ff ffbb 	bl	800c618 <__hexdig_fun>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d062      	beq.n	800c76c <__gethex+0x12a>
 800c6a6:	4633      	mov	r3, r6
 800c6a8:	7818      	ldrb	r0, [r3, #0]
 800c6aa:	2830      	cmp	r0, #48	; 0x30
 800c6ac:	461f      	mov	r7, r3
 800c6ae:	f103 0301 	add.w	r3, r3, #1
 800c6b2:	d0f9      	beq.n	800c6a8 <__gethex+0x66>
 800c6b4:	f7ff ffb0 	bl	800c618 <__hexdig_fun>
 800c6b8:	fab0 f580 	clz	r5, r0
 800c6bc:	096d      	lsrs	r5, r5, #5
 800c6be:	4634      	mov	r4, r6
 800c6c0:	f04f 0b01 	mov.w	fp, #1
 800c6c4:	463a      	mov	r2, r7
 800c6c6:	4616      	mov	r6, r2
 800c6c8:	3201      	adds	r2, #1
 800c6ca:	7830      	ldrb	r0, [r6, #0]
 800c6cc:	f7ff ffa4 	bl	800c618 <__hexdig_fun>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d1f8      	bne.n	800c6c6 <__gethex+0x84>
 800c6d4:	9a01      	ldr	r2, [sp, #4]
 800c6d6:	9903      	ldr	r1, [sp, #12]
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f001 f940 	bl	800d95e <strncmp>
 800c6de:	b950      	cbnz	r0, 800c6f6 <__gethex+0xb4>
 800c6e0:	b954      	cbnz	r4, 800c6f8 <__gethex+0xb6>
 800c6e2:	9b01      	ldr	r3, [sp, #4]
 800c6e4:	18f4      	adds	r4, r6, r3
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	4616      	mov	r6, r2
 800c6ea:	3201      	adds	r2, #1
 800c6ec:	7830      	ldrb	r0, [r6, #0]
 800c6ee:	f7ff ff93 	bl	800c618 <__hexdig_fun>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d1f8      	bne.n	800c6e8 <__gethex+0xa6>
 800c6f6:	b10c      	cbz	r4, 800c6fc <__gethex+0xba>
 800c6f8:	1ba4      	subs	r4, r4, r6
 800c6fa:	00a4      	lsls	r4, r4, #2
 800c6fc:	7833      	ldrb	r3, [r6, #0]
 800c6fe:	2b50      	cmp	r3, #80	; 0x50
 800c700:	d001      	beq.n	800c706 <__gethex+0xc4>
 800c702:	2b70      	cmp	r3, #112	; 0x70
 800c704:	d140      	bne.n	800c788 <__gethex+0x146>
 800c706:	7873      	ldrb	r3, [r6, #1]
 800c708:	2b2b      	cmp	r3, #43	; 0x2b
 800c70a:	d031      	beq.n	800c770 <__gethex+0x12e>
 800c70c:	2b2d      	cmp	r3, #45	; 0x2d
 800c70e:	d033      	beq.n	800c778 <__gethex+0x136>
 800c710:	1c71      	adds	r1, r6, #1
 800c712:	f04f 0900 	mov.w	r9, #0
 800c716:	7808      	ldrb	r0, [r1, #0]
 800c718:	f7ff ff7e 	bl	800c618 <__hexdig_fun>
 800c71c:	1e43      	subs	r3, r0, #1
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b18      	cmp	r3, #24
 800c722:	d831      	bhi.n	800c788 <__gethex+0x146>
 800c724:	f1a0 0210 	sub.w	r2, r0, #16
 800c728:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c72c:	f7ff ff74 	bl	800c618 <__hexdig_fun>
 800c730:	1e43      	subs	r3, r0, #1
 800c732:	b2db      	uxtb	r3, r3
 800c734:	2b18      	cmp	r3, #24
 800c736:	d922      	bls.n	800c77e <__gethex+0x13c>
 800c738:	f1b9 0f00 	cmp.w	r9, #0
 800c73c:	d000      	beq.n	800c740 <__gethex+0xfe>
 800c73e:	4252      	negs	r2, r2
 800c740:	4414      	add	r4, r2
 800c742:	f8ca 1000 	str.w	r1, [sl]
 800c746:	b30d      	cbz	r5, 800c78c <__gethex+0x14a>
 800c748:	f1bb 0f00 	cmp.w	fp, #0
 800c74c:	bf0c      	ite	eq
 800c74e:	2706      	moveq	r7, #6
 800c750:	2700      	movne	r7, #0
 800c752:	4638      	mov	r0, r7
 800c754:	b00b      	add	sp, #44	; 0x2c
 800c756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75a:	f10b 0b01 	add.w	fp, fp, #1
 800c75e:	e78a      	b.n	800c676 <__gethex+0x34>
 800c760:	2500      	movs	r5, #0
 800c762:	462c      	mov	r4, r5
 800c764:	e7ae      	b.n	800c6c4 <__gethex+0x82>
 800c766:	463e      	mov	r6, r7
 800c768:	2501      	movs	r5, #1
 800c76a:	e7c7      	b.n	800c6fc <__gethex+0xba>
 800c76c:	4604      	mov	r4, r0
 800c76e:	e7fb      	b.n	800c768 <__gethex+0x126>
 800c770:	f04f 0900 	mov.w	r9, #0
 800c774:	1cb1      	adds	r1, r6, #2
 800c776:	e7ce      	b.n	800c716 <__gethex+0xd4>
 800c778:	f04f 0901 	mov.w	r9, #1
 800c77c:	e7fa      	b.n	800c774 <__gethex+0x132>
 800c77e:	230a      	movs	r3, #10
 800c780:	fb03 0202 	mla	r2, r3, r2, r0
 800c784:	3a10      	subs	r2, #16
 800c786:	e7cf      	b.n	800c728 <__gethex+0xe6>
 800c788:	4631      	mov	r1, r6
 800c78a:	e7da      	b.n	800c742 <__gethex+0x100>
 800c78c:	1bf3      	subs	r3, r6, r7
 800c78e:	3b01      	subs	r3, #1
 800c790:	4629      	mov	r1, r5
 800c792:	2b07      	cmp	r3, #7
 800c794:	dc49      	bgt.n	800c82a <__gethex+0x1e8>
 800c796:	9802      	ldr	r0, [sp, #8]
 800c798:	f000 fa87 	bl	800ccaa <_Balloc>
 800c79c:	9b01      	ldr	r3, [sp, #4]
 800c79e:	f100 0914 	add.w	r9, r0, #20
 800c7a2:	f04f 0b00 	mov.w	fp, #0
 800c7a6:	f1c3 0301 	rsb	r3, r3, #1
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	f8cd 9010 	str.w	r9, [sp, #16]
 800c7b0:	46da      	mov	sl, fp
 800c7b2:	9308      	str	r3, [sp, #32]
 800c7b4:	42b7      	cmp	r7, r6
 800c7b6:	d33b      	bcc.n	800c830 <__gethex+0x1ee>
 800c7b8:	9804      	ldr	r0, [sp, #16]
 800c7ba:	f840 ab04 	str.w	sl, [r0], #4
 800c7be:	eba0 0009 	sub.w	r0, r0, r9
 800c7c2:	1080      	asrs	r0, r0, #2
 800c7c4:	6128      	str	r0, [r5, #16]
 800c7c6:	0147      	lsls	r7, r0, #5
 800c7c8:	4650      	mov	r0, sl
 800c7ca:	f000 fb32 	bl	800ce32 <__hi0bits>
 800c7ce:	f8d8 6000 	ldr.w	r6, [r8]
 800c7d2:	1a3f      	subs	r7, r7, r0
 800c7d4:	42b7      	cmp	r7, r6
 800c7d6:	dd64      	ble.n	800c8a2 <__gethex+0x260>
 800c7d8:	1bbf      	subs	r7, r7, r6
 800c7da:	4639      	mov	r1, r7
 800c7dc:	4628      	mov	r0, r5
 800c7de:	f000 fe41 	bl	800d464 <__any_on>
 800c7e2:	4682      	mov	sl, r0
 800c7e4:	b178      	cbz	r0, 800c806 <__gethex+0x1c4>
 800c7e6:	1e7b      	subs	r3, r7, #1
 800c7e8:	1159      	asrs	r1, r3, #5
 800c7ea:	f003 021f 	and.w	r2, r3, #31
 800c7ee:	f04f 0a01 	mov.w	sl, #1
 800c7f2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c7f6:	fa0a f202 	lsl.w	r2, sl, r2
 800c7fa:	420a      	tst	r2, r1
 800c7fc:	d003      	beq.n	800c806 <__gethex+0x1c4>
 800c7fe:	4553      	cmp	r3, sl
 800c800:	dc46      	bgt.n	800c890 <__gethex+0x24e>
 800c802:	f04f 0a02 	mov.w	sl, #2
 800c806:	4639      	mov	r1, r7
 800c808:	4628      	mov	r0, r5
 800c80a:	f7ff fecb 	bl	800c5a4 <rshift>
 800c80e:	443c      	add	r4, r7
 800c810:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c814:	42a3      	cmp	r3, r4
 800c816:	da52      	bge.n	800c8be <__gethex+0x27c>
 800c818:	4629      	mov	r1, r5
 800c81a:	9802      	ldr	r0, [sp, #8]
 800c81c:	f000 fa79 	bl	800cd12 <_Bfree>
 800c820:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c822:	2300      	movs	r3, #0
 800c824:	6013      	str	r3, [r2, #0]
 800c826:	27a3      	movs	r7, #163	; 0xa3
 800c828:	e793      	b.n	800c752 <__gethex+0x110>
 800c82a:	3101      	adds	r1, #1
 800c82c:	105b      	asrs	r3, r3, #1
 800c82e:	e7b0      	b.n	800c792 <__gethex+0x150>
 800c830:	1e73      	subs	r3, r6, #1
 800c832:	9305      	str	r3, [sp, #20]
 800c834:	9a07      	ldr	r2, [sp, #28]
 800c836:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d018      	beq.n	800c870 <__gethex+0x22e>
 800c83e:	f1bb 0f20 	cmp.w	fp, #32
 800c842:	d107      	bne.n	800c854 <__gethex+0x212>
 800c844:	9b04      	ldr	r3, [sp, #16]
 800c846:	f8c3 a000 	str.w	sl, [r3]
 800c84a:	3304      	adds	r3, #4
 800c84c:	f04f 0a00 	mov.w	sl, #0
 800c850:	9304      	str	r3, [sp, #16]
 800c852:	46d3      	mov	fp, sl
 800c854:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c858:	f7ff fede 	bl	800c618 <__hexdig_fun>
 800c85c:	f000 000f 	and.w	r0, r0, #15
 800c860:	fa00 f00b 	lsl.w	r0, r0, fp
 800c864:	ea4a 0a00 	orr.w	sl, sl, r0
 800c868:	f10b 0b04 	add.w	fp, fp, #4
 800c86c:	9b05      	ldr	r3, [sp, #20]
 800c86e:	e00d      	b.n	800c88c <__gethex+0x24a>
 800c870:	9b05      	ldr	r3, [sp, #20]
 800c872:	9a08      	ldr	r2, [sp, #32]
 800c874:	4413      	add	r3, r2
 800c876:	42bb      	cmp	r3, r7
 800c878:	d3e1      	bcc.n	800c83e <__gethex+0x1fc>
 800c87a:	4618      	mov	r0, r3
 800c87c:	9a01      	ldr	r2, [sp, #4]
 800c87e:	9903      	ldr	r1, [sp, #12]
 800c880:	9309      	str	r3, [sp, #36]	; 0x24
 800c882:	f001 f86c 	bl	800d95e <strncmp>
 800c886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c888:	2800      	cmp	r0, #0
 800c88a:	d1d8      	bne.n	800c83e <__gethex+0x1fc>
 800c88c:	461e      	mov	r6, r3
 800c88e:	e791      	b.n	800c7b4 <__gethex+0x172>
 800c890:	1eb9      	subs	r1, r7, #2
 800c892:	4628      	mov	r0, r5
 800c894:	f000 fde6 	bl	800d464 <__any_on>
 800c898:	2800      	cmp	r0, #0
 800c89a:	d0b2      	beq.n	800c802 <__gethex+0x1c0>
 800c89c:	f04f 0a03 	mov.w	sl, #3
 800c8a0:	e7b1      	b.n	800c806 <__gethex+0x1c4>
 800c8a2:	da09      	bge.n	800c8b8 <__gethex+0x276>
 800c8a4:	1bf7      	subs	r7, r6, r7
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	463a      	mov	r2, r7
 800c8aa:	9802      	ldr	r0, [sp, #8]
 800c8ac:	f000 fbfc 	bl	800d0a8 <__lshift>
 800c8b0:	1be4      	subs	r4, r4, r7
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	f100 0914 	add.w	r9, r0, #20
 800c8b8:	f04f 0a00 	mov.w	sl, #0
 800c8bc:	e7a8      	b.n	800c810 <__gethex+0x1ce>
 800c8be:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c8c2:	42a0      	cmp	r0, r4
 800c8c4:	dd6a      	ble.n	800c99c <__gethex+0x35a>
 800c8c6:	1b04      	subs	r4, r0, r4
 800c8c8:	42a6      	cmp	r6, r4
 800c8ca:	dc2e      	bgt.n	800c92a <__gethex+0x2e8>
 800c8cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d022      	beq.n	800c91a <__gethex+0x2d8>
 800c8d4:	2b03      	cmp	r3, #3
 800c8d6:	d024      	beq.n	800c922 <__gethex+0x2e0>
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d115      	bne.n	800c908 <__gethex+0x2c6>
 800c8dc:	42a6      	cmp	r6, r4
 800c8de:	d113      	bne.n	800c908 <__gethex+0x2c6>
 800c8e0:	2e01      	cmp	r6, #1
 800c8e2:	dc0b      	bgt.n	800c8fc <__gethex+0x2ba>
 800c8e4:	9a06      	ldr	r2, [sp, #24]
 800c8e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8ea:	6013      	str	r3, [r2, #0]
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	612b      	str	r3, [r5, #16]
 800c8f0:	f8c9 3000 	str.w	r3, [r9]
 800c8f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8f6:	2762      	movs	r7, #98	; 0x62
 800c8f8:	601d      	str	r5, [r3, #0]
 800c8fa:	e72a      	b.n	800c752 <__gethex+0x110>
 800c8fc:	1e71      	subs	r1, r6, #1
 800c8fe:	4628      	mov	r0, r5
 800c900:	f000 fdb0 	bl	800d464 <__any_on>
 800c904:	2800      	cmp	r0, #0
 800c906:	d1ed      	bne.n	800c8e4 <__gethex+0x2a2>
 800c908:	4629      	mov	r1, r5
 800c90a:	9802      	ldr	r0, [sp, #8]
 800c90c:	f000 fa01 	bl	800cd12 <_Bfree>
 800c910:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c912:	2300      	movs	r3, #0
 800c914:	6013      	str	r3, [r2, #0]
 800c916:	2750      	movs	r7, #80	; 0x50
 800c918:	e71b      	b.n	800c752 <__gethex+0x110>
 800c91a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d0e1      	beq.n	800c8e4 <__gethex+0x2a2>
 800c920:	e7f2      	b.n	800c908 <__gethex+0x2c6>
 800c922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c924:	2b00      	cmp	r3, #0
 800c926:	d1dd      	bne.n	800c8e4 <__gethex+0x2a2>
 800c928:	e7ee      	b.n	800c908 <__gethex+0x2c6>
 800c92a:	1e67      	subs	r7, r4, #1
 800c92c:	f1ba 0f00 	cmp.w	sl, #0
 800c930:	d131      	bne.n	800c996 <__gethex+0x354>
 800c932:	b127      	cbz	r7, 800c93e <__gethex+0x2fc>
 800c934:	4639      	mov	r1, r7
 800c936:	4628      	mov	r0, r5
 800c938:	f000 fd94 	bl	800d464 <__any_on>
 800c93c:	4682      	mov	sl, r0
 800c93e:	117a      	asrs	r2, r7, #5
 800c940:	2301      	movs	r3, #1
 800c942:	f007 071f 	and.w	r7, r7, #31
 800c946:	fa03 f707 	lsl.w	r7, r3, r7
 800c94a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c94e:	4621      	mov	r1, r4
 800c950:	421f      	tst	r7, r3
 800c952:	4628      	mov	r0, r5
 800c954:	bf18      	it	ne
 800c956:	f04a 0a02 	orrne.w	sl, sl, #2
 800c95a:	1b36      	subs	r6, r6, r4
 800c95c:	f7ff fe22 	bl	800c5a4 <rshift>
 800c960:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c964:	2702      	movs	r7, #2
 800c966:	f1ba 0f00 	cmp.w	sl, #0
 800c96a:	d048      	beq.n	800c9fe <__gethex+0x3bc>
 800c96c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c970:	2b02      	cmp	r3, #2
 800c972:	d015      	beq.n	800c9a0 <__gethex+0x35e>
 800c974:	2b03      	cmp	r3, #3
 800c976:	d017      	beq.n	800c9a8 <__gethex+0x366>
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d109      	bne.n	800c990 <__gethex+0x34e>
 800c97c:	f01a 0f02 	tst.w	sl, #2
 800c980:	d006      	beq.n	800c990 <__gethex+0x34e>
 800c982:	f8d9 3000 	ldr.w	r3, [r9]
 800c986:	ea4a 0a03 	orr.w	sl, sl, r3
 800c98a:	f01a 0f01 	tst.w	sl, #1
 800c98e:	d10e      	bne.n	800c9ae <__gethex+0x36c>
 800c990:	f047 0710 	orr.w	r7, r7, #16
 800c994:	e033      	b.n	800c9fe <__gethex+0x3bc>
 800c996:	f04f 0a01 	mov.w	sl, #1
 800c99a:	e7d0      	b.n	800c93e <__gethex+0x2fc>
 800c99c:	2701      	movs	r7, #1
 800c99e:	e7e2      	b.n	800c966 <__gethex+0x324>
 800c9a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9a2:	f1c3 0301 	rsb	r3, r3, #1
 800c9a6:	9315      	str	r3, [sp, #84]	; 0x54
 800c9a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d0f0      	beq.n	800c990 <__gethex+0x34e>
 800c9ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c9b2:	f105 0314 	add.w	r3, r5, #20
 800c9b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c9ba:	eb03 010a 	add.w	r1, r3, sl
 800c9be:	f04f 0c00 	mov.w	ip, #0
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c9cc:	d01c      	beq.n	800ca08 <__gethex+0x3c6>
 800c9ce:	3201      	adds	r2, #1
 800c9d0:	6002      	str	r2, [r0, #0]
 800c9d2:	2f02      	cmp	r7, #2
 800c9d4:	f105 0314 	add.w	r3, r5, #20
 800c9d8:	d138      	bne.n	800ca4c <__gethex+0x40a>
 800c9da:	f8d8 2000 	ldr.w	r2, [r8]
 800c9de:	3a01      	subs	r2, #1
 800c9e0:	42b2      	cmp	r2, r6
 800c9e2:	d10a      	bne.n	800c9fa <__gethex+0x3b8>
 800c9e4:	1171      	asrs	r1, r6, #5
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f006 061f 	and.w	r6, r6, #31
 800c9ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9f0:	fa02 f606 	lsl.w	r6, r2, r6
 800c9f4:	421e      	tst	r6, r3
 800c9f6:	bf18      	it	ne
 800c9f8:	4617      	movne	r7, r2
 800c9fa:	f047 0720 	orr.w	r7, r7, #32
 800c9fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca00:	601d      	str	r5, [r3, #0]
 800ca02:	9b06      	ldr	r3, [sp, #24]
 800ca04:	601c      	str	r4, [r3, #0]
 800ca06:	e6a4      	b.n	800c752 <__gethex+0x110>
 800ca08:	4299      	cmp	r1, r3
 800ca0a:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca0e:	d8d8      	bhi.n	800c9c2 <__gethex+0x380>
 800ca10:	68ab      	ldr	r3, [r5, #8]
 800ca12:	4599      	cmp	r9, r3
 800ca14:	db12      	blt.n	800ca3c <__gethex+0x3fa>
 800ca16:	6869      	ldr	r1, [r5, #4]
 800ca18:	9802      	ldr	r0, [sp, #8]
 800ca1a:	3101      	adds	r1, #1
 800ca1c:	f000 f945 	bl	800ccaa <_Balloc>
 800ca20:	692a      	ldr	r2, [r5, #16]
 800ca22:	3202      	adds	r2, #2
 800ca24:	f105 010c 	add.w	r1, r5, #12
 800ca28:	4683      	mov	fp, r0
 800ca2a:	0092      	lsls	r2, r2, #2
 800ca2c:	300c      	adds	r0, #12
 800ca2e:	f000 f931 	bl	800cc94 <memcpy>
 800ca32:	4629      	mov	r1, r5
 800ca34:	9802      	ldr	r0, [sp, #8]
 800ca36:	f000 f96c 	bl	800cd12 <_Bfree>
 800ca3a:	465d      	mov	r5, fp
 800ca3c:	692b      	ldr	r3, [r5, #16]
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ca44:	612a      	str	r2, [r5, #16]
 800ca46:	2201      	movs	r2, #1
 800ca48:	615a      	str	r2, [r3, #20]
 800ca4a:	e7c2      	b.n	800c9d2 <__gethex+0x390>
 800ca4c:	692a      	ldr	r2, [r5, #16]
 800ca4e:	454a      	cmp	r2, r9
 800ca50:	dd0b      	ble.n	800ca6a <__gethex+0x428>
 800ca52:	2101      	movs	r1, #1
 800ca54:	4628      	mov	r0, r5
 800ca56:	f7ff fda5 	bl	800c5a4 <rshift>
 800ca5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca5e:	3401      	adds	r4, #1
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	f6ff aed9 	blt.w	800c818 <__gethex+0x1d6>
 800ca66:	2701      	movs	r7, #1
 800ca68:	e7c7      	b.n	800c9fa <__gethex+0x3b8>
 800ca6a:	f016 061f 	ands.w	r6, r6, #31
 800ca6e:	d0fa      	beq.n	800ca66 <__gethex+0x424>
 800ca70:	449a      	add	sl, r3
 800ca72:	f1c6 0620 	rsb	r6, r6, #32
 800ca76:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ca7a:	f000 f9da 	bl	800ce32 <__hi0bits>
 800ca7e:	42b0      	cmp	r0, r6
 800ca80:	dbe7      	blt.n	800ca52 <__gethex+0x410>
 800ca82:	e7f0      	b.n	800ca66 <__gethex+0x424>

0800ca84 <L_shift>:
 800ca84:	f1c2 0208 	rsb	r2, r2, #8
 800ca88:	0092      	lsls	r2, r2, #2
 800ca8a:	b570      	push	{r4, r5, r6, lr}
 800ca8c:	f1c2 0620 	rsb	r6, r2, #32
 800ca90:	6843      	ldr	r3, [r0, #4]
 800ca92:	6804      	ldr	r4, [r0, #0]
 800ca94:	fa03 f506 	lsl.w	r5, r3, r6
 800ca98:	432c      	orrs	r4, r5
 800ca9a:	40d3      	lsrs	r3, r2
 800ca9c:	6004      	str	r4, [r0, #0]
 800ca9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800caa2:	4288      	cmp	r0, r1
 800caa4:	d3f4      	bcc.n	800ca90 <L_shift+0xc>
 800caa6:	bd70      	pop	{r4, r5, r6, pc}

0800caa8 <__match>:
 800caa8:	b530      	push	{r4, r5, lr}
 800caaa:	6803      	ldr	r3, [r0, #0]
 800caac:	3301      	adds	r3, #1
 800caae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cab2:	b914      	cbnz	r4, 800caba <__match+0x12>
 800cab4:	6003      	str	r3, [r0, #0]
 800cab6:	2001      	movs	r0, #1
 800cab8:	bd30      	pop	{r4, r5, pc}
 800caba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cabe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cac2:	2d19      	cmp	r5, #25
 800cac4:	bf98      	it	ls
 800cac6:	3220      	addls	r2, #32
 800cac8:	42a2      	cmp	r2, r4
 800caca:	d0f0      	beq.n	800caae <__match+0x6>
 800cacc:	2000      	movs	r0, #0
 800cace:	e7f3      	b.n	800cab8 <__match+0x10>

0800cad0 <__hexnan>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	680b      	ldr	r3, [r1, #0]
 800cad6:	6801      	ldr	r1, [r0, #0]
 800cad8:	115f      	asrs	r7, r3, #5
 800cada:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cade:	f013 031f 	ands.w	r3, r3, #31
 800cae2:	b087      	sub	sp, #28
 800cae4:	bf18      	it	ne
 800cae6:	3704      	addne	r7, #4
 800cae8:	2500      	movs	r5, #0
 800caea:	1f3e      	subs	r6, r7, #4
 800caec:	4682      	mov	sl, r0
 800caee:	4690      	mov	r8, r2
 800caf0:	9301      	str	r3, [sp, #4]
 800caf2:	f847 5c04 	str.w	r5, [r7, #-4]
 800caf6:	46b1      	mov	r9, r6
 800caf8:	4634      	mov	r4, r6
 800cafa:	9502      	str	r5, [sp, #8]
 800cafc:	46ab      	mov	fp, r5
 800cafe:	784a      	ldrb	r2, [r1, #1]
 800cb00:	1c4b      	adds	r3, r1, #1
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	b342      	cbz	r2, 800cb58 <__hexnan+0x88>
 800cb06:	4610      	mov	r0, r2
 800cb08:	9105      	str	r1, [sp, #20]
 800cb0a:	9204      	str	r2, [sp, #16]
 800cb0c:	f7ff fd84 	bl	800c618 <__hexdig_fun>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d143      	bne.n	800cb9c <__hexnan+0xcc>
 800cb14:	9a04      	ldr	r2, [sp, #16]
 800cb16:	9905      	ldr	r1, [sp, #20]
 800cb18:	2a20      	cmp	r2, #32
 800cb1a:	d818      	bhi.n	800cb4e <__hexnan+0x7e>
 800cb1c:	9b02      	ldr	r3, [sp, #8]
 800cb1e:	459b      	cmp	fp, r3
 800cb20:	dd13      	ble.n	800cb4a <__hexnan+0x7a>
 800cb22:	454c      	cmp	r4, r9
 800cb24:	d206      	bcs.n	800cb34 <__hexnan+0x64>
 800cb26:	2d07      	cmp	r5, #7
 800cb28:	dc04      	bgt.n	800cb34 <__hexnan+0x64>
 800cb2a:	462a      	mov	r2, r5
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7ff ffa8 	bl	800ca84 <L_shift>
 800cb34:	4544      	cmp	r4, r8
 800cb36:	d944      	bls.n	800cbc2 <__hexnan+0xf2>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f1a4 0904 	sub.w	r9, r4, #4
 800cb3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb42:	f8cd b008 	str.w	fp, [sp, #8]
 800cb46:	464c      	mov	r4, r9
 800cb48:	461d      	mov	r5, r3
 800cb4a:	9903      	ldr	r1, [sp, #12]
 800cb4c:	e7d7      	b.n	800cafe <__hexnan+0x2e>
 800cb4e:	2a29      	cmp	r2, #41	; 0x29
 800cb50:	d14a      	bne.n	800cbe8 <__hexnan+0x118>
 800cb52:	3102      	adds	r1, #2
 800cb54:	f8ca 1000 	str.w	r1, [sl]
 800cb58:	f1bb 0f00 	cmp.w	fp, #0
 800cb5c:	d044      	beq.n	800cbe8 <__hexnan+0x118>
 800cb5e:	454c      	cmp	r4, r9
 800cb60:	d206      	bcs.n	800cb70 <__hexnan+0xa0>
 800cb62:	2d07      	cmp	r5, #7
 800cb64:	dc04      	bgt.n	800cb70 <__hexnan+0xa0>
 800cb66:	462a      	mov	r2, r5
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f7ff ff8a 	bl	800ca84 <L_shift>
 800cb70:	4544      	cmp	r4, r8
 800cb72:	d928      	bls.n	800cbc6 <__hexnan+0xf6>
 800cb74:	4643      	mov	r3, r8
 800cb76:	f854 2b04 	ldr.w	r2, [r4], #4
 800cb7a:	f843 2b04 	str.w	r2, [r3], #4
 800cb7e:	42a6      	cmp	r6, r4
 800cb80:	d2f9      	bcs.n	800cb76 <__hexnan+0xa6>
 800cb82:	2200      	movs	r2, #0
 800cb84:	f843 2b04 	str.w	r2, [r3], #4
 800cb88:	429e      	cmp	r6, r3
 800cb8a:	d2fb      	bcs.n	800cb84 <__hexnan+0xb4>
 800cb8c:	6833      	ldr	r3, [r6, #0]
 800cb8e:	b91b      	cbnz	r3, 800cb98 <__hexnan+0xc8>
 800cb90:	4546      	cmp	r6, r8
 800cb92:	d127      	bne.n	800cbe4 <__hexnan+0x114>
 800cb94:	2301      	movs	r3, #1
 800cb96:	6033      	str	r3, [r6, #0]
 800cb98:	2005      	movs	r0, #5
 800cb9a:	e026      	b.n	800cbea <__hexnan+0x11a>
 800cb9c:	3501      	adds	r5, #1
 800cb9e:	2d08      	cmp	r5, #8
 800cba0:	f10b 0b01 	add.w	fp, fp, #1
 800cba4:	dd06      	ble.n	800cbb4 <__hexnan+0xe4>
 800cba6:	4544      	cmp	r4, r8
 800cba8:	d9cf      	bls.n	800cb4a <__hexnan+0x7a>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbb0:	2501      	movs	r5, #1
 800cbb2:	3c04      	subs	r4, #4
 800cbb4:	6822      	ldr	r2, [r4, #0]
 800cbb6:	f000 000f 	and.w	r0, r0, #15
 800cbba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cbbe:	6020      	str	r0, [r4, #0]
 800cbc0:	e7c3      	b.n	800cb4a <__hexnan+0x7a>
 800cbc2:	2508      	movs	r5, #8
 800cbc4:	e7c1      	b.n	800cb4a <__hexnan+0x7a>
 800cbc6:	9b01      	ldr	r3, [sp, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d0df      	beq.n	800cb8c <__hexnan+0xbc>
 800cbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd0:	f1c3 0320 	rsb	r3, r3, #32
 800cbd4:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cbdc:	401a      	ands	r2, r3
 800cbde:	f847 2c04 	str.w	r2, [r7, #-4]
 800cbe2:	e7d3      	b.n	800cb8c <__hexnan+0xbc>
 800cbe4:	3e04      	subs	r6, #4
 800cbe6:	e7d1      	b.n	800cb8c <__hexnan+0xbc>
 800cbe8:	2004      	movs	r0, #4
 800cbea:	b007      	add	sp, #28
 800cbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbf0 <__locale_ctype_ptr_l>:
 800cbf0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cbf4:	4770      	bx	lr

0800cbf6 <__localeconv_l>:
 800cbf6:	30f0      	adds	r0, #240	; 0xf0
 800cbf8:	4770      	bx	lr
	...

0800cbfc <_localeconv_r>:
 800cbfc:	4b04      	ldr	r3, [pc, #16]	; (800cc10 <_localeconv_r+0x14>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	6a18      	ldr	r0, [r3, #32]
 800cc02:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <_localeconv_r+0x18>)
 800cc04:	2800      	cmp	r0, #0
 800cc06:	bf08      	it	eq
 800cc08:	4618      	moveq	r0, r3
 800cc0a:	30f0      	adds	r0, #240	; 0xf0
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	2000001c 	.word	0x2000001c
 800cc14:	20000080 	.word	0x20000080

0800cc18 <__swhatbuf_r>:
 800cc18:	b570      	push	{r4, r5, r6, lr}
 800cc1a:	460e      	mov	r6, r1
 800cc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc20:	2900      	cmp	r1, #0
 800cc22:	b096      	sub	sp, #88	; 0x58
 800cc24:	4614      	mov	r4, r2
 800cc26:	461d      	mov	r5, r3
 800cc28:	da07      	bge.n	800cc3a <__swhatbuf_r+0x22>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	89b3      	ldrh	r3, [r6, #12]
 800cc30:	061a      	lsls	r2, r3, #24
 800cc32:	d410      	bmi.n	800cc56 <__swhatbuf_r+0x3e>
 800cc34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc38:	e00e      	b.n	800cc58 <__swhatbuf_r+0x40>
 800cc3a:	466a      	mov	r2, sp
 800cc3c:	f000 fed0 	bl	800d9e0 <_fstat_r>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	dbf2      	blt.n	800cc2a <__swhatbuf_r+0x12>
 800cc44:	9a01      	ldr	r2, [sp, #4]
 800cc46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc4e:	425a      	negs	r2, r3
 800cc50:	415a      	adcs	r2, r3
 800cc52:	602a      	str	r2, [r5, #0]
 800cc54:	e7ee      	b.n	800cc34 <__swhatbuf_r+0x1c>
 800cc56:	2340      	movs	r3, #64	; 0x40
 800cc58:	2000      	movs	r0, #0
 800cc5a:	6023      	str	r3, [r4, #0]
 800cc5c:	b016      	add	sp, #88	; 0x58
 800cc5e:	bd70      	pop	{r4, r5, r6, pc}

0800cc60 <malloc>:
 800cc60:	4b02      	ldr	r3, [pc, #8]	; (800cc6c <malloc+0xc>)
 800cc62:	4601      	mov	r1, r0
 800cc64:	6818      	ldr	r0, [r3, #0]
 800cc66:	f000 bc7b 	b.w	800d560 <_malloc_r>
 800cc6a:	bf00      	nop
 800cc6c:	2000001c 	.word	0x2000001c

0800cc70 <__ascii_mbtowc>:
 800cc70:	b082      	sub	sp, #8
 800cc72:	b901      	cbnz	r1, 800cc76 <__ascii_mbtowc+0x6>
 800cc74:	a901      	add	r1, sp, #4
 800cc76:	b142      	cbz	r2, 800cc8a <__ascii_mbtowc+0x1a>
 800cc78:	b14b      	cbz	r3, 800cc8e <__ascii_mbtowc+0x1e>
 800cc7a:	7813      	ldrb	r3, [r2, #0]
 800cc7c:	600b      	str	r3, [r1, #0]
 800cc7e:	7812      	ldrb	r2, [r2, #0]
 800cc80:	1c10      	adds	r0, r2, #0
 800cc82:	bf18      	it	ne
 800cc84:	2001      	movne	r0, #1
 800cc86:	b002      	add	sp, #8
 800cc88:	4770      	bx	lr
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	e7fb      	b.n	800cc86 <__ascii_mbtowc+0x16>
 800cc8e:	f06f 0001 	mvn.w	r0, #1
 800cc92:	e7f8      	b.n	800cc86 <__ascii_mbtowc+0x16>

0800cc94 <memcpy>:
 800cc94:	b510      	push	{r4, lr}
 800cc96:	1e43      	subs	r3, r0, #1
 800cc98:	440a      	add	r2, r1
 800cc9a:	4291      	cmp	r1, r2
 800cc9c:	d100      	bne.n	800cca0 <memcpy+0xc>
 800cc9e:	bd10      	pop	{r4, pc}
 800cca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cca8:	e7f7      	b.n	800cc9a <memcpy+0x6>

0800ccaa <_Balloc>:
 800ccaa:	b570      	push	{r4, r5, r6, lr}
 800ccac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ccae:	4604      	mov	r4, r0
 800ccb0:	460e      	mov	r6, r1
 800ccb2:	b93d      	cbnz	r5, 800ccc4 <_Balloc+0x1a>
 800ccb4:	2010      	movs	r0, #16
 800ccb6:	f7ff ffd3 	bl	800cc60 <malloc>
 800ccba:	6260      	str	r0, [r4, #36]	; 0x24
 800ccbc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ccc0:	6005      	str	r5, [r0, #0]
 800ccc2:	60c5      	str	r5, [r0, #12]
 800ccc4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ccc6:	68eb      	ldr	r3, [r5, #12]
 800ccc8:	b183      	cbz	r3, 800ccec <_Balloc+0x42>
 800ccca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ccd2:	b9b8      	cbnz	r0, 800cd04 <_Balloc+0x5a>
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	fa01 f506 	lsl.w	r5, r1, r6
 800ccda:	1d6a      	adds	r2, r5, #5
 800ccdc:	0092      	lsls	r2, r2, #2
 800ccde:	4620      	mov	r0, r4
 800cce0:	f000 fbe1 	bl	800d4a6 <_calloc_r>
 800cce4:	b160      	cbz	r0, 800cd00 <_Balloc+0x56>
 800cce6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ccea:	e00e      	b.n	800cd0a <_Balloc+0x60>
 800ccec:	2221      	movs	r2, #33	; 0x21
 800ccee:	2104      	movs	r1, #4
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 fbd8 	bl	800d4a6 <_calloc_r>
 800ccf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccf8:	60e8      	str	r0, [r5, #12]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d1e4      	bne.n	800ccca <_Balloc+0x20>
 800cd00:	2000      	movs	r0, #0
 800cd02:	bd70      	pop	{r4, r5, r6, pc}
 800cd04:	6802      	ldr	r2, [r0, #0]
 800cd06:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd10:	e7f7      	b.n	800cd02 <_Balloc+0x58>

0800cd12 <_Bfree>:
 800cd12:	b570      	push	{r4, r5, r6, lr}
 800cd14:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cd16:	4606      	mov	r6, r0
 800cd18:	460d      	mov	r5, r1
 800cd1a:	b93c      	cbnz	r4, 800cd2c <_Bfree+0x1a>
 800cd1c:	2010      	movs	r0, #16
 800cd1e:	f7ff ff9f 	bl	800cc60 <malloc>
 800cd22:	6270      	str	r0, [r6, #36]	; 0x24
 800cd24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd28:	6004      	str	r4, [r0, #0]
 800cd2a:	60c4      	str	r4, [r0, #12]
 800cd2c:	b13d      	cbz	r5, 800cd3e <_Bfree+0x2c>
 800cd2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cd30:	686a      	ldr	r2, [r5, #4]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd38:	6029      	str	r1, [r5, #0]
 800cd3a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}

0800cd40 <__multadd>:
 800cd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd44:	690d      	ldr	r5, [r1, #16]
 800cd46:	461f      	mov	r7, r3
 800cd48:	4606      	mov	r6, r0
 800cd4a:	460c      	mov	r4, r1
 800cd4c:	f101 0c14 	add.w	ip, r1, #20
 800cd50:	2300      	movs	r3, #0
 800cd52:	f8dc 0000 	ldr.w	r0, [ip]
 800cd56:	b281      	uxth	r1, r0
 800cd58:	fb02 7101 	mla	r1, r2, r1, r7
 800cd5c:	0c0f      	lsrs	r7, r1, #16
 800cd5e:	0c00      	lsrs	r0, r0, #16
 800cd60:	fb02 7000 	mla	r0, r2, r0, r7
 800cd64:	b289      	uxth	r1, r1
 800cd66:	3301      	adds	r3, #1
 800cd68:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cd6c:	429d      	cmp	r5, r3
 800cd6e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cd72:	f84c 1b04 	str.w	r1, [ip], #4
 800cd76:	dcec      	bgt.n	800cd52 <__multadd+0x12>
 800cd78:	b1d7      	cbz	r7, 800cdb0 <__multadd+0x70>
 800cd7a:	68a3      	ldr	r3, [r4, #8]
 800cd7c:	42ab      	cmp	r3, r5
 800cd7e:	dc12      	bgt.n	800cda6 <__multadd+0x66>
 800cd80:	6861      	ldr	r1, [r4, #4]
 800cd82:	4630      	mov	r0, r6
 800cd84:	3101      	adds	r1, #1
 800cd86:	f7ff ff90 	bl	800ccaa <_Balloc>
 800cd8a:	6922      	ldr	r2, [r4, #16]
 800cd8c:	3202      	adds	r2, #2
 800cd8e:	f104 010c 	add.w	r1, r4, #12
 800cd92:	4680      	mov	r8, r0
 800cd94:	0092      	lsls	r2, r2, #2
 800cd96:	300c      	adds	r0, #12
 800cd98:	f7ff ff7c 	bl	800cc94 <memcpy>
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	4630      	mov	r0, r6
 800cda0:	f7ff ffb7 	bl	800cd12 <_Bfree>
 800cda4:	4644      	mov	r4, r8
 800cda6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdaa:	3501      	adds	r5, #1
 800cdac:	615f      	str	r7, [r3, #20]
 800cdae:	6125      	str	r5, [r4, #16]
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cdb6 <__s2b>:
 800cdb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdba:	460c      	mov	r4, r1
 800cdbc:	4615      	mov	r5, r2
 800cdbe:	461f      	mov	r7, r3
 800cdc0:	2209      	movs	r2, #9
 800cdc2:	3308      	adds	r3, #8
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdca:	2100      	movs	r1, #0
 800cdcc:	2201      	movs	r2, #1
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	db20      	blt.n	800ce14 <__s2b+0x5e>
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7ff ff69 	bl	800ccaa <_Balloc>
 800cdd8:	9b08      	ldr	r3, [sp, #32]
 800cdda:	6143      	str	r3, [r0, #20]
 800cddc:	2d09      	cmp	r5, #9
 800cdde:	f04f 0301 	mov.w	r3, #1
 800cde2:	6103      	str	r3, [r0, #16]
 800cde4:	dd19      	ble.n	800ce1a <__s2b+0x64>
 800cde6:	f104 0809 	add.w	r8, r4, #9
 800cdea:	46c1      	mov	r9, r8
 800cdec:	442c      	add	r4, r5
 800cdee:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	3b30      	subs	r3, #48	; 0x30
 800cdf6:	220a      	movs	r2, #10
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	f7ff ffa1 	bl	800cd40 <__multadd>
 800cdfe:	45a1      	cmp	r9, r4
 800ce00:	d1f5      	bne.n	800cdee <__s2b+0x38>
 800ce02:	eb08 0405 	add.w	r4, r8, r5
 800ce06:	3c08      	subs	r4, #8
 800ce08:	1b2d      	subs	r5, r5, r4
 800ce0a:	1963      	adds	r3, r4, r5
 800ce0c:	42bb      	cmp	r3, r7
 800ce0e:	db07      	blt.n	800ce20 <__s2b+0x6a>
 800ce10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce14:	0052      	lsls	r2, r2, #1
 800ce16:	3101      	adds	r1, #1
 800ce18:	e7d9      	b.n	800cdce <__s2b+0x18>
 800ce1a:	340a      	adds	r4, #10
 800ce1c:	2509      	movs	r5, #9
 800ce1e:	e7f3      	b.n	800ce08 <__s2b+0x52>
 800ce20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce24:	4601      	mov	r1, r0
 800ce26:	3b30      	subs	r3, #48	; 0x30
 800ce28:	220a      	movs	r2, #10
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7ff ff88 	bl	800cd40 <__multadd>
 800ce30:	e7eb      	b.n	800ce0a <__s2b+0x54>

0800ce32 <__hi0bits>:
 800ce32:	0c02      	lsrs	r2, r0, #16
 800ce34:	0412      	lsls	r2, r2, #16
 800ce36:	4603      	mov	r3, r0
 800ce38:	b9b2      	cbnz	r2, 800ce68 <__hi0bits+0x36>
 800ce3a:	0403      	lsls	r3, r0, #16
 800ce3c:	2010      	movs	r0, #16
 800ce3e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ce42:	bf04      	itt	eq
 800ce44:	021b      	lsleq	r3, r3, #8
 800ce46:	3008      	addeq	r0, #8
 800ce48:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ce4c:	bf04      	itt	eq
 800ce4e:	011b      	lsleq	r3, r3, #4
 800ce50:	3004      	addeq	r0, #4
 800ce52:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ce56:	bf04      	itt	eq
 800ce58:	009b      	lsleq	r3, r3, #2
 800ce5a:	3002      	addeq	r0, #2
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	db06      	blt.n	800ce6e <__hi0bits+0x3c>
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	d503      	bpl.n	800ce6c <__hi0bits+0x3a>
 800ce64:	3001      	adds	r0, #1
 800ce66:	4770      	bx	lr
 800ce68:	2000      	movs	r0, #0
 800ce6a:	e7e8      	b.n	800ce3e <__hi0bits+0xc>
 800ce6c:	2020      	movs	r0, #32
 800ce6e:	4770      	bx	lr

0800ce70 <__lo0bits>:
 800ce70:	6803      	ldr	r3, [r0, #0]
 800ce72:	f013 0207 	ands.w	r2, r3, #7
 800ce76:	4601      	mov	r1, r0
 800ce78:	d00b      	beq.n	800ce92 <__lo0bits+0x22>
 800ce7a:	07da      	lsls	r2, r3, #31
 800ce7c:	d423      	bmi.n	800cec6 <__lo0bits+0x56>
 800ce7e:	0798      	lsls	r0, r3, #30
 800ce80:	bf49      	itett	mi
 800ce82:	085b      	lsrmi	r3, r3, #1
 800ce84:	089b      	lsrpl	r3, r3, #2
 800ce86:	2001      	movmi	r0, #1
 800ce88:	600b      	strmi	r3, [r1, #0]
 800ce8a:	bf5c      	itt	pl
 800ce8c:	600b      	strpl	r3, [r1, #0]
 800ce8e:	2002      	movpl	r0, #2
 800ce90:	4770      	bx	lr
 800ce92:	b298      	uxth	r0, r3
 800ce94:	b9a8      	cbnz	r0, 800cec2 <__lo0bits+0x52>
 800ce96:	0c1b      	lsrs	r3, r3, #16
 800ce98:	2010      	movs	r0, #16
 800ce9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ce9e:	bf04      	itt	eq
 800cea0:	0a1b      	lsreq	r3, r3, #8
 800cea2:	3008      	addeq	r0, #8
 800cea4:	071a      	lsls	r2, r3, #28
 800cea6:	bf04      	itt	eq
 800cea8:	091b      	lsreq	r3, r3, #4
 800ceaa:	3004      	addeq	r0, #4
 800ceac:	079a      	lsls	r2, r3, #30
 800ceae:	bf04      	itt	eq
 800ceb0:	089b      	lsreq	r3, r3, #2
 800ceb2:	3002      	addeq	r0, #2
 800ceb4:	07da      	lsls	r2, r3, #31
 800ceb6:	d402      	bmi.n	800cebe <__lo0bits+0x4e>
 800ceb8:	085b      	lsrs	r3, r3, #1
 800ceba:	d006      	beq.n	800ceca <__lo0bits+0x5a>
 800cebc:	3001      	adds	r0, #1
 800cebe:	600b      	str	r3, [r1, #0]
 800cec0:	4770      	bx	lr
 800cec2:	4610      	mov	r0, r2
 800cec4:	e7e9      	b.n	800ce9a <__lo0bits+0x2a>
 800cec6:	2000      	movs	r0, #0
 800cec8:	4770      	bx	lr
 800ceca:	2020      	movs	r0, #32
 800cecc:	4770      	bx	lr

0800cece <__i2b>:
 800cece:	b510      	push	{r4, lr}
 800ced0:	460c      	mov	r4, r1
 800ced2:	2101      	movs	r1, #1
 800ced4:	f7ff fee9 	bl	800ccaa <_Balloc>
 800ced8:	2201      	movs	r2, #1
 800ceda:	6144      	str	r4, [r0, #20]
 800cedc:	6102      	str	r2, [r0, #16]
 800cede:	bd10      	pop	{r4, pc}

0800cee0 <__multiply>:
 800cee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee4:	4614      	mov	r4, r2
 800cee6:	690a      	ldr	r2, [r1, #16]
 800cee8:	6923      	ldr	r3, [r4, #16]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	bfb8      	it	lt
 800ceee:	460b      	movlt	r3, r1
 800cef0:	4688      	mov	r8, r1
 800cef2:	bfbc      	itt	lt
 800cef4:	46a0      	movlt	r8, r4
 800cef6:	461c      	movlt	r4, r3
 800cef8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cefc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cf00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf08:	eb07 0609 	add.w	r6, r7, r9
 800cf0c:	42b3      	cmp	r3, r6
 800cf0e:	bfb8      	it	lt
 800cf10:	3101      	addlt	r1, #1
 800cf12:	f7ff feca 	bl	800ccaa <_Balloc>
 800cf16:	f100 0514 	add.w	r5, r0, #20
 800cf1a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cf1e:	462b      	mov	r3, r5
 800cf20:	2200      	movs	r2, #0
 800cf22:	4573      	cmp	r3, lr
 800cf24:	d316      	bcc.n	800cf54 <__multiply+0x74>
 800cf26:	f104 0214 	add.w	r2, r4, #20
 800cf2a:	f108 0114 	add.w	r1, r8, #20
 800cf2e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cf32:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	9b00      	ldr	r3, [sp, #0]
 800cf3a:	9201      	str	r2, [sp, #4]
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d80c      	bhi.n	800cf5a <__multiply+0x7a>
 800cf40:	2e00      	cmp	r6, #0
 800cf42:	dd03      	ble.n	800cf4c <__multiply+0x6c>
 800cf44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d05d      	beq.n	800d008 <__multiply+0x128>
 800cf4c:	6106      	str	r6, [r0, #16]
 800cf4e:	b003      	add	sp, #12
 800cf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf54:	f843 2b04 	str.w	r2, [r3], #4
 800cf58:	e7e3      	b.n	800cf22 <__multiply+0x42>
 800cf5a:	f8b2 b000 	ldrh.w	fp, [r2]
 800cf5e:	f1bb 0f00 	cmp.w	fp, #0
 800cf62:	d023      	beq.n	800cfac <__multiply+0xcc>
 800cf64:	4689      	mov	r9, r1
 800cf66:	46ac      	mov	ip, r5
 800cf68:	f04f 0800 	mov.w	r8, #0
 800cf6c:	f859 4b04 	ldr.w	r4, [r9], #4
 800cf70:	f8dc a000 	ldr.w	sl, [ip]
 800cf74:	b2a3      	uxth	r3, r4
 800cf76:	fa1f fa8a 	uxth.w	sl, sl
 800cf7a:	fb0b a303 	mla	r3, fp, r3, sl
 800cf7e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cf82:	f8dc 4000 	ldr.w	r4, [ip]
 800cf86:	4443      	add	r3, r8
 800cf88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cf8c:	fb0b 840a 	mla	r4, fp, sl, r8
 800cf90:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cf94:	46e2      	mov	sl, ip
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cf9c:	454f      	cmp	r7, r9
 800cf9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cfa2:	f84a 3b04 	str.w	r3, [sl], #4
 800cfa6:	d82b      	bhi.n	800d000 <__multiply+0x120>
 800cfa8:	f8cc 8004 	str.w	r8, [ip, #4]
 800cfac:	9b01      	ldr	r3, [sp, #4]
 800cfae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cfb2:	3204      	adds	r2, #4
 800cfb4:	f1ba 0f00 	cmp.w	sl, #0
 800cfb8:	d020      	beq.n	800cffc <__multiply+0x11c>
 800cfba:	682b      	ldr	r3, [r5, #0]
 800cfbc:	4689      	mov	r9, r1
 800cfbe:	46a8      	mov	r8, r5
 800cfc0:	f04f 0b00 	mov.w	fp, #0
 800cfc4:	f8b9 c000 	ldrh.w	ip, [r9]
 800cfc8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cfcc:	fb0a 440c 	mla	r4, sl, ip, r4
 800cfd0:	445c      	add	r4, fp
 800cfd2:	46c4      	mov	ip, r8
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cfda:	f84c 3b04 	str.w	r3, [ip], #4
 800cfde:	f859 3b04 	ldr.w	r3, [r9], #4
 800cfe2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cfe6:	0c1b      	lsrs	r3, r3, #16
 800cfe8:	fb0a b303 	mla	r3, sl, r3, fp
 800cfec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cff0:	454f      	cmp	r7, r9
 800cff2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cff6:	d805      	bhi.n	800d004 <__multiply+0x124>
 800cff8:	f8c8 3004 	str.w	r3, [r8, #4]
 800cffc:	3504      	adds	r5, #4
 800cffe:	e79b      	b.n	800cf38 <__multiply+0x58>
 800d000:	46d4      	mov	ip, sl
 800d002:	e7b3      	b.n	800cf6c <__multiply+0x8c>
 800d004:	46e0      	mov	r8, ip
 800d006:	e7dd      	b.n	800cfc4 <__multiply+0xe4>
 800d008:	3e01      	subs	r6, #1
 800d00a:	e799      	b.n	800cf40 <__multiply+0x60>

0800d00c <__pow5mult>:
 800d00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d010:	4615      	mov	r5, r2
 800d012:	f012 0203 	ands.w	r2, r2, #3
 800d016:	4606      	mov	r6, r0
 800d018:	460f      	mov	r7, r1
 800d01a:	d007      	beq.n	800d02c <__pow5mult+0x20>
 800d01c:	3a01      	subs	r2, #1
 800d01e:	4c21      	ldr	r4, [pc, #132]	; (800d0a4 <__pow5mult+0x98>)
 800d020:	2300      	movs	r3, #0
 800d022:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d026:	f7ff fe8b 	bl	800cd40 <__multadd>
 800d02a:	4607      	mov	r7, r0
 800d02c:	10ad      	asrs	r5, r5, #2
 800d02e:	d035      	beq.n	800d09c <__pow5mult+0x90>
 800d030:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d032:	b93c      	cbnz	r4, 800d044 <__pow5mult+0x38>
 800d034:	2010      	movs	r0, #16
 800d036:	f7ff fe13 	bl	800cc60 <malloc>
 800d03a:	6270      	str	r0, [r6, #36]	; 0x24
 800d03c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d040:	6004      	str	r4, [r0, #0]
 800d042:	60c4      	str	r4, [r0, #12]
 800d044:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d04c:	b94c      	cbnz	r4, 800d062 <__pow5mult+0x56>
 800d04e:	f240 2171 	movw	r1, #625	; 0x271
 800d052:	4630      	mov	r0, r6
 800d054:	f7ff ff3b 	bl	800cece <__i2b>
 800d058:	2300      	movs	r3, #0
 800d05a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d05e:	4604      	mov	r4, r0
 800d060:	6003      	str	r3, [r0, #0]
 800d062:	f04f 0800 	mov.w	r8, #0
 800d066:	07eb      	lsls	r3, r5, #31
 800d068:	d50a      	bpl.n	800d080 <__pow5mult+0x74>
 800d06a:	4639      	mov	r1, r7
 800d06c:	4622      	mov	r2, r4
 800d06e:	4630      	mov	r0, r6
 800d070:	f7ff ff36 	bl	800cee0 <__multiply>
 800d074:	4639      	mov	r1, r7
 800d076:	4681      	mov	r9, r0
 800d078:	4630      	mov	r0, r6
 800d07a:	f7ff fe4a 	bl	800cd12 <_Bfree>
 800d07e:	464f      	mov	r7, r9
 800d080:	106d      	asrs	r5, r5, #1
 800d082:	d00b      	beq.n	800d09c <__pow5mult+0x90>
 800d084:	6820      	ldr	r0, [r4, #0]
 800d086:	b938      	cbnz	r0, 800d098 <__pow5mult+0x8c>
 800d088:	4622      	mov	r2, r4
 800d08a:	4621      	mov	r1, r4
 800d08c:	4630      	mov	r0, r6
 800d08e:	f7ff ff27 	bl	800cee0 <__multiply>
 800d092:	6020      	str	r0, [r4, #0]
 800d094:	f8c0 8000 	str.w	r8, [r0]
 800d098:	4604      	mov	r4, r0
 800d09a:	e7e4      	b.n	800d066 <__pow5mult+0x5a>
 800d09c:	4638      	mov	r0, r7
 800d09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a2:	bf00      	nop
 800d0a4:	0800df08 	.word	0x0800df08

0800d0a8 <__lshift>:
 800d0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0b2:	6923      	ldr	r3, [r4, #16]
 800d0b4:	6849      	ldr	r1, [r1, #4]
 800d0b6:	eb0a 0903 	add.w	r9, sl, r3
 800d0ba:	68a3      	ldr	r3, [r4, #8]
 800d0bc:	4607      	mov	r7, r0
 800d0be:	4616      	mov	r6, r2
 800d0c0:	f109 0501 	add.w	r5, r9, #1
 800d0c4:	42ab      	cmp	r3, r5
 800d0c6:	db32      	blt.n	800d12e <__lshift+0x86>
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	f7ff fdee 	bl	800ccaa <_Balloc>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	4680      	mov	r8, r0
 800d0d2:	f100 0114 	add.w	r1, r0, #20
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	4553      	cmp	r3, sl
 800d0da:	db2b      	blt.n	800d134 <__lshift+0x8c>
 800d0dc:	6920      	ldr	r0, [r4, #16]
 800d0de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0e2:	f104 0314 	add.w	r3, r4, #20
 800d0e6:	f016 021f 	ands.w	r2, r6, #31
 800d0ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0f2:	d025      	beq.n	800d140 <__lshift+0x98>
 800d0f4:	f1c2 0e20 	rsb	lr, r2, #32
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	681e      	ldr	r6, [r3, #0]
 800d0fc:	468a      	mov	sl, r1
 800d0fe:	4096      	lsls	r6, r2
 800d100:	4330      	orrs	r0, r6
 800d102:	f84a 0b04 	str.w	r0, [sl], #4
 800d106:	f853 0b04 	ldr.w	r0, [r3], #4
 800d10a:	459c      	cmp	ip, r3
 800d10c:	fa20 f00e 	lsr.w	r0, r0, lr
 800d110:	d814      	bhi.n	800d13c <__lshift+0x94>
 800d112:	6048      	str	r0, [r1, #4]
 800d114:	b108      	cbz	r0, 800d11a <__lshift+0x72>
 800d116:	f109 0502 	add.w	r5, r9, #2
 800d11a:	3d01      	subs	r5, #1
 800d11c:	4638      	mov	r0, r7
 800d11e:	f8c8 5010 	str.w	r5, [r8, #16]
 800d122:	4621      	mov	r1, r4
 800d124:	f7ff fdf5 	bl	800cd12 <_Bfree>
 800d128:	4640      	mov	r0, r8
 800d12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12e:	3101      	adds	r1, #1
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	e7c7      	b.n	800d0c4 <__lshift+0x1c>
 800d134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d138:	3301      	adds	r3, #1
 800d13a:	e7cd      	b.n	800d0d8 <__lshift+0x30>
 800d13c:	4651      	mov	r1, sl
 800d13e:	e7dc      	b.n	800d0fa <__lshift+0x52>
 800d140:	3904      	subs	r1, #4
 800d142:	f853 2b04 	ldr.w	r2, [r3], #4
 800d146:	f841 2f04 	str.w	r2, [r1, #4]!
 800d14a:	459c      	cmp	ip, r3
 800d14c:	d8f9      	bhi.n	800d142 <__lshift+0x9a>
 800d14e:	e7e4      	b.n	800d11a <__lshift+0x72>

0800d150 <__mcmp>:
 800d150:	6903      	ldr	r3, [r0, #16]
 800d152:	690a      	ldr	r2, [r1, #16]
 800d154:	1a9b      	subs	r3, r3, r2
 800d156:	b530      	push	{r4, r5, lr}
 800d158:	d10c      	bne.n	800d174 <__mcmp+0x24>
 800d15a:	0092      	lsls	r2, r2, #2
 800d15c:	3014      	adds	r0, #20
 800d15e:	3114      	adds	r1, #20
 800d160:	1884      	adds	r4, r0, r2
 800d162:	4411      	add	r1, r2
 800d164:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d168:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d16c:	4295      	cmp	r5, r2
 800d16e:	d003      	beq.n	800d178 <__mcmp+0x28>
 800d170:	d305      	bcc.n	800d17e <__mcmp+0x2e>
 800d172:	2301      	movs	r3, #1
 800d174:	4618      	mov	r0, r3
 800d176:	bd30      	pop	{r4, r5, pc}
 800d178:	42a0      	cmp	r0, r4
 800d17a:	d3f3      	bcc.n	800d164 <__mcmp+0x14>
 800d17c:	e7fa      	b.n	800d174 <__mcmp+0x24>
 800d17e:	f04f 33ff 	mov.w	r3, #4294967295
 800d182:	e7f7      	b.n	800d174 <__mcmp+0x24>

0800d184 <__mdiff>:
 800d184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d188:	460d      	mov	r5, r1
 800d18a:	4607      	mov	r7, r0
 800d18c:	4611      	mov	r1, r2
 800d18e:	4628      	mov	r0, r5
 800d190:	4614      	mov	r4, r2
 800d192:	f7ff ffdd 	bl	800d150 <__mcmp>
 800d196:	1e06      	subs	r6, r0, #0
 800d198:	d108      	bne.n	800d1ac <__mdiff+0x28>
 800d19a:	4631      	mov	r1, r6
 800d19c:	4638      	mov	r0, r7
 800d19e:	f7ff fd84 	bl	800ccaa <_Balloc>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ac:	bfa4      	itt	ge
 800d1ae:	4623      	movge	r3, r4
 800d1b0:	462c      	movge	r4, r5
 800d1b2:	4638      	mov	r0, r7
 800d1b4:	6861      	ldr	r1, [r4, #4]
 800d1b6:	bfa6      	itte	ge
 800d1b8:	461d      	movge	r5, r3
 800d1ba:	2600      	movge	r6, #0
 800d1bc:	2601      	movlt	r6, #1
 800d1be:	f7ff fd74 	bl	800ccaa <_Balloc>
 800d1c2:	692b      	ldr	r3, [r5, #16]
 800d1c4:	60c6      	str	r6, [r0, #12]
 800d1c6:	6926      	ldr	r6, [r4, #16]
 800d1c8:	f105 0914 	add.w	r9, r5, #20
 800d1cc:	f104 0214 	add.w	r2, r4, #20
 800d1d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d1d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d1d8:	f100 0514 	add.w	r5, r0, #20
 800d1dc:	f04f 0e00 	mov.w	lr, #0
 800d1e0:	f852 ab04 	ldr.w	sl, [r2], #4
 800d1e4:	f859 4b04 	ldr.w	r4, [r9], #4
 800d1e8:	fa1e f18a 	uxtah	r1, lr, sl
 800d1ec:	b2a3      	uxth	r3, r4
 800d1ee:	1ac9      	subs	r1, r1, r3
 800d1f0:	0c23      	lsrs	r3, r4, #16
 800d1f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d1f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d1fa:	b289      	uxth	r1, r1
 800d1fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d200:	45c8      	cmp	r8, r9
 800d202:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d206:	4694      	mov	ip, r2
 800d208:	f845 3b04 	str.w	r3, [r5], #4
 800d20c:	d8e8      	bhi.n	800d1e0 <__mdiff+0x5c>
 800d20e:	45bc      	cmp	ip, r7
 800d210:	d304      	bcc.n	800d21c <__mdiff+0x98>
 800d212:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d216:	b183      	cbz	r3, 800d23a <__mdiff+0xb6>
 800d218:	6106      	str	r6, [r0, #16]
 800d21a:	e7c5      	b.n	800d1a8 <__mdiff+0x24>
 800d21c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d220:	fa1e f381 	uxtah	r3, lr, r1
 800d224:	141a      	asrs	r2, r3, #16
 800d226:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d230:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d234:	f845 3b04 	str.w	r3, [r5], #4
 800d238:	e7e9      	b.n	800d20e <__mdiff+0x8a>
 800d23a:	3e01      	subs	r6, #1
 800d23c:	e7e9      	b.n	800d212 <__mdiff+0x8e>
	...

0800d240 <__ulp>:
 800d240:	4b12      	ldr	r3, [pc, #72]	; (800d28c <__ulp+0x4c>)
 800d242:	ee10 2a90 	vmov	r2, s1
 800d246:	401a      	ands	r2, r3
 800d248:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	dd04      	ble.n	800d25a <__ulp+0x1a>
 800d250:	2000      	movs	r0, #0
 800d252:	4619      	mov	r1, r3
 800d254:	ec41 0b10 	vmov	d0, r0, r1
 800d258:	4770      	bx	lr
 800d25a:	425b      	negs	r3, r3
 800d25c:	151b      	asrs	r3, r3, #20
 800d25e:	2b13      	cmp	r3, #19
 800d260:	f04f 0000 	mov.w	r0, #0
 800d264:	f04f 0100 	mov.w	r1, #0
 800d268:	dc04      	bgt.n	800d274 <__ulp+0x34>
 800d26a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d26e:	fa42 f103 	asr.w	r1, r2, r3
 800d272:	e7ef      	b.n	800d254 <__ulp+0x14>
 800d274:	3b14      	subs	r3, #20
 800d276:	2b1e      	cmp	r3, #30
 800d278:	f04f 0201 	mov.w	r2, #1
 800d27c:	bfda      	itte	le
 800d27e:	f1c3 031f 	rsble	r3, r3, #31
 800d282:	fa02 f303 	lslle.w	r3, r2, r3
 800d286:	4613      	movgt	r3, r2
 800d288:	4618      	mov	r0, r3
 800d28a:	e7e3      	b.n	800d254 <__ulp+0x14>
 800d28c:	7ff00000 	.word	0x7ff00000

0800d290 <__b2d>:
 800d290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d292:	6905      	ldr	r5, [r0, #16]
 800d294:	f100 0714 	add.w	r7, r0, #20
 800d298:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d29c:	1f2e      	subs	r6, r5, #4
 800d29e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f7ff fdc5 	bl	800ce32 <__hi0bits>
 800d2a8:	f1c0 0320 	rsb	r3, r0, #32
 800d2ac:	280a      	cmp	r0, #10
 800d2ae:	600b      	str	r3, [r1, #0]
 800d2b0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d328 <__b2d+0x98>
 800d2b4:	dc14      	bgt.n	800d2e0 <__b2d+0x50>
 800d2b6:	f1c0 0e0b 	rsb	lr, r0, #11
 800d2ba:	fa24 f10e 	lsr.w	r1, r4, lr
 800d2be:	42b7      	cmp	r7, r6
 800d2c0:	ea41 030c 	orr.w	r3, r1, ip
 800d2c4:	bf34      	ite	cc
 800d2c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d2ca:	2100      	movcs	r1, #0
 800d2cc:	3015      	adds	r0, #21
 800d2ce:	fa04 f000 	lsl.w	r0, r4, r0
 800d2d2:	fa21 f10e 	lsr.w	r1, r1, lr
 800d2d6:	ea40 0201 	orr.w	r2, r0, r1
 800d2da:	ec43 2b10 	vmov	d0, r2, r3
 800d2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2e0:	42b7      	cmp	r7, r6
 800d2e2:	bf3a      	itte	cc
 800d2e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d2e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d2ec:	2100      	movcs	r1, #0
 800d2ee:	380b      	subs	r0, #11
 800d2f0:	d015      	beq.n	800d31e <__b2d+0x8e>
 800d2f2:	4084      	lsls	r4, r0
 800d2f4:	f1c0 0520 	rsb	r5, r0, #32
 800d2f8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d2fc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d300:	42be      	cmp	r6, r7
 800d302:	fa21 fc05 	lsr.w	ip, r1, r5
 800d306:	ea44 030c 	orr.w	r3, r4, ip
 800d30a:	bf8c      	ite	hi
 800d30c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d310:	2400      	movls	r4, #0
 800d312:	fa01 f000 	lsl.w	r0, r1, r0
 800d316:	40ec      	lsrs	r4, r5
 800d318:	ea40 0204 	orr.w	r2, r0, r4
 800d31c:	e7dd      	b.n	800d2da <__b2d+0x4a>
 800d31e:	ea44 030c 	orr.w	r3, r4, ip
 800d322:	460a      	mov	r2, r1
 800d324:	e7d9      	b.n	800d2da <__b2d+0x4a>
 800d326:	bf00      	nop
 800d328:	3ff00000 	.word	0x3ff00000

0800d32c <__d2b>:
 800d32c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d330:	460e      	mov	r6, r1
 800d332:	2101      	movs	r1, #1
 800d334:	ec59 8b10 	vmov	r8, r9, d0
 800d338:	4615      	mov	r5, r2
 800d33a:	f7ff fcb6 	bl	800ccaa <_Balloc>
 800d33e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d342:	4607      	mov	r7, r0
 800d344:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d348:	bb34      	cbnz	r4, 800d398 <__d2b+0x6c>
 800d34a:	9301      	str	r3, [sp, #4]
 800d34c:	f1b8 0300 	subs.w	r3, r8, #0
 800d350:	d027      	beq.n	800d3a2 <__d2b+0x76>
 800d352:	a802      	add	r0, sp, #8
 800d354:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d358:	f7ff fd8a 	bl	800ce70 <__lo0bits>
 800d35c:	9900      	ldr	r1, [sp, #0]
 800d35e:	b1f0      	cbz	r0, 800d39e <__d2b+0x72>
 800d360:	9a01      	ldr	r2, [sp, #4]
 800d362:	f1c0 0320 	rsb	r3, r0, #32
 800d366:	fa02 f303 	lsl.w	r3, r2, r3
 800d36a:	430b      	orrs	r3, r1
 800d36c:	40c2      	lsrs	r2, r0
 800d36e:	617b      	str	r3, [r7, #20]
 800d370:	9201      	str	r2, [sp, #4]
 800d372:	9b01      	ldr	r3, [sp, #4]
 800d374:	61bb      	str	r3, [r7, #24]
 800d376:	2b00      	cmp	r3, #0
 800d378:	bf14      	ite	ne
 800d37a:	2102      	movne	r1, #2
 800d37c:	2101      	moveq	r1, #1
 800d37e:	6139      	str	r1, [r7, #16]
 800d380:	b1c4      	cbz	r4, 800d3b4 <__d2b+0x88>
 800d382:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d386:	4404      	add	r4, r0
 800d388:	6034      	str	r4, [r6, #0]
 800d38a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d38e:	6028      	str	r0, [r5, #0]
 800d390:	4638      	mov	r0, r7
 800d392:	b003      	add	sp, #12
 800d394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d39c:	e7d5      	b.n	800d34a <__d2b+0x1e>
 800d39e:	6179      	str	r1, [r7, #20]
 800d3a0:	e7e7      	b.n	800d372 <__d2b+0x46>
 800d3a2:	a801      	add	r0, sp, #4
 800d3a4:	f7ff fd64 	bl	800ce70 <__lo0bits>
 800d3a8:	9b01      	ldr	r3, [sp, #4]
 800d3aa:	617b      	str	r3, [r7, #20]
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	6139      	str	r1, [r7, #16]
 800d3b0:	3020      	adds	r0, #32
 800d3b2:	e7e5      	b.n	800d380 <__d2b+0x54>
 800d3b4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d3b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3bc:	6030      	str	r0, [r6, #0]
 800d3be:	6918      	ldr	r0, [r3, #16]
 800d3c0:	f7ff fd37 	bl	800ce32 <__hi0bits>
 800d3c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d3c8:	e7e1      	b.n	800d38e <__d2b+0x62>

0800d3ca <__ratio>:
 800d3ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ce:	4688      	mov	r8, r1
 800d3d0:	4669      	mov	r1, sp
 800d3d2:	4681      	mov	r9, r0
 800d3d4:	f7ff ff5c 	bl	800d290 <__b2d>
 800d3d8:	a901      	add	r1, sp, #4
 800d3da:	4640      	mov	r0, r8
 800d3dc:	ec57 6b10 	vmov	r6, r7, d0
 800d3e0:	f7ff ff56 	bl	800d290 <__b2d>
 800d3e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d3ec:	eba3 0c02 	sub.w	ip, r3, r2
 800d3f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d3f4:	1a9b      	subs	r3, r3, r2
 800d3f6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d3fa:	ec5b ab10 	vmov	sl, fp, d0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	bfce      	itee	gt
 800d402:	463a      	movgt	r2, r7
 800d404:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d408:	465a      	movle	r2, fp
 800d40a:	4659      	mov	r1, fp
 800d40c:	463d      	mov	r5, r7
 800d40e:	bfd4      	ite	le
 800d410:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d414:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d418:	4630      	mov	r0, r6
 800d41a:	ee10 2a10 	vmov	r2, s0
 800d41e:	460b      	mov	r3, r1
 800d420:	4629      	mov	r1, r5
 800d422:	f7f3 fa13 	bl	800084c <__aeabi_ddiv>
 800d426:	ec41 0b10 	vmov	d0, r0, r1
 800d42a:	b003      	add	sp, #12
 800d42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d430 <__copybits>:
 800d430:	3901      	subs	r1, #1
 800d432:	b510      	push	{r4, lr}
 800d434:	1149      	asrs	r1, r1, #5
 800d436:	6914      	ldr	r4, [r2, #16]
 800d438:	3101      	adds	r1, #1
 800d43a:	f102 0314 	add.w	r3, r2, #20
 800d43e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d442:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d446:	42a3      	cmp	r3, r4
 800d448:	4602      	mov	r2, r0
 800d44a:	d303      	bcc.n	800d454 <__copybits+0x24>
 800d44c:	2300      	movs	r3, #0
 800d44e:	428a      	cmp	r2, r1
 800d450:	d305      	bcc.n	800d45e <__copybits+0x2e>
 800d452:	bd10      	pop	{r4, pc}
 800d454:	f853 2b04 	ldr.w	r2, [r3], #4
 800d458:	f840 2b04 	str.w	r2, [r0], #4
 800d45c:	e7f3      	b.n	800d446 <__copybits+0x16>
 800d45e:	f842 3b04 	str.w	r3, [r2], #4
 800d462:	e7f4      	b.n	800d44e <__copybits+0x1e>

0800d464 <__any_on>:
 800d464:	f100 0214 	add.w	r2, r0, #20
 800d468:	6900      	ldr	r0, [r0, #16]
 800d46a:	114b      	asrs	r3, r1, #5
 800d46c:	4298      	cmp	r0, r3
 800d46e:	b510      	push	{r4, lr}
 800d470:	db11      	blt.n	800d496 <__any_on+0x32>
 800d472:	dd0a      	ble.n	800d48a <__any_on+0x26>
 800d474:	f011 011f 	ands.w	r1, r1, #31
 800d478:	d007      	beq.n	800d48a <__any_on+0x26>
 800d47a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d47e:	fa24 f001 	lsr.w	r0, r4, r1
 800d482:	fa00 f101 	lsl.w	r1, r0, r1
 800d486:	428c      	cmp	r4, r1
 800d488:	d10b      	bne.n	800d4a2 <__any_on+0x3e>
 800d48a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d48e:	4293      	cmp	r3, r2
 800d490:	d803      	bhi.n	800d49a <__any_on+0x36>
 800d492:	2000      	movs	r0, #0
 800d494:	bd10      	pop	{r4, pc}
 800d496:	4603      	mov	r3, r0
 800d498:	e7f7      	b.n	800d48a <__any_on+0x26>
 800d49a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d49e:	2900      	cmp	r1, #0
 800d4a0:	d0f5      	beq.n	800d48e <__any_on+0x2a>
 800d4a2:	2001      	movs	r0, #1
 800d4a4:	e7f6      	b.n	800d494 <__any_on+0x30>

0800d4a6 <_calloc_r>:
 800d4a6:	b538      	push	{r3, r4, r5, lr}
 800d4a8:	fb02 f401 	mul.w	r4, r2, r1
 800d4ac:	4621      	mov	r1, r4
 800d4ae:	f000 f857 	bl	800d560 <_malloc_r>
 800d4b2:	4605      	mov	r5, r0
 800d4b4:	b118      	cbz	r0, 800d4be <_calloc_r+0x18>
 800d4b6:	4622      	mov	r2, r4
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	f7fc fae1 	bl	8009a80 <memset>
 800d4be:	4628      	mov	r0, r5
 800d4c0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d4c4 <_free_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	2900      	cmp	r1, #0
 800d4ca:	d045      	beq.n	800d558 <_free_r+0x94>
 800d4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4d0:	1f0c      	subs	r4, r1, #4
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	bfb8      	it	lt
 800d4d6:	18e4      	addlt	r4, r4, r3
 800d4d8:	f000 fabf 	bl	800da5a <__malloc_lock>
 800d4dc:	4a1f      	ldr	r2, [pc, #124]	; (800d55c <_free_r+0x98>)
 800d4de:	6813      	ldr	r3, [r2, #0]
 800d4e0:	4610      	mov	r0, r2
 800d4e2:	b933      	cbnz	r3, 800d4f2 <_free_r+0x2e>
 800d4e4:	6063      	str	r3, [r4, #4]
 800d4e6:	6014      	str	r4, [r2, #0]
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ee:	f000 bab5 	b.w	800da5c <__malloc_unlock>
 800d4f2:	42a3      	cmp	r3, r4
 800d4f4:	d90c      	bls.n	800d510 <_free_r+0x4c>
 800d4f6:	6821      	ldr	r1, [r4, #0]
 800d4f8:	1862      	adds	r2, r4, r1
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	bf04      	itt	eq
 800d4fe:	681a      	ldreq	r2, [r3, #0]
 800d500:	685b      	ldreq	r3, [r3, #4]
 800d502:	6063      	str	r3, [r4, #4]
 800d504:	bf04      	itt	eq
 800d506:	1852      	addeq	r2, r2, r1
 800d508:	6022      	streq	r2, [r4, #0]
 800d50a:	6004      	str	r4, [r0, #0]
 800d50c:	e7ec      	b.n	800d4e8 <_free_r+0x24>
 800d50e:	4613      	mov	r3, r2
 800d510:	685a      	ldr	r2, [r3, #4]
 800d512:	b10a      	cbz	r2, 800d518 <_free_r+0x54>
 800d514:	42a2      	cmp	r2, r4
 800d516:	d9fa      	bls.n	800d50e <_free_r+0x4a>
 800d518:	6819      	ldr	r1, [r3, #0]
 800d51a:	1858      	adds	r0, r3, r1
 800d51c:	42a0      	cmp	r0, r4
 800d51e:	d10b      	bne.n	800d538 <_free_r+0x74>
 800d520:	6820      	ldr	r0, [r4, #0]
 800d522:	4401      	add	r1, r0
 800d524:	1858      	adds	r0, r3, r1
 800d526:	4282      	cmp	r2, r0
 800d528:	6019      	str	r1, [r3, #0]
 800d52a:	d1dd      	bne.n	800d4e8 <_free_r+0x24>
 800d52c:	6810      	ldr	r0, [r2, #0]
 800d52e:	6852      	ldr	r2, [r2, #4]
 800d530:	605a      	str	r2, [r3, #4]
 800d532:	4401      	add	r1, r0
 800d534:	6019      	str	r1, [r3, #0]
 800d536:	e7d7      	b.n	800d4e8 <_free_r+0x24>
 800d538:	d902      	bls.n	800d540 <_free_r+0x7c>
 800d53a:	230c      	movs	r3, #12
 800d53c:	602b      	str	r3, [r5, #0]
 800d53e:	e7d3      	b.n	800d4e8 <_free_r+0x24>
 800d540:	6820      	ldr	r0, [r4, #0]
 800d542:	1821      	adds	r1, r4, r0
 800d544:	428a      	cmp	r2, r1
 800d546:	bf04      	itt	eq
 800d548:	6811      	ldreq	r1, [r2, #0]
 800d54a:	6852      	ldreq	r2, [r2, #4]
 800d54c:	6062      	str	r2, [r4, #4]
 800d54e:	bf04      	itt	eq
 800d550:	1809      	addeq	r1, r1, r0
 800d552:	6021      	streq	r1, [r4, #0]
 800d554:	605c      	str	r4, [r3, #4]
 800d556:	e7c7      	b.n	800d4e8 <_free_r+0x24>
 800d558:	bd38      	pop	{r3, r4, r5, pc}
 800d55a:	bf00      	nop
 800d55c:	20000214 	.word	0x20000214

0800d560 <_malloc_r>:
 800d560:	b570      	push	{r4, r5, r6, lr}
 800d562:	1ccd      	adds	r5, r1, #3
 800d564:	f025 0503 	bic.w	r5, r5, #3
 800d568:	3508      	adds	r5, #8
 800d56a:	2d0c      	cmp	r5, #12
 800d56c:	bf38      	it	cc
 800d56e:	250c      	movcc	r5, #12
 800d570:	2d00      	cmp	r5, #0
 800d572:	4606      	mov	r6, r0
 800d574:	db01      	blt.n	800d57a <_malloc_r+0x1a>
 800d576:	42a9      	cmp	r1, r5
 800d578:	d903      	bls.n	800d582 <_malloc_r+0x22>
 800d57a:	230c      	movs	r3, #12
 800d57c:	6033      	str	r3, [r6, #0]
 800d57e:	2000      	movs	r0, #0
 800d580:	bd70      	pop	{r4, r5, r6, pc}
 800d582:	f000 fa6a 	bl	800da5a <__malloc_lock>
 800d586:	4a21      	ldr	r2, [pc, #132]	; (800d60c <_malloc_r+0xac>)
 800d588:	6814      	ldr	r4, [r2, #0]
 800d58a:	4621      	mov	r1, r4
 800d58c:	b991      	cbnz	r1, 800d5b4 <_malloc_r+0x54>
 800d58e:	4c20      	ldr	r4, [pc, #128]	; (800d610 <_malloc_r+0xb0>)
 800d590:	6823      	ldr	r3, [r4, #0]
 800d592:	b91b      	cbnz	r3, 800d59c <_malloc_r+0x3c>
 800d594:	4630      	mov	r0, r6
 800d596:	f000 f98f 	bl	800d8b8 <_sbrk_r>
 800d59a:	6020      	str	r0, [r4, #0]
 800d59c:	4629      	mov	r1, r5
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f000 f98a 	bl	800d8b8 <_sbrk_r>
 800d5a4:	1c43      	adds	r3, r0, #1
 800d5a6:	d124      	bne.n	800d5f2 <_malloc_r+0x92>
 800d5a8:	230c      	movs	r3, #12
 800d5aa:	6033      	str	r3, [r6, #0]
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	f000 fa55 	bl	800da5c <__malloc_unlock>
 800d5b2:	e7e4      	b.n	800d57e <_malloc_r+0x1e>
 800d5b4:	680b      	ldr	r3, [r1, #0]
 800d5b6:	1b5b      	subs	r3, r3, r5
 800d5b8:	d418      	bmi.n	800d5ec <_malloc_r+0x8c>
 800d5ba:	2b0b      	cmp	r3, #11
 800d5bc:	d90f      	bls.n	800d5de <_malloc_r+0x7e>
 800d5be:	600b      	str	r3, [r1, #0]
 800d5c0:	50cd      	str	r5, [r1, r3]
 800d5c2:	18cc      	adds	r4, r1, r3
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	f000 fa49 	bl	800da5c <__malloc_unlock>
 800d5ca:	f104 000b 	add.w	r0, r4, #11
 800d5ce:	1d23      	adds	r3, r4, #4
 800d5d0:	f020 0007 	bic.w	r0, r0, #7
 800d5d4:	1ac3      	subs	r3, r0, r3
 800d5d6:	d0d3      	beq.n	800d580 <_malloc_r+0x20>
 800d5d8:	425a      	negs	r2, r3
 800d5da:	50e2      	str	r2, [r4, r3]
 800d5dc:	e7d0      	b.n	800d580 <_malloc_r+0x20>
 800d5de:	428c      	cmp	r4, r1
 800d5e0:	684b      	ldr	r3, [r1, #4]
 800d5e2:	bf16      	itet	ne
 800d5e4:	6063      	strne	r3, [r4, #4]
 800d5e6:	6013      	streq	r3, [r2, #0]
 800d5e8:	460c      	movne	r4, r1
 800d5ea:	e7eb      	b.n	800d5c4 <_malloc_r+0x64>
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	6849      	ldr	r1, [r1, #4]
 800d5f0:	e7cc      	b.n	800d58c <_malloc_r+0x2c>
 800d5f2:	1cc4      	adds	r4, r0, #3
 800d5f4:	f024 0403 	bic.w	r4, r4, #3
 800d5f8:	42a0      	cmp	r0, r4
 800d5fa:	d005      	beq.n	800d608 <_malloc_r+0xa8>
 800d5fc:	1a21      	subs	r1, r4, r0
 800d5fe:	4630      	mov	r0, r6
 800d600:	f000 f95a 	bl	800d8b8 <_sbrk_r>
 800d604:	3001      	adds	r0, #1
 800d606:	d0cf      	beq.n	800d5a8 <_malloc_r+0x48>
 800d608:	6025      	str	r5, [r4, #0]
 800d60a:	e7db      	b.n	800d5c4 <_malloc_r+0x64>
 800d60c:	20000214 	.word	0x20000214
 800d610:	20000218 	.word	0x20000218

0800d614 <__ssputs_r>:
 800d614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d618:	688e      	ldr	r6, [r1, #8]
 800d61a:	429e      	cmp	r6, r3
 800d61c:	4682      	mov	sl, r0
 800d61e:	460c      	mov	r4, r1
 800d620:	4690      	mov	r8, r2
 800d622:	4699      	mov	r9, r3
 800d624:	d837      	bhi.n	800d696 <__ssputs_r+0x82>
 800d626:	898a      	ldrh	r2, [r1, #12]
 800d628:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d62c:	d031      	beq.n	800d692 <__ssputs_r+0x7e>
 800d62e:	6825      	ldr	r5, [r4, #0]
 800d630:	6909      	ldr	r1, [r1, #16]
 800d632:	1a6f      	subs	r7, r5, r1
 800d634:	6965      	ldr	r5, [r4, #20]
 800d636:	2302      	movs	r3, #2
 800d638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d63c:	fb95 f5f3 	sdiv	r5, r5, r3
 800d640:	f109 0301 	add.w	r3, r9, #1
 800d644:	443b      	add	r3, r7
 800d646:	429d      	cmp	r5, r3
 800d648:	bf38      	it	cc
 800d64a:	461d      	movcc	r5, r3
 800d64c:	0553      	lsls	r3, r2, #21
 800d64e:	d530      	bpl.n	800d6b2 <__ssputs_r+0x9e>
 800d650:	4629      	mov	r1, r5
 800d652:	f7ff ff85 	bl	800d560 <_malloc_r>
 800d656:	4606      	mov	r6, r0
 800d658:	b950      	cbnz	r0, 800d670 <__ssputs_r+0x5c>
 800d65a:	230c      	movs	r3, #12
 800d65c:	f8ca 3000 	str.w	r3, [sl]
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d666:	81a3      	strh	r3, [r4, #12]
 800d668:	f04f 30ff 	mov.w	r0, #4294967295
 800d66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d670:	463a      	mov	r2, r7
 800d672:	6921      	ldr	r1, [r4, #16]
 800d674:	f7ff fb0e 	bl	800cc94 <memcpy>
 800d678:	89a3      	ldrh	r3, [r4, #12]
 800d67a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d682:	81a3      	strh	r3, [r4, #12]
 800d684:	6126      	str	r6, [r4, #16]
 800d686:	6165      	str	r5, [r4, #20]
 800d688:	443e      	add	r6, r7
 800d68a:	1bed      	subs	r5, r5, r7
 800d68c:	6026      	str	r6, [r4, #0]
 800d68e:	60a5      	str	r5, [r4, #8]
 800d690:	464e      	mov	r6, r9
 800d692:	454e      	cmp	r6, r9
 800d694:	d900      	bls.n	800d698 <__ssputs_r+0x84>
 800d696:	464e      	mov	r6, r9
 800d698:	4632      	mov	r2, r6
 800d69a:	4641      	mov	r1, r8
 800d69c:	6820      	ldr	r0, [r4, #0]
 800d69e:	f000 f9c3 	bl	800da28 <memmove>
 800d6a2:	68a3      	ldr	r3, [r4, #8]
 800d6a4:	1b9b      	subs	r3, r3, r6
 800d6a6:	60a3      	str	r3, [r4, #8]
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	441e      	add	r6, r3
 800d6ac:	6026      	str	r6, [r4, #0]
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	e7dc      	b.n	800d66c <__ssputs_r+0x58>
 800d6b2:	462a      	mov	r2, r5
 800d6b4:	f000 f9d3 	bl	800da5e <_realloc_r>
 800d6b8:	4606      	mov	r6, r0
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d1e2      	bne.n	800d684 <__ssputs_r+0x70>
 800d6be:	6921      	ldr	r1, [r4, #16]
 800d6c0:	4650      	mov	r0, sl
 800d6c2:	f7ff feff 	bl	800d4c4 <_free_r>
 800d6c6:	e7c8      	b.n	800d65a <__ssputs_r+0x46>

0800d6c8 <_svfiprintf_r>:
 800d6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6cc:	461d      	mov	r5, r3
 800d6ce:	898b      	ldrh	r3, [r1, #12]
 800d6d0:	061f      	lsls	r7, r3, #24
 800d6d2:	b09d      	sub	sp, #116	; 0x74
 800d6d4:	4680      	mov	r8, r0
 800d6d6:	460c      	mov	r4, r1
 800d6d8:	4616      	mov	r6, r2
 800d6da:	d50f      	bpl.n	800d6fc <_svfiprintf_r+0x34>
 800d6dc:	690b      	ldr	r3, [r1, #16]
 800d6de:	b96b      	cbnz	r3, 800d6fc <_svfiprintf_r+0x34>
 800d6e0:	2140      	movs	r1, #64	; 0x40
 800d6e2:	f7ff ff3d 	bl	800d560 <_malloc_r>
 800d6e6:	6020      	str	r0, [r4, #0]
 800d6e8:	6120      	str	r0, [r4, #16]
 800d6ea:	b928      	cbnz	r0, 800d6f8 <_svfiprintf_r+0x30>
 800d6ec:	230c      	movs	r3, #12
 800d6ee:	f8c8 3000 	str.w	r3, [r8]
 800d6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f6:	e0c8      	b.n	800d88a <_svfiprintf_r+0x1c2>
 800d6f8:	2340      	movs	r3, #64	; 0x40
 800d6fa:	6163      	str	r3, [r4, #20]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d700:	2320      	movs	r3, #32
 800d702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d706:	2330      	movs	r3, #48	; 0x30
 800d708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d70c:	9503      	str	r5, [sp, #12]
 800d70e:	f04f 0b01 	mov.w	fp, #1
 800d712:	4637      	mov	r7, r6
 800d714:	463d      	mov	r5, r7
 800d716:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d71a:	b10b      	cbz	r3, 800d720 <_svfiprintf_r+0x58>
 800d71c:	2b25      	cmp	r3, #37	; 0x25
 800d71e:	d13e      	bne.n	800d79e <_svfiprintf_r+0xd6>
 800d720:	ebb7 0a06 	subs.w	sl, r7, r6
 800d724:	d00b      	beq.n	800d73e <_svfiprintf_r+0x76>
 800d726:	4653      	mov	r3, sl
 800d728:	4632      	mov	r2, r6
 800d72a:	4621      	mov	r1, r4
 800d72c:	4640      	mov	r0, r8
 800d72e:	f7ff ff71 	bl	800d614 <__ssputs_r>
 800d732:	3001      	adds	r0, #1
 800d734:	f000 80a4 	beq.w	800d880 <_svfiprintf_r+0x1b8>
 800d738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d73a:	4453      	add	r3, sl
 800d73c:	9309      	str	r3, [sp, #36]	; 0x24
 800d73e:	783b      	ldrb	r3, [r7, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	f000 809d 	beq.w	800d880 <_svfiprintf_r+0x1b8>
 800d746:	2300      	movs	r3, #0
 800d748:	f04f 32ff 	mov.w	r2, #4294967295
 800d74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d750:	9304      	str	r3, [sp, #16]
 800d752:	9307      	str	r3, [sp, #28]
 800d754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d758:	931a      	str	r3, [sp, #104]	; 0x68
 800d75a:	462f      	mov	r7, r5
 800d75c:	2205      	movs	r2, #5
 800d75e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d762:	4850      	ldr	r0, [pc, #320]	; (800d8a4 <_svfiprintf_r+0x1dc>)
 800d764:	f7f2 fd3c 	bl	80001e0 <memchr>
 800d768:	9b04      	ldr	r3, [sp, #16]
 800d76a:	b9d0      	cbnz	r0, 800d7a2 <_svfiprintf_r+0xda>
 800d76c:	06d9      	lsls	r1, r3, #27
 800d76e:	bf44      	itt	mi
 800d770:	2220      	movmi	r2, #32
 800d772:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d776:	071a      	lsls	r2, r3, #28
 800d778:	bf44      	itt	mi
 800d77a:	222b      	movmi	r2, #43	; 0x2b
 800d77c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d780:	782a      	ldrb	r2, [r5, #0]
 800d782:	2a2a      	cmp	r2, #42	; 0x2a
 800d784:	d015      	beq.n	800d7b2 <_svfiprintf_r+0xea>
 800d786:	9a07      	ldr	r2, [sp, #28]
 800d788:	462f      	mov	r7, r5
 800d78a:	2000      	movs	r0, #0
 800d78c:	250a      	movs	r5, #10
 800d78e:	4639      	mov	r1, r7
 800d790:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d794:	3b30      	subs	r3, #48	; 0x30
 800d796:	2b09      	cmp	r3, #9
 800d798:	d94d      	bls.n	800d836 <_svfiprintf_r+0x16e>
 800d79a:	b1b8      	cbz	r0, 800d7cc <_svfiprintf_r+0x104>
 800d79c:	e00f      	b.n	800d7be <_svfiprintf_r+0xf6>
 800d79e:	462f      	mov	r7, r5
 800d7a0:	e7b8      	b.n	800d714 <_svfiprintf_r+0x4c>
 800d7a2:	4a40      	ldr	r2, [pc, #256]	; (800d8a4 <_svfiprintf_r+0x1dc>)
 800d7a4:	1a80      	subs	r0, r0, r2
 800d7a6:	fa0b f000 	lsl.w	r0, fp, r0
 800d7aa:	4318      	orrs	r0, r3
 800d7ac:	9004      	str	r0, [sp, #16]
 800d7ae:	463d      	mov	r5, r7
 800d7b0:	e7d3      	b.n	800d75a <_svfiprintf_r+0x92>
 800d7b2:	9a03      	ldr	r2, [sp, #12]
 800d7b4:	1d11      	adds	r1, r2, #4
 800d7b6:	6812      	ldr	r2, [r2, #0]
 800d7b8:	9103      	str	r1, [sp, #12]
 800d7ba:	2a00      	cmp	r2, #0
 800d7bc:	db01      	blt.n	800d7c2 <_svfiprintf_r+0xfa>
 800d7be:	9207      	str	r2, [sp, #28]
 800d7c0:	e004      	b.n	800d7cc <_svfiprintf_r+0x104>
 800d7c2:	4252      	negs	r2, r2
 800d7c4:	f043 0302 	orr.w	r3, r3, #2
 800d7c8:	9207      	str	r2, [sp, #28]
 800d7ca:	9304      	str	r3, [sp, #16]
 800d7cc:	783b      	ldrb	r3, [r7, #0]
 800d7ce:	2b2e      	cmp	r3, #46	; 0x2e
 800d7d0:	d10c      	bne.n	800d7ec <_svfiprintf_r+0x124>
 800d7d2:	787b      	ldrb	r3, [r7, #1]
 800d7d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d7d6:	d133      	bne.n	800d840 <_svfiprintf_r+0x178>
 800d7d8:	9b03      	ldr	r3, [sp, #12]
 800d7da:	1d1a      	adds	r2, r3, #4
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	9203      	str	r2, [sp, #12]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	bfb8      	it	lt
 800d7e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7e8:	3702      	adds	r7, #2
 800d7ea:	9305      	str	r3, [sp, #20]
 800d7ec:	4d2e      	ldr	r5, [pc, #184]	; (800d8a8 <_svfiprintf_r+0x1e0>)
 800d7ee:	7839      	ldrb	r1, [r7, #0]
 800d7f0:	2203      	movs	r2, #3
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	f7f2 fcf4 	bl	80001e0 <memchr>
 800d7f8:	b138      	cbz	r0, 800d80a <_svfiprintf_r+0x142>
 800d7fa:	2340      	movs	r3, #64	; 0x40
 800d7fc:	1b40      	subs	r0, r0, r5
 800d7fe:	fa03 f000 	lsl.w	r0, r3, r0
 800d802:	9b04      	ldr	r3, [sp, #16]
 800d804:	4303      	orrs	r3, r0
 800d806:	3701      	adds	r7, #1
 800d808:	9304      	str	r3, [sp, #16]
 800d80a:	7839      	ldrb	r1, [r7, #0]
 800d80c:	4827      	ldr	r0, [pc, #156]	; (800d8ac <_svfiprintf_r+0x1e4>)
 800d80e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d812:	2206      	movs	r2, #6
 800d814:	1c7e      	adds	r6, r7, #1
 800d816:	f7f2 fce3 	bl	80001e0 <memchr>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d038      	beq.n	800d890 <_svfiprintf_r+0x1c8>
 800d81e:	4b24      	ldr	r3, [pc, #144]	; (800d8b0 <_svfiprintf_r+0x1e8>)
 800d820:	bb13      	cbnz	r3, 800d868 <_svfiprintf_r+0x1a0>
 800d822:	9b03      	ldr	r3, [sp, #12]
 800d824:	3307      	adds	r3, #7
 800d826:	f023 0307 	bic.w	r3, r3, #7
 800d82a:	3308      	adds	r3, #8
 800d82c:	9303      	str	r3, [sp, #12]
 800d82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d830:	444b      	add	r3, r9
 800d832:	9309      	str	r3, [sp, #36]	; 0x24
 800d834:	e76d      	b.n	800d712 <_svfiprintf_r+0x4a>
 800d836:	fb05 3202 	mla	r2, r5, r2, r3
 800d83a:	2001      	movs	r0, #1
 800d83c:	460f      	mov	r7, r1
 800d83e:	e7a6      	b.n	800d78e <_svfiprintf_r+0xc6>
 800d840:	2300      	movs	r3, #0
 800d842:	3701      	adds	r7, #1
 800d844:	9305      	str	r3, [sp, #20]
 800d846:	4619      	mov	r1, r3
 800d848:	250a      	movs	r5, #10
 800d84a:	4638      	mov	r0, r7
 800d84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d850:	3a30      	subs	r2, #48	; 0x30
 800d852:	2a09      	cmp	r2, #9
 800d854:	d903      	bls.n	800d85e <_svfiprintf_r+0x196>
 800d856:	2b00      	cmp	r3, #0
 800d858:	d0c8      	beq.n	800d7ec <_svfiprintf_r+0x124>
 800d85a:	9105      	str	r1, [sp, #20]
 800d85c:	e7c6      	b.n	800d7ec <_svfiprintf_r+0x124>
 800d85e:	fb05 2101 	mla	r1, r5, r1, r2
 800d862:	2301      	movs	r3, #1
 800d864:	4607      	mov	r7, r0
 800d866:	e7f0      	b.n	800d84a <_svfiprintf_r+0x182>
 800d868:	ab03      	add	r3, sp, #12
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	4622      	mov	r2, r4
 800d86e:	4b11      	ldr	r3, [pc, #68]	; (800d8b4 <_svfiprintf_r+0x1ec>)
 800d870:	a904      	add	r1, sp, #16
 800d872:	4640      	mov	r0, r8
 800d874:	f7fc f9a0 	bl	8009bb8 <_printf_float>
 800d878:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d87c:	4681      	mov	r9, r0
 800d87e:	d1d6      	bne.n	800d82e <_svfiprintf_r+0x166>
 800d880:	89a3      	ldrh	r3, [r4, #12]
 800d882:	065b      	lsls	r3, r3, #25
 800d884:	f53f af35 	bmi.w	800d6f2 <_svfiprintf_r+0x2a>
 800d888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d88a:	b01d      	add	sp, #116	; 0x74
 800d88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d890:	ab03      	add	r3, sp, #12
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	4622      	mov	r2, r4
 800d896:	4b07      	ldr	r3, [pc, #28]	; (800d8b4 <_svfiprintf_r+0x1ec>)
 800d898:	a904      	add	r1, sp, #16
 800d89a:	4640      	mov	r0, r8
 800d89c:	f7fc fc42 	bl	800a124 <_printf_i>
 800d8a0:	e7ea      	b.n	800d878 <_svfiprintf_r+0x1b0>
 800d8a2:	bf00      	nop
 800d8a4:	0800df14 	.word	0x0800df14
 800d8a8:	0800df1a 	.word	0x0800df1a
 800d8ac:	0800df1e 	.word	0x0800df1e
 800d8b0:	08009bb9 	.word	0x08009bb9
 800d8b4:	0800d615 	.word	0x0800d615

0800d8b8 <_sbrk_r>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	4c06      	ldr	r4, [pc, #24]	; (800d8d4 <_sbrk_r+0x1c>)
 800d8bc:	2300      	movs	r3, #0
 800d8be:	4605      	mov	r5, r0
 800d8c0:	4608      	mov	r0, r1
 800d8c2:	6023      	str	r3, [r4, #0]
 800d8c4:	f7f5 fe46 	bl	8003554 <_sbrk>
 800d8c8:	1c43      	adds	r3, r0, #1
 800d8ca:	d102      	bne.n	800d8d2 <_sbrk_r+0x1a>
 800d8cc:	6823      	ldr	r3, [r4, #0]
 800d8ce:	b103      	cbz	r3, 800d8d2 <_sbrk_r+0x1a>
 800d8d0:	602b      	str	r3, [r5, #0]
 800d8d2:	bd38      	pop	{r3, r4, r5, pc}
 800d8d4:	2000076c 	.word	0x2000076c

0800d8d8 <__sread>:
 800d8d8:	b510      	push	{r4, lr}
 800d8da:	460c      	mov	r4, r1
 800d8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8e0:	f000 f8e4 	bl	800daac <_read_r>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	bfab      	itete	ge
 800d8e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8ea:	89a3      	ldrhlt	r3, [r4, #12]
 800d8ec:	181b      	addge	r3, r3, r0
 800d8ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8f2:	bfac      	ite	ge
 800d8f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8f6:	81a3      	strhlt	r3, [r4, #12]
 800d8f8:	bd10      	pop	{r4, pc}

0800d8fa <__swrite>:
 800d8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fe:	461f      	mov	r7, r3
 800d900:	898b      	ldrh	r3, [r1, #12]
 800d902:	05db      	lsls	r3, r3, #23
 800d904:	4605      	mov	r5, r0
 800d906:	460c      	mov	r4, r1
 800d908:	4616      	mov	r6, r2
 800d90a:	d505      	bpl.n	800d918 <__swrite+0x1e>
 800d90c:	2302      	movs	r3, #2
 800d90e:	2200      	movs	r2, #0
 800d910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d914:	f000 f876 	bl	800da04 <_lseek_r>
 800d918:	89a3      	ldrh	r3, [r4, #12]
 800d91a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d91e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d922:	81a3      	strh	r3, [r4, #12]
 800d924:	4632      	mov	r2, r6
 800d926:	463b      	mov	r3, r7
 800d928:	4628      	mov	r0, r5
 800d92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d92e:	f000 b835 	b.w	800d99c <_write_r>

0800d932 <__sseek>:
 800d932:	b510      	push	{r4, lr}
 800d934:	460c      	mov	r4, r1
 800d936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d93a:	f000 f863 	bl	800da04 <_lseek_r>
 800d93e:	1c43      	adds	r3, r0, #1
 800d940:	89a3      	ldrh	r3, [r4, #12]
 800d942:	bf15      	itete	ne
 800d944:	6560      	strne	r0, [r4, #84]	; 0x54
 800d946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d94a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d94e:	81a3      	strheq	r3, [r4, #12]
 800d950:	bf18      	it	ne
 800d952:	81a3      	strhne	r3, [r4, #12]
 800d954:	bd10      	pop	{r4, pc}

0800d956 <__sclose>:
 800d956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d95a:	f000 b831 	b.w	800d9c0 <_close_r>

0800d95e <strncmp>:
 800d95e:	b510      	push	{r4, lr}
 800d960:	b16a      	cbz	r2, 800d97e <strncmp+0x20>
 800d962:	3901      	subs	r1, #1
 800d964:	1884      	adds	r4, r0, r2
 800d966:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d96a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d96e:	4293      	cmp	r3, r2
 800d970:	d103      	bne.n	800d97a <strncmp+0x1c>
 800d972:	42a0      	cmp	r0, r4
 800d974:	d001      	beq.n	800d97a <strncmp+0x1c>
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1f5      	bne.n	800d966 <strncmp+0x8>
 800d97a:	1a98      	subs	r0, r3, r2
 800d97c:	bd10      	pop	{r4, pc}
 800d97e:	4610      	mov	r0, r2
 800d980:	e7fc      	b.n	800d97c <strncmp+0x1e>

0800d982 <__ascii_wctomb>:
 800d982:	b149      	cbz	r1, 800d998 <__ascii_wctomb+0x16>
 800d984:	2aff      	cmp	r2, #255	; 0xff
 800d986:	bf85      	ittet	hi
 800d988:	238a      	movhi	r3, #138	; 0x8a
 800d98a:	6003      	strhi	r3, [r0, #0]
 800d98c:	700a      	strbls	r2, [r1, #0]
 800d98e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d992:	bf98      	it	ls
 800d994:	2001      	movls	r0, #1
 800d996:	4770      	bx	lr
 800d998:	4608      	mov	r0, r1
 800d99a:	4770      	bx	lr

0800d99c <_write_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	4c07      	ldr	r4, [pc, #28]	; (800d9bc <_write_r+0x20>)
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	4608      	mov	r0, r1
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	6022      	str	r2, [r4, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	f7f3 fee0 	bl	8001770 <_write>
 800d9b0:	1c43      	adds	r3, r0, #1
 800d9b2:	d102      	bne.n	800d9ba <_write_r+0x1e>
 800d9b4:	6823      	ldr	r3, [r4, #0]
 800d9b6:	b103      	cbz	r3, 800d9ba <_write_r+0x1e>
 800d9b8:	602b      	str	r3, [r5, #0]
 800d9ba:	bd38      	pop	{r3, r4, r5, pc}
 800d9bc:	2000076c 	.word	0x2000076c

0800d9c0 <_close_r>:
 800d9c0:	b538      	push	{r3, r4, r5, lr}
 800d9c2:	4c06      	ldr	r4, [pc, #24]	; (800d9dc <_close_r+0x1c>)
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	4608      	mov	r0, r1
 800d9ca:	6023      	str	r3, [r4, #0]
 800d9cc:	f7f5 fd99 	bl	8003502 <_close>
 800d9d0:	1c43      	adds	r3, r0, #1
 800d9d2:	d102      	bne.n	800d9da <_close_r+0x1a>
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	b103      	cbz	r3, 800d9da <_close_r+0x1a>
 800d9d8:	602b      	str	r3, [r5, #0]
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
 800d9dc:	2000076c 	.word	0x2000076c

0800d9e0 <_fstat_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	4c07      	ldr	r4, [pc, #28]	; (800da00 <_fstat_r+0x20>)
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	4605      	mov	r5, r0
 800d9e8:	4608      	mov	r0, r1
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	f7f5 fd94 	bl	800351a <_fstat>
 800d9f2:	1c43      	adds	r3, r0, #1
 800d9f4:	d102      	bne.n	800d9fc <_fstat_r+0x1c>
 800d9f6:	6823      	ldr	r3, [r4, #0]
 800d9f8:	b103      	cbz	r3, 800d9fc <_fstat_r+0x1c>
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	bd38      	pop	{r3, r4, r5, pc}
 800d9fe:	bf00      	nop
 800da00:	2000076c 	.word	0x2000076c

0800da04 <_lseek_r>:
 800da04:	b538      	push	{r3, r4, r5, lr}
 800da06:	4c07      	ldr	r4, [pc, #28]	; (800da24 <_lseek_r+0x20>)
 800da08:	4605      	mov	r5, r0
 800da0a:	4608      	mov	r0, r1
 800da0c:	4611      	mov	r1, r2
 800da0e:	2200      	movs	r2, #0
 800da10:	6022      	str	r2, [r4, #0]
 800da12:	461a      	mov	r2, r3
 800da14:	f7f5 fd91 	bl	800353a <_lseek>
 800da18:	1c43      	adds	r3, r0, #1
 800da1a:	d102      	bne.n	800da22 <_lseek_r+0x1e>
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	b103      	cbz	r3, 800da22 <_lseek_r+0x1e>
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	bd38      	pop	{r3, r4, r5, pc}
 800da24:	2000076c 	.word	0x2000076c

0800da28 <memmove>:
 800da28:	4288      	cmp	r0, r1
 800da2a:	b510      	push	{r4, lr}
 800da2c:	eb01 0302 	add.w	r3, r1, r2
 800da30:	d807      	bhi.n	800da42 <memmove+0x1a>
 800da32:	1e42      	subs	r2, r0, #1
 800da34:	4299      	cmp	r1, r3
 800da36:	d00a      	beq.n	800da4e <memmove+0x26>
 800da38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800da40:	e7f8      	b.n	800da34 <memmove+0xc>
 800da42:	4283      	cmp	r3, r0
 800da44:	d9f5      	bls.n	800da32 <memmove+0xa>
 800da46:	1881      	adds	r1, r0, r2
 800da48:	1ad2      	subs	r2, r2, r3
 800da4a:	42d3      	cmn	r3, r2
 800da4c:	d100      	bne.n	800da50 <memmove+0x28>
 800da4e:	bd10      	pop	{r4, pc}
 800da50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800da58:	e7f7      	b.n	800da4a <memmove+0x22>

0800da5a <__malloc_lock>:
 800da5a:	4770      	bx	lr

0800da5c <__malloc_unlock>:
 800da5c:	4770      	bx	lr

0800da5e <_realloc_r>:
 800da5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da60:	4607      	mov	r7, r0
 800da62:	4614      	mov	r4, r2
 800da64:	460e      	mov	r6, r1
 800da66:	b921      	cbnz	r1, 800da72 <_realloc_r+0x14>
 800da68:	4611      	mov	r1, r2
 800da6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da6e:	f7ff bd77 	b.w	800d560 <_malloc_r>
 800da72:	b922      	cbnz	r2, 800da7e <_realloc_r+0x20>
 800da74:	f7ff fd26 	bl	800d4c4 <_free_r>
 800da78:	4625      	mov	r5, r4
 800da7a:	4628      	mov	r0, r5
 800da7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da7e:	f000 f827 	bl	800dad0 <_malloc_usable_size_r>
 800da82:	42a0      	cmp	r0, r4
 800da84:	d20f      	bcs.n	800daa6 <_realloc_r+0x48>
 800da86:	4621      	mov	r1, r4
 800da88:	4638      	mov	r0, r7
 800da8a:	f7ff fd69 	bl	800d560 <_malloc_r>
 800da8e:	4605      	mov	r5, r0
 800da90:	2800      	cmp	r0, #0
 800da92:	d0f2      	beq.n	800da7a <_realloc_r+0x1c>
 800da94:	4631      	mov	r1, r6
 800da96:	4622      	mov	r2, r4
 800da98:	f7ff f8fc 	bl	800cc94 <memcpy>
 800da9c:	4631      	mov	r1, r6
 800da9e:	4638      	mov	r0, r7
 800daa0:	f7ff fd10 	bl	800d4c4 <_free_r>
 800daa4:	e7e9      	b.n	800da7a <_realloc_r+0x1c>
 800daa6:	4635      	mov	r5, r6
 800daa8:	e7e7      	b.n	800da7a <_realloc_r+0x1c>
	...

0800daac <_read_r>:
 800daac:	b538      	push	{r3, r4, r5, lr}
 800daae:	4c07      	ldr	r4, [pc, #28]	; (800dacc <_read_r+0x20>)
 800dab0:	4605      	mov	r5, r0
 800dab2:	4608      	mov	r0, r1
 800dab4:	4611      	mov	r1, r2
 800dab6:	2200      	movs	r2, #0
 800dab8:	6022      	str	r2, [r4, #0]
 800daba:	461a      	mov	r2, r3
 800dabc:	f7f5 fd04 	bl	80034c8 <_read>
 800dac0:	1c43      	adds	r3, r0, #1
 800dac2:	d102      	bne.n	800daca <_read_r+0x1e>
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	b103      	cbz	r3, 800daca <_read_r+0x1e>
 800dac8:	602b      	str	r3, [r5, #0]
 800daca:	bd38      	pop	{r3, r4, r5, pc}
 800dacc:	2000076c 	.word	0x2000076c

0800dad0 <_malloc_usable_size_r>:
 800dad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dad4:	1f18      	subs	r0, r3, #4
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	bfbc      	itt	lt
 800dada:	580b      	ldrlt	r3, [r1, r0]
 800dadc:	18c0      	addlt	r0, r0, r3
 800dade:	4770      	bx	lr

0800dae0 <_init>:
 800dae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae2:	bf00      	nop
 800dae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dae6:	bc08      	pop	{r3}
 800dae8:	469e      	mov	lr, r3
 800daea:	4770      	bx	lr

0800daec <_fini>:
 800daec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daee:	bf00      	nop
 800daf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daf2:	bc08      	pop	{r3}
 800daf4:	469e      	mov	lr, r3
 800daf6:	4770      	bx	lr
